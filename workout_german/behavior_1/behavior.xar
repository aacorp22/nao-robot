<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Head" id="2" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="206" y="130">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="head up/down" id="4" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="234" y="162">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="70.7107">
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="95" y="37">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Say Text (1)" id="13" localization="8" tooltip="Say the text received on its input." x="516" y="39">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="84" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit (1)" id="15" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="228" y="43">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Super! Diese Übungen helfen uns, Spannungen im Nacken- und Kopfbereich abzubauen und \nmachen uns gesünder! Kommen wir nun zur zweiten Übung! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Super! Diese Übungen helfen uns, Spannungen im Nacken- und Kopfbereich abzubauen und 
machen uns gesünder! Kommen wir nun zur zweiten Übung! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="head up-down" id="11" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="708" y="32">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="288">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="5" localization="8" tooltip="Say the text received on its input." x="436" y="12">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="109" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="75" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="98" y="20">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei,vier,\nEins,zwei,drei,vier,\nEins,zwei,drei,vier,")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[Eins,zwei,drei,vier,
Eins,zwei,drei,vier,
Eins,zwei,drei,vier,]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="-80.1227" />
                                        <Key frame="271" value="-80.1227" />
                                        <Key frame="288" value="-23.6405" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="-3.87731" />
                                        <Key frame="271" value="-3.87731" />
                                        <Key frame="288" value="-68.4701" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="15" value="0" />
                                        <Key frame="271" value="0" />
                                        <Key frame="288" value="0.2924" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="89.8558" />
                                        <Key frame="271" value="89.8558" />
                                        <Key frame="288" value="84.6373" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="58.6874" />
                                        <Key frame="271" value="58.6874" />
                                        <Key frame="288" value="11.1598" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-9.1747" />
                                        <Key frame="271" value="-9.1747" />
                                        <Key frame="288" value="5.97423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="79.8442" />
                                        <Key frame="271" value="79.8442" />
                                        <Key frame="288" value="23.2058" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="3.87316" />
                                        <Key frame="271" value="3.87316" />
                                        <Key frame="288" value="69.6078" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="0" />
                                        <Key frame="271" value="0" />
                                        <Key frame="288" value="0.3348" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="90.2012" />
                                        <Key frame="271" value="90.2012" />
                                        <Key frame="288" value="84.73" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="-58.7367" />
                                        <Key frame="271" value="-58.7367" />
                                        <Key frame="288" value="-11.1647" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="8.89415" />
                                        <Key frame="271" value="8.89415" />
                                        <Key frame="288" value="7.29261" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="15" value="0.5" />
                                        <Key frame="30" value="21.7" />
                                        <Key frame="50" value="-27.2" />
                                        <Key frame="70" value="21.7" />
                                        <Key frame="90" value="-27.2" />
                                        <Key frame="110" value="21.7" />
                                        <Key frame="130" value="-27.2" />
                                        <Key frame="150" value="21.7" />
                                        <Key frame="170" value="-27.2" />
                                        <Key frame="190" value="21.7" />
                                        <Key frame="210" value="-27.2" />
                                        <Key frame="230" value="21.7" />
                                        <Key frame="250" value="-27.2" />
                                        <Key frame="271" value="0.5" />
                                        <Key frame="288" value="-10.5494" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="271" value="0" />
                                        <Key frame="288" value="-0.0902951" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="animation" id="3" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="150" y="215">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Happy" id="2" localization="8" tooltip="ID : #02A 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Happy" x="143" y="78">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="53">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="FaceLeds" index="1">
                                                  <Diagram scale="100">
                                                    <Box name="laugh" id="1" localization="8" tooltip="laugh" x="123" y="42">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        if( self.bIsRunning ):

            return;

        rDuration = 0.2;
        self.bMustStop = False;
        self.bIsRunning = True;

        while( not self.bMustStop ):
            self.leds.fadeRGB( "FaceLed0", 0x787e9d, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed1", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed2", 0x2ec1e9, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed5", 0x1e9980, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed6", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration, _async=True );

            #time.sleep( 0.1 );

            self.leds.fadeRGB( "FaceLed0", 0x0400a1, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed1", 0x14a176, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed2", 0x000022, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed4", 0x00000e, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed5", 0x56ffff, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed6", 0x000020, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed7", 0x000038, rDuration*2 );


            if( self.bMustStop ):
                break;

        self.bIsRunning = False;
        self.onStopped();

    def onInput_onStop(self):
        self.bMustStop = True;]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                              <ActuatorList model="nao">
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                                                  <Key frame="19" value="-13" />
                                                  <Key frame="34" value="7" />
                                                  <Key frame="53" value="-0.881321" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                                                  <Key frame="19" value="7.29261" />
                                                  <Key frame="34" value="-8" />
                                                  <Key frame="53" value="-10.3736" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                                                  <Key frame="9" value="84.901" />
                                                  <Key frame="17" value="80.5064" />
                                                  <Key frame="25" value="84.8131" />
                                                  <Key frame="32" value="81.9127" />
                                                  <Key frame="51" value="85.1647" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                                                  <Key frame="9" value="35.8574" />
                                                  <Key frame="17" value="8.17153" />
                                                  <Key frame="25" value="34.0117" />
                                                  <Key frame="32" value="9.31412" />
                                                  <Key frame="51" value="4.91953" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                                                  <Key frame="9" value="-50.628" />
                                                  <Key frame="17" value="-59.5051" />
                                                  <Key frame="25" value="-50.8917" />
                                                  <Key frame="32" value="-58.7141" />
                                                  <Key frame="51" value="-64.8665" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                                                  <Key frame="9" value="-39.1973" />
                                                  <Key frame="17" value="-80.5943" />
                                                  <Key frame="25" value="-39.3731" />
                                                  <Key frame="32" value="-79.3638" />
                                                  <Key frame="51" value="-21.8826" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                                                  <Key frame="17" value="-6.4185" />
                                                  <Key frame="32" value="-6.4185" />
                                                  <Key frame="51" value="-7.38531" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                                                  <Key frame="17" value="0.110572" />
                                                  <Key frame="32" value="0.110935" />
                                                  <Key frame="51" value="0.112026" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                                                  <Key frame="7" value="79.3686" />
                                                  <Key frame="15" value="85.3453" />
                                                  <Key frame="23" value="81.2144" />
                                                  <Key frame="30" value="85.4332" />
                                                  <Key frame="49" value="88.1578" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                                                  <Key frame="7" value="-7.20953" />
                                                  <Key frame="15" value="-34.1923" />
                                                  <Key frame="23" value="-8.26423" />
                                                  <Key frame="30" value="-32.6102" />
                                                  <Key frame="49" value="-3.07861" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                                                  <Key frame="7" value="60.3792" />
                                                  <Key frame="15" value="50.799" />
                                                  <Key frame="23" value="59.6761" />
                                                  <Key frame="30" value="51.0627" />
                                                  <Key frame="49" value="85.6041" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                                                  <Key frame="7" value="81.7417" />
                                                  <Key frame="15" value="39.2021" />
                                                  <Key frame="23" value="80.4233" />
                                                  <Key frame="30" value="39.5537" />
                                                  <Key frame="49" value="26.0184" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                                                  <Key frame="15" value="0.173379" />
                                                  <Key frame="30" value="0.173379" />
                                                  <Key frame="49" value="-0.266079" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                                                  <Key frame="15" value="0.221844" />
                                                  <Key frame="30" value="0.221844" />
                                                  <Key frame="49" value="0.221116" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                                                  <Key frame="16" value="-20.2127" />
                                                  <Key frame="31" value="-20.2127" />
                                                  <Key frame="50" value="-18.367" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                                                  <Key frame="16" value="14.0651" />
                                                  <Key frame="31" value="-0.705538" />
                                                  <Key frame="50" value="6.15482" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                                                  <Key frame="16" value="1.58446" />
                                                  <Key frame="31" value="-6.59428" />
                                                  <Key frame="50" value="11.8678" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                                                  <Key frame="16" value="2.98591" />
                                                  <Key frame="31" value="27.3367" />
                                                  <Key frame="50" value="-5.29104" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                                                  <Key frame="16" value="7.99574" />
                                                  <Key frame="31" value="-8.4352" />
                                                  <Key frame="50" value="6.76526" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                                                  <Key frame="16" value="-13.445" />
                                                  <Key frame="31" value="1.0523" />
                                                  <Key frame="50" value="-5.09532" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                                                  <Key frame="16" value="0.79343" />
                                                  <Key frame="31" value="-13.9772" />
                                                  <Key frame="50" value="-3.60116" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                                                  <Key frame="16" value="-6.68218" />
                                                  <Key frame="31" value="1.76024" />
                                                  <Key frame="50" value="12.2145" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                                                  <Key frame="16" value="27.3367" />
                                                  <Key frame="31" value="2.98591" />
                                                  <Key frame="50" value="-4.48007" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                                                  <Key frame="16" value="-8.61098" />
                                                  <Key frame="31" value="8.08363" />
                                                  <Key frame="50" value="6.33061" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                                                  <Key frame="16" value="-1.0523" />
                                                  <Key frame="31" value="13.445" />
                                                  <Key frame="50" value="3.16651" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                            <Resource name="Left eye leds" type="Lock" timeout="1" />
                                            <Resource name="Right eye leds" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="LittleSpreadRightArm_HeadShake_01" id="3" localization="8" tooltip="ID : #01D 0005&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- No&#x0A;- Not&#x0A;- Never&#x0A;- Negative&#x0A;- Can&apos;t&#x0A;- False&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="323" y="280">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="25" value="4.14983" />
                                                  <Key frame="36" value="-5.27293" />
                                                  <Key frame="40" value="-0.884312" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                  <Key frame="6" value="-0.704539" />
                                                  <Key frame="15" value="-0.584837" />
                                                  <Key frame="21" value="-5.64614">
                                                    <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                    <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                  </Key>
                                                  <Key frame="25" value="5.11666">
                                                    <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                    <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                  </Key>
                                                  <Key frame="29" value="-5.64614">
                                                    <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                    <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                  </Key>
                                                  <Key frame="34" value="5.11666">
                                                    <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                    <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                  </Key>
                                                  <Key frame="40" value="-0.803639" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="19" value="-1.58445" />
                                                  <Key frame="40" value="5.48707" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="19" value="-10.5446" />
                                                  <Key frame="40" value="-10.6188" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="25" value="-24.3672" />
                                                  <Key frame="40" value="-23.844" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="25" value="-69.0739" />
                                                  <Key frame="40" value="-68.6623" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="25" value="0.314203" />
                                                  <Key frame="40" value="0.306419" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="19" value="-5.18321" />
                                                  <Key frame="40" value="6.88663" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="19" value="10.7252" />
                                                  <Key frame="40" value="10.7714" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="19" value="-10.3688" />
                                                  <Key frame="40" value="-10.3054" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="19" value="10.8962" />
                                                  <Key frame="40" value="-5.03106" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="25" value="80.5715" />
                                                  <Key frame="40" value="83.8536" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="25" value="14.1482" />
                                                  <Key frame="40" value="10.814" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="25" value="-6.19439" />
                                                  <Key frame="40" value="5.59801" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="19" value="-1.14019" />
                                                  <Key frame="40" value="5.16609" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="19" value="3.78175" />
                                                  <Key frame="40" value="4.49468" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="25" value="24.5468" />
                                                  <Key frame="40" value="23.6641" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="25" value="109.944" />
                                                  <Key frame="40" value="68.4009" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="25" value="0.53724" />
                                                  <Key frame="40" value="0.3" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="19" value="-7.29742" />
                                                  <Key frame="40" value="7.92846" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="19" value="-1.66754" />
                                                  <Key frame="40" value="-1.41998" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="19" value="-10.3688" />
                                                  <Key frame="40" value="-10.3054" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="19" value="13.0104" />
                                                  <Key frame="40" value="-5.10977" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="25" value="83.3423" />
                                                  <Key frame="40" value="84.0387" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="25" value="-13.1627" />
                                                  <Key frame="40" value="-10.6192" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="25" value="44.8951" />
                                                  <Key frame="40" value="6.22854" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="RightArmUpAndDownWithBump_HeadShake_01" id="8" localization="8" tooltip="ID : #01D 0007&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Not&#x0A;- Never&#x0A;- Don&apos;t&#x0A;- Can&apos;t&#x0A;- Wrong&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="513" y="282">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="52">
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-20.048" />
                                                  <Key frame="19" value="-10.0504" />
                                                  <Key frame="29" value="4.14983" />
                                                  <Key frame="40" value="-5.27293" />
                                                  <Key frame="44" value="-0.884312" />
                                                  <Key frame="52" value="-9.41378" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                  <Key frame="10" value="-0.894838" />
                                                  <Key frame="19" value="-0.775137" />
                                                  <Key frame="25" value="-5.83644">
                                                    <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                    <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                  </Key>
                                                  <Key frame="29" value="4.92636">
                                                    <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                    <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                  </Key>
                                                  <Key frame="33" value="-5.83644">
                                                    <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                    <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                  </Key>
                                                  <Key frame="38" value="4.92636">
                                                    <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                    <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                                  </Key>
                                                  <Key frame="44" value="-0.993938" />
                                                  <Key frame="52" value="-0.710438" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="5.48707" />
                                                  <Key frame="19" value="-8.87946" />
                                                  <Key frame="34" value="5.16609" />
                                                  <Key frame="52" value="5.13688" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-10.6188" />
                                                  <Key frame="19" value="-7.81997" />
                                                  <Key frame="34" value="-4.49468" />
                                                  <Key frame="52" value="-7.04915" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-24.351" />
                                                  <Key frame="19" value="-39.4" />
                                                  <Key frame="34" value="-24.3672" />
                                                  <Key frame="52" value="-23.844" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="10" value="-69.0266" />
                                                  <Key frame="19" value="-89.6" />
                                                  <Key frame="34" value="-69.0739" />
                                                  <Key frame="52" value="-68.6623" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="10" value="0.305394" />
                                                  <Key frame="19" value="0.62" />
                                                  <Key frame="34" value="0.314203" />
                                                  <Key frame="52" value="0.306419" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="6.88663" />
                                                  <Key frame="19" value="-7.29261" />
                                                  <Key frame="34" value="7.92846" />
                                                  <Key frame="52" value="7.65836" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="10.7714" />
                                                  <Key frame="19" value="6.3306" />
                                                  <Key frame="34" value="1.41998" />
                                                  <Key frame="52" value="5.72958" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-10.3054" />
                                                  <Key frame="19" value="-10.2809" />
                                                  <Key frame="34" value="-10.3054" />
                                                  <Key frame="52" value="-10.1851" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="-5.03106" />
                                                  <Key frame="19" value="23.5526" />
                                                  <Key frame="34" value="-5.10977" />
                                                  <Key frame="52" value="-4.61924" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="10" value="80.7934" />
                                                  <Key frame="19" value="101.5" />
                                                  <Key frame="34" value="80.5715" />
                                                  <Key frame="52" value="83.8536" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="10" value="13.8316" />
                                                  <Key frame="19" value="29.7" />
                                                  <Key frame="34" value="14.1482" />
                                                  <Key frame="52" value="10.814" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="10" value="-6.36562" />
                                                  <Key frame="19" value="-6.36562" />
                                                  <Key frame="34" value="-6.19439" />
                                                  <Key frame="52" value="5.59801" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="5.16609" />
                                                  <Key frame="19" value="-6.67737" />
                                                  <Key frame="34" value="5.48707" />
                                                  <Key frame="52" value="5.22957" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="4.49468" />
                                                  <Key frame="19" value="8.00056" />
                                                  <Key frame="34" value="10.6188" />
                                                  <Key frame="52" value="7.87703" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="10" value="24.7355" />
                                                  <Key frame="15" value="24.5944" />
                                                  <Key frame="25" value="57.2" />
                                                  <Key frame="34" value="24.5468" />
                                                  <Key frame="52" value="23.6641" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="10" value="69.5837" />
                                                  <Key frame="19" value="115.8" />
                                                  <Key frame="29" value="115.742" />
                                                  <Key frame="34" value="109.944" />
                                                  <Key frame="52" value="68.4009" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="10" value="0.315043" />
                                                  <Key frame="19" value="0.81" />
                                                  <Key frame="25" value="0.84" />
                                                  <Key frame="29" value="0.65" />
                                                  <Key frame="34" value="0.53724" />
                                                  <Key frame="52" value="0.3" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="7.92846" />
                                                  <Key frame="19" value="-4.22121" />
                                                  <Key frame="34" value="6.88663" />
                                                  <Key frame="52" value="7.15673" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-1.41998" />
                                                  <Key frame="19" value="-6.58948" />
                                                  <Key frame="34" value="-10.7714" />
                                                  <Key frame="52" value="-5.72958" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-10.3054" />
                                                  <Key frame="19" value="-10.2809" />
                                                  <Key frame="34" value="-10.3054" />
                                                  <Key frame="52" value="-10.1851" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="-5.10977" />
                                                  <Key frame="19" value="18.1081" />
                                                  <Key frame="34" value="-5.03106" />
                                                  <Key frame="52" value="-5.01748" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="10" value="81.2949" />
                                                  <Key frame="19" value="65.4" />
                                                  <Key frame="29" value="81.9" />
                                                  <Key frame="34" value="83.3423" />
                                                  <Key frame="52" value="84.0387" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-13.6018" />
                                                  <Key frame="19" value="-13.6478" />
                                                  <Key frame="29" value="-13.6018" />
                                                  <Key frame="34" value="-13.1627" />
                                                  <Key frame="52" value="-10.6192" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="10" value="-5.01537" />
                                                  <Key frame="19" value="52.3" />
                                                  <Key frame="29" value="51.6" />
                                                  <Key frame="34" value="44.8951" />
                                                  <Key frame="52" value="6.22854" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="LittleBothArmsBump_DuckEnd_01" id="117" localization="8" tooltip='ID : #01C 0013&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Yes&#x0A;- Affirmative&#x0A;- &quot;.&quot;&#x0A;- Indicate&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Flex' x="618" y="101">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="35">
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="11" value="2.5" />
                                                  <Key frame="34" value="2.63435" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                  <Key frame="11" value="5.12269" />
                                                  <Key frame="34" value="5.47908" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="4.30429" />
                                                  <Key frame="16" value="2.81013" />
                                                  <Key frame="25" value="2.81013" />
                                                  <Key frame="32" value="4.30429" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-3.77694" />
                                                  <Key frame="16" value="-4.30429" />
                                                  <Key frame="25" value="-4.30429" />
                                                  <Key frame="32" value="-3.77694" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-51.9416" />
                                                  <Key frame="17" value="-49.9201" />
                                                  <Key frame="24" value="-49.9201" />
                                                  <Key frame="35" value="-49.7491" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="10" value="-55.1105" />
                                                  <Key frame="17" value="-77.1" />
                                                  <Key frame="24" value="-53.88" />
                                                  <Key frame="35" value="-46.0529" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="10" value="0.1836" />
                                                  <Key frame="17" value="0.59" />
                                                  <Key frame="24" value="0.1956" />
                                                  <Key frame="35" value="0.2224" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="13.274" />
                                                  <Key frame="16" value="18.1081" />
                                                  <Key frame="25" value="18.1081" />
                                                  <Key frame="32" value="13.274" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="3.34228" />
                                                  <Key frame="16" value="5.10013" />
                                                  <Key frame="25" value="5.10013" />
                                                  <Key frame="32" value="3.34228" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-18.8064" />
                                                  <Key frame="16" value="-18.8064" />
                                                  <Key frame="25" value="-18.8064" />
                                                  <Key frame="32" value="-18.8064" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="-3.43018" />
                                                  <Key frame="16" value="-2.81494" />
                                                  <Key frame="25" value="-2.81494" />
                                                  <Key frame="32" value="-3.43018" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="10" value="80.1549" />
                                                  <Key frame="17" value="80.1549" />
                                                  <Key frame="24" value="80.1549" />
                                                  <Key frame="35" value="76.2924" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-4.48488" />
                                                  <Key frame="17" value="1.67426" />
                                                  <Key frame="24" value="-0.793436" />
                                                  <Key frame="35" value="-2.37068" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="10" value="5.35899" />
                                                  <Key frame="17" value="0.261268" />
                                                  <Key frame="24" value="2.63435" />
                                                  <Key frame="35" value="0.705531" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="2.1997" />
                                                  <Key frame="16" value="-0.700723" />
                                                  <Key frame="25" value="-0.700723" />
                                                  <Key frame="32" value="2.1997" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="10.1978" />
                                                  <Key frame="16" value="10.1978" />
                                                  <Key frame="25" value="10.1978" />
                                                  <Key frame="32" value="10.1978" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="9" value="56.8683" />
                                                  <Key frame="15" value="55.4621" />
                                                  <Key frame="24" value="56.8683" />
                                                  <Key frame="33" value="60.9066" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="9" value="54.3147" />
                                                  <Key frame="15" value="77.1" />
                                                  <Key frame="24" value="53.6994" />
                                                  <Key frame="33" value="45.6182" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="9" value="0.1648" />
                                                  <Key frame="15" value="0.59" />
                                                  <Key frame="24" value="0.1648" />
                                                  <Key frame="33" value="0.1888" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="10.4567" />
                                                  <Key frame="16" value="16.3455" />
                                                  <Key frame="25" value="16.3455" />
                                                  <Key frame="32" value="10.4567" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-10.8962" />
                                                  <Key frame="16" value="-11.5114" />
                                                  <Key frame="25" value="-11.5114" />
                                                  <Key frame="32" value="-10.8962" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-18.8064" />
                                                  <Key frame="16" value="-18.8064" />
                                                  <Key frame="25" value="-18.8064" />
                                                  <Key frame="32" value="-18.8064" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="1.23289" />
                                                  <Key frame="16" value="1.84813" />
                                                  <Key frame="25" value="1.84813" />
                                                  <Key frame="32" value="1.23289" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="9" value="83.6753" />
                                                  <Key frame="15" value="83.6753" />
                                                  <Key frame="24" value="83.6753" />
                                                  <Key frame="33" value="85.7799" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="9" value="3.60116" />
                                                  <Key frame="15" value="-2.97715" />
                                                  <Key frame="24" value="-2.1997" />
                                                  <Key frame="33" value="-3.86484" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="9" value="-11.692" />
                                                  <Key frame="15" value="-11.692" />
                                                  <Key frame="24" value="-11.692" />
                                                  <Key frame="33" value="-13.3571" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="272" y="136">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Delay (1)" id="1" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="478" y="129">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="722" y="200">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                              <Choice value="Crouch" />
                                              <Choice value="LyingBack" />
                                              <Choice value="LyingBelly" />
                                              <Choice value="Sit" />
                                              <Choice value="SitRelax" />
                                              <Choice value="StandInit" />
                                              <Choice value="Stand" />
                                              <Choice value="StandZero" />
                                            </Parameter>
                                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                            <Resource name="All motors" type="Lock" timeout="0" />
                                            <Resource name="Stiffness" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="3" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="117" indexofinput="2" outputowner="1" indexofoutput="4" />
                                          <Link inputowner="7" indexofinput="2" outputowner="117" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="13" indexofinput="2" outputowner="15" indexofoutput="3" />
                                <Link inputowner="15" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="14" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="head circles" id="5" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="366" y="271">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="50">
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="109" y="23">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Say Text (1)" id="13" localization="8" tooltip="Say the text received on its input." x="576" y="33">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit (1)" id="15" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="280" y="42">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Wisst ihr, das Training mit euch macht mir so viel Spaß! \nUnd nun unsere letzte Übung für den Kopf - Kopfkreisen ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Wisst ihr, das Training mit euch macht mir so viel Spaß! 
Und nun unsere letzte Übung für den Kopf - Kopfkreisen ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="head circles" id="11" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="744" y="40">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="305">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="5" localization="8" tooltip="Say the text received on its input." x="373" y="2">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="107" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Twinkle" id="2" localization="8" tooltip="The selected LEDs flash on and off during the time defined in parameters." x="106" y="153">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="LEDs group" inherits_from_parent="0" content_type="3" value="AllLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="5">
                                              <Choice value="AllLeds" />
                                              <Choice value="BrainLeds" />
                                              <Choice value="EarLeds" />
                                              <Choice value="FaceLeds" />
                                              <Choice value="FeetLeds" />
                                              <Choice value="LeftEarLeds" />
                                              <Choice value="LeftFaceLeds" />
                                              <Choice value="LeftFootLeds" />
                                              <Choice value="RightEarLeds" />
                                              <Choice value="RightFaceLeds" />
                                              <Choice value="RightFootLeds" />
                                            </Parameter>
                                            <Parameter name="Time to flash on (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                            <Parameter name="Time to flash off (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="7" />
                                            <Parameter name="Animation duration (s)" inherits_from_parent="0" content_type="2" value="20" default_value="10" min="0.1" max="5000" tooltip="Duration of the animation of LEDs." id="8" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Set LEDs" id="3" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="176" y="119">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., self.getParameter("Time to flash on (s)"))
        self.onReady() # activate output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                      <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                      <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                                        <Choice value="AllLeds" />
                                                        <Choice value="BrainLeds" />
                                                        <Choice value="EarLeds" />
                                                        <Choice value="FaceLeds" />
                                                        <Choice value="FeetLeds" />
                                                        <Choice value="LeftEarLeds" />
                                                        <Choice value="LeftFaceLeds" />
                                                        <Choice value="LeftFootLeds" />
                                                        <Choice value="RightEarLeds" />
                                                        <Choice value="RightFaceLeds" />
                                                        <Choice value="RightFootLeds" />
                                                      </Parameter>
                                                      <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                                      <Parameter name="Time to flash on (s)" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                                    </Box>
                                                    <Box name="Set LEDs" id="1" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="180" y="262">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., self.getParameter("Time to flash off (s)"))
        self.onReady() # activate output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                      <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                      <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                                        <Choice value="AllLeds" />
                                                        <Choice value="BrainLeds" />
                                                        <Choice value="EarLeds" />
                                                        <Choice value="FaceLeds" />
                                                        <Choice value="FeetLeds" />
                                                        <Choice value="LeftEarLeds" />
                                                        <Choice value="LeftFaceLeds" />
                                                        <Choice value="LeftFootLeds" />
                                                        <Choice value="RightEarLeds" />
                                                        <Choice value="RightFaceLeds" />
                                                        <Choice value="RightFootLeds" />
                                                      </Parameter>
                                                      <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                                      <Parameter name="Time to flash off (s)" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                                    </Box>
                                                    <Box name="Set LEDs" id="4" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="308" y="12">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., 0.1)
        self.onReady() # activate output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                      <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                      <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                                        <Choice value="AllLeds" />
                                                        <Choice value="BrainLeds" />
                                                        <Choice value="EarLeds" />
                                                        <Choice value="FaceLeds" />
                                                        <Choice value="FeetLeds" />
                                                        <Choice value="LeftEarLeds" />
                                                        <Choice value="LeftFaceLeds" />
                                                        <Choice value="LeftFootLeds" />
                                                        <Choice value="RightEarLeds" />
                                                        <Choice value="RightFaceLeds" />
                                                        <Choice value="RightFootLeds" />
                                                      </Parameter>
                                                      <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                                    </Box>
                                                    <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="165" y="14">
                                                      <bitmap>media/images/box/wait.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Animation duration (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                      <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped." id="4" />
                                                      <Parameter name="Animation duration (s)" inherits_from_parent="1" content_type="2" value="10" default_value="10" min="0.1" max="5000" tooltip="Duration of the animation of LEDs." id="5" />
                                                    </Box>
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" />
                                                    <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="96" y="15">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei,vier,\nEins,zwei,drei,vier,\nEins,zwei,drei,vier,")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[Eins,zwei,drei,vier,
Eins,zwei,drei,vier,
Eins,zwei,drei,vier,]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="-81.1264" />
                                        <Key frame="290" value="-78.1565" />
                                        <Key frame="305" value="-33.1328" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="-3.30726" />
                                        <Key frame="290" value="-3.63508" />
                                        <Key frame="305" value="-68.1185" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="15" value="0" />
                                        <Key frame="290" value="0" />
                                        <Key frame="305" value="0.3412" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="90.4853" />
                                        <Key frame="290" value="89.1131" />
                                        <Key frame="305" value="86.2194" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="57.5658" />
                                        <Key frame="290" value="51.7687" />
                                        <Key frame="305" value="10.3688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-9.4" />
                                        <Key frame="290" value="-9.4" />
                                        <Key frame="305" value="4.74374" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="80.8494" />
                                        <Key frame="290" value="78.2825" />
                                        <Key frame="305" value="29.6219" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="3.30921" />
                                        <Key frame="290" value="3.68206" />
                                        <Key frame="305" value="74.2661" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="0" />
                                        <Key frame="290" value="0" />
                                        <Key frame="305" value="0.362" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="90.8234" />
                                        <Key frame="290" value="88.8445" />
                                        <Key frame="305" value="85.0816" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="-57.6231" />
                                        <Key frame="290" value="-51.7686" />
                                        <Key frame="305" value="-8.79157" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="9.4" />
                                        <Key frame="290" value="9.4" />
                                        <Key frame="305" value="7.90786" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="30" value="13" />
                                        <Key frame="50" value="-23" />
                                        <Key frame="75" value="-23" />
                                        <Key frame="95" value="13" />
                                        <Key frame="120" value="13" />
                                        <Key frame="140" value="-23" />
                                        <Key frame="165" value="-23" />
                                        <Key frame="185" value="13" />
                                        <Key frame="210" value="13" />
                                        <Key frame="230" value="-23" />
                                        <Key frame="255" value="-23" />
                                        <Key frame="275" value="13" />
                                        <Key frame="290" value="0" />
                                        <Key frame="305" value="-18.6354" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="30" value="-65" />
                                        <Key frame="50" value="-65" />
                                        <Key frame="75" value="65" />
                                        <Key frame="95" value="65" />
                                        <Key frame="120" value="-65" />
                                        <Key frame="140" value="-65" />
                                        <Key frame="165" value="65" />
                                        <Key frame="185" value="65" />
                                        <Key frame="210" value="-65" />
                                        <Key frame="230" value="-65" />
                                        <Key frame="255" value="65" />
                                        <Key frame="275" value="65" />
                                        <Key frame="290" value="0" />
                                        <Key frame="305" value="0" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="animation" id="2" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="272" y="192">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="LittleBothArmsBump_DuckEnd_01" id="117" localization="8" tooltip='ID : #01C 0013&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Yes&#x0A;- Affirmative&#x0A;- &quot;.&quot;&#x0A;- Indicate&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Flex' x="75" y="35">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="35">
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="11" value="2.5" />
                                                  <Key frame="34" value="2.63435" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                  <Key frame="11" value="5.12269" />
                                                  <Key frame="34" value="5.47908" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="4.30429" />
                                                  <Key frame="16" value="2.81013" />
                                                  <Key frame="25" value="2.81013" />
                                                  <Key frame="32" value="4.30429" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-3.77694" />
                                                  <Key frame="16" value="-4.30429" />
                                                  <Key frame="25" value="-4.30429" />
                                                  <Key frame="32" value="-3.77694" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-51.9416" />
                                                  <Key frame="17" value="-49.9201" />
                                                  <Key frame="24" value="-49.9201" />
                                                  <Key frame="35" value="-49.7491" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="10" value="-55.1105" />
                                                  <Key frame="17" value="-77.1" />
                                                  <Key frame="24" value="-53.88" />
                                                  <Key frame="35" value="-46.0529" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="10" value="0.1836" />
                                                  <Key frame="17" value="0.59" />
                                                  <Key frame="24" value="0.1956" />
                                                  <Key frame="35" value="0.2224" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="13.274" />
                                                  <Key frame="16" value="18.1081" />
                                                  <Key frame="25" value="18.1081" />
                                                  <Key frame="32" value="13.274" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="3.34228" />
                                                  <Key frame="16" value="5.10013" />
                                                  <Key frame="25" value="5.10013" />
                                                  <Key frame="32" value="3.34228" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-18.8064" />
                                                  <Key frame="16" value="-18.8064" />
                                                  <Key frame="25" value="-18.8064" />
                                                  <Key frame="32" value="-18.8064" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="-3.43018" />
                                                  <Key frame="16" value="-2.81494" />
                                                  <Key frame="25" value="-2.81494" />
                                                  <Key frame="32" value="-3.43018" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="10" value="80.1549" />
                                                  <Key frame="17" value="80.1549" />
                                                  <Key frame="24" value="80.1549" />
                                                  <Key frame="35" value="76.2924" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-4.48488" />
                                                  <Key frame="17" value="1.67426" />
                                                  <Key frame="24" value="-0.793436" />
                                                  <Key frame="35" value="-2.37068" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="10" value="5.35899" />
                                                  <Key frame="17" value="0.261268" />
                                                  <Key frame="24" value="2.63435" />
                                                  <Key frame="35" value="0.705531" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="2.1997" />
                                                  <Key frame="16" value="-0.700723" />
                                                  <Key frame="25" value="-0.700723" />
                                                  <Key frame="32" value="2.1997" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="10.1978" />
                                                  <Key frame="16" value="10.1978" />
                                                  <Key frame="25" value="10.1978" />
                                                  <Key frame="32" value="10.1978" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="9" value="56.8683" />
                                                  <Key frame="15" value="55.4621" />
                                                  <Key frame="24" value="56.8683" />
                                                  <Key frame="33" value="60.9066" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="9" value="54.3147" />
                                                  <Key frame="15" value="77.1" />
                                                  <Key frame="24" value="53.6994" />
                                                  <Key frame="33" value="45.6182" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="9" value="0.1648" />
                                                  <Key frame="15" value="0.59" />
                                                  <Key frame="24" value="0.1648" />
                                                  <Key frame="33" value="0.1888" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="10.4567" />
                                                  <Key frame="16" value="16.3455" />
                                                  <Key frame="25" value="16.3455" />
                                                  <Key frame="32" value="10.4567" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-10.8962" />
                                                  <Key frame="16" value="-11.5114" />
                                                  <Key frame="25" value="-11.5114" />
                                                  <Key frame="32" value="-10.8962" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-18.8064" />
                                                  <Key frame="16" value="-18.8064" />
                                                  <Key frame="25" value="-18.8064" />
                                                  <Key frame="32" value="-18.8064" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="1.23289" />
                                                  <Key frame="16" value="1.84813" />
                                                  <Key frame="25" value="1.84813" />
                                                  <Key frame="32" value="1.23289" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="9" value="83.6753" />
                                                  <Key frame="15" value="83.6753" />
                                                  <Key frame="24" value="83.6753" />
                                                  <Key frame="33" value="85.7799" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="9" value="3.60116" />
                                                  <Key frame="15" value="-2.97715" />
                                                  <Key frame="24" value="-2.1997" />
                                                  <Key frame="33" value="-3.86484" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="9" value="-11.692" />
                                                  <Key frame="15" value="-11.692" />
                                                  <Key frame="24" value="-11.692" />
                                                  <Key frame="33" value="-13.3571" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="OfferBothHands_HeadNod_LeanLeft_01" id="53" localization="8" tooltip="ID : #01C 0021&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Affirmative&#x0A;- Indicate&#x0A;- Exactly&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : LeanLeft" x="225" y="19">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="54">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram />
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="26" value="-13.1862" />
                                                  <Key frame="31" value="5.79845" />
                                                  <Key frame="36" value="-13.1862" />
                                                  <Key frame="52" value="-11.8678" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="21" value="-12.7467" />
                                                  <Key frame="31" value="-8.00056" />
                                                  <Key frame="51" value="-2.72705" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="21" value="-3.86484" />
                                                  <Key frame="31" value="-5.53478" />
                                                  <Key frame="51" value="3.78175" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="14" value="-86.0436" />
                                                  <Key frame="22" value="-46.9318" />
                                                  <Key frame="41" value="-88.5" />
                                                  <Key frame="54" value="-73.2" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="22" value="-93.1676" />
                                                  <Key frame="54" value="-46.7" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="14" value="0.14" />
                                                  <Key frame="22" value="0.8" />
                                                  <Key frame="30" value="0.4844" />
                                                  <Key frame="41" value="0.69" />
                                                  <Key frame="54" value="0.04" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="21" value="-4.56796" />
                                                  <Key frame="31" value="2.11181" />
                                                  <Key frame="51" value="13.8893" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="21" value="5.71537" />
                                                  <Key frame="31" value="6.41851" />
                                                  <Key frame="51" value="-3.86484" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="21" value="-16.2576" />
                                                  <Key frame="31" value="-15.906" />
                                                  <Key frame="51" value="-17.8396" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="21" value="29.0019" />
                                                  <Key frame="31" value="18.1912" />
                                                  <Key frame="51" value="2.72224" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="14" value="61.5218" />
                                                  <Key frame="22" value="70.5747" />
                                                  <Key frame="30" value="66.7953" />
                                                  <Key frame="41" value="52.4" />
                                                  <Key frame="54" value="64.5" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="14" value="-9.49471" />
                                                  <Key frame="22" value="-5.27591" />
                                                  <Key frame="30" value="-4.13332" />
                                                  <Key frame="41" value="7" />
                                                  <Key frame="54" value="-0.5" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="14" value="-59.593" />
                                                  <Key frame="22" value="-77.1713" />
                                                  <Key frame="41" value="-53.7" smooth="1" symmetrical="1">
                                                    <Tangent side="left" interpType="bezier" abscissaParam="-5.29369" ordinateParam="-17.0665" />
                                                    <Tangent side="right" interpType="bezier" abscissaParam="3.622" ordinateParam="11.677" />
                                                  </Key>
                                                  <Key frame="54" value="22.41" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="21" value="-6.4137" />
                                                  <Key frame="31" value="-4.2164" />
                                                  <Key frame="51" value="3.95753" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="21" value="2.81494" />
                                                  <Key frame="31" value="1.49656" />
                                                  <Key frame="51" value="6.5064" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="12" value="87.2789" />
                                                  <Key frame="20" value="47.4639" />
                                                  <Key frame="28" value="67.5033" smooth="1" symmetrical="1">
                                                    <Tangent side="left" interpType="bezier" abscissaParam="-2.4478" ordinateParam="-6.77876" />
                                                    <Tangent side="right" interpType="bezier" abscissaParam="3.97767" ordinateParam="11.0155" />
                                                  </Key>
                                                  <Key frame="41" value="88.5" />
                                                  <Key frame="52" value="73.2" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="20" value="103.007" />
                                                  <Key frame="28" value="95.5359" />
                                                  <Key frame="52" value="46.7" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="12" value="0.14" />
                                                  <Key frame="20" value="0.8" />
                                                  <Key frame="28" value="0.4812" />
                                                  <Key frame="41" value="0.69" />
                                                  <Key frame="52" value="0.04" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="21" value="-2.55127" />
                                                  <Key frame="31" value="2.107" />
                                                  <Key frame="51" value="12.7419" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="21" value="0.793436" />
                                                  <Key frame="31" value="1.49656" />
                                                  <Key frame="51" value="-6.06212" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="21" value="-16.2576" />
                                                  <Key frame="31" value="-15.906" />
                                                  <Key frame="51" value="-17.8396" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="21" value="20.1296" />
                                                  <Key frame="31" value="13.5377" />
                                                  <Key frame="51" value="-2.98591" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="12" value="63.0208" />
                                                  <Key frame="20" value="73.4799" />
                                                  <Key frame="28" value="70.14" smooth="1" symmetrical="1">
                                                    <Tangent side="left" interpType="bezier" abscissaParam="-2.66667" ordinateParam="3.52605" />
                                                    <Tangent side="right" interpType="bezier" abscissaParam="4.33333" ordinateParam="-5.72983" />
                                                  </Key>
                                                  <Key frame="41" value="52.4" />
                                                  <Key frame="52" value="64.5" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="12" value="13.7966" />
                                                  <Key frame="20" value="2.89802" />
                                                  <Key frame="28" value="5.79845" />
                                                  <Key frame="41" value="-7" />
                                                  <Key frame="52" value="0.5" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="12" value="57.303" />
                                                  <Key frame="20" value="78.9244" />
                                                  <Key frame="41" value="53.7" smooth="1" symmetrical="1">
                                                    <Tangent side="left" interpType="bezier" abscissaParam="-6.15125" ordinateParam="17.4287" />
                                                    <Tangent side="right" interpType="bezier" abscissaParam="3.22208" ordinateParam="-9.12932" />
                                                  </Key>
                                                  <Key frame="52" value="22.41" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="375" y="37">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                              <Choice value="Crouch" />
                                              <Choice value="LyingBack" />
                                              <Choice value="LyingBelly" />
                                              <Choice value="Sit" />
                                              <Choice value="SitRelax" />
                                              <Choice value="StandInit" />
                                              <Choice value="Stand" />
                                              <Choice value="StandZero" />
                                            </Parameter>
                                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                            <Resource name="All motors" type="Lock" timeout="0" />
                                            <Resource name="Stiffness" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="117" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="53" indexofinput="2" outputowner="117" indexofoutput="4" />
                                          <Link inputowner="7" indexofinput="2" outputowner="53" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="13" indexofinput="2" outputowner="15" indexofoutput="3" />
                                <Link inputowner="15" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="head side rotations" id="11" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="102" y="43">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="425">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Random Eyes" id="1" localization="8" tooltip="The color of the eyes changes randomly.&#x0A;&#x0A;Note: It is a never ending box. You have to call the onStop input to stop it." x="218" y="20">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        self.bMustStop = True

    def onInput_onStart(self):
        #self.onStopped() # activate output of the box
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        while( not self.bMustStop ):
            rRandTime = random.uniform(0.0,2.0)
            self.leds.fadeRGB("FaceLeds", 256*random.randint(0,255) + 256*256*random.randint(0,255) + random.randint(0,255), rRandTime)
            time.sleep(random.uniform(0.0,3.0))
        self.bIsRunning = False
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                </Box>
                                <Box name="Say Text" id="5" localization="8" tooltip="Say the text received on its input." x="597" y="189">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="59" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="247" y="173">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei,vier,\nEins,zwei,drei,vier,\nEins,zwei,drei,vier,")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Eins,zwei,drei,vier,
Eins,zwei,drei,vier,
Eins,zwei,drei,vier,]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="77" y="190">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                                <Link inputowner="4" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="16" value="-80.1227" />
                              <Key frame="405" value="-80.1227" />
                              <Key frame="425" value="-25.4862" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="16" value="-3.87731" />
                              <Key frame="405" value="-3.87731" />
                              <Key frame="425" value="-68.2943" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="16" value="0" />
                              <Key frame="405" value="0" />
                              <Key frame="425" value="0.2924" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="16" value="89.8558" />
                              <Key frame="405" value="89.8558" />
                              <Key frame="425" value="84.6373" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="16" value="58.6874" />
                              <Key frame="405" value="58.6874" />
                              <Key frame="425" value="11.072" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="16" value="-9.1747" />
                              <Key frame="405" value="-9.1747" />
                              <Key frame="425" value="6.06212" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="16" value="79.8442" />
                              <Key frame="405" value="79.8442" />
                              <Key frame="425" value="24.2605" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="16" value="3.87316" />
                              <Key frame="405" value="3.87316" />
                              <Key frame="425" value="69.7836" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="16" value="0" />
                              <Key frame="405" value="0" />
                              <Key frame="425" value="0.3428" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="16" value="90.2012" />
                              <Key frame="405" value="90.2012" />
                              <Key frame="425" value="85.6089" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="16" value="-58.7367" />
                              <Key frame="405" value="-58.7367" />
                              <Key frame="425" value="-11.3404" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="16" value="8.89415" />
                              <Key frame="405" value="8.89415" />
                              <Key frame="425" value="7.55628" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="45" value="1.31597" />
                              <Key frame="75" value="1.31597" />
                              <Key frame="105" value="1.31597" />
                              <Key frame="135" value="1.31597" />
                              <Key frame="165" value="1.31597" />
                              <Key frame="195" value="1.31597" />
                              <Key frame="225" value="1.31597" />
                              <Key frame="255" value="1.31597" />
                              <Key frame="285" value="1.31597" />
                              <Key frame="315" value="1.31597" />
                              <Key frame="345" value="1.31597" />
                              <Key frame="375" value="1.31597" />
                              <Key frame="425" value="0.5" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="16" value="0" />
                              <Key frame="45" value="-79.7" />
                              <Key frame="75" value="79.7" />
                              <Key frame="105" value="-79.7" />
                              <Key frame="135" value="79.7" />
                              <Key frame="165" value="-79.7" />
                              <Key frame="195" value="79.7" />
                              <Key frame="225" value="-79.7" />
                              <Key frame="255" value="79.7" />
                              <Key frame="285" value="-79.7" />
                              <Key frame="315" value="79.7" />
                              <Key frame="345" value="-79.7" />
                              <Key frame="375" value="79.7" />
                              <Key frame="405" value="0" />
                              <Key frame="425" value="0" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                      <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="4" indexofinput="2" outputowner="11" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Body, legs" id="5" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="440" y="281">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="body circles" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="230" y="20">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="330">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Hands" id="2" localization="8" tooltip="the robot stiffens the motors of one or both of his hands so that he can open or close&#x0A;it/them. Then he relaxes the motors of his hand(s)." x="310" y="10">
                                  <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = self.session().service( "ALMotion" )
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        try:
            hands = []
            if( self.getParameter("Side") in ["Left", "Both"] ):
                hands.append( "LHand" )
            if( self.getParameter("Side") in ["Right", "Both"] ):
                hands.append( "RHand" )
            motionOps = []
            for hand in hands:
                if( self.getParameter("Action") == "Open the hand" ):
                    motionOps.append( self.motion.openHand(hand, _async=True) )
                else:
                    motionOps.append( self.motion.closeHand(hand, _async=True) )
            for motionOp in motionOps:
                motionOp.wait()
        finally:
            self.bIsRunning = False
            self.onDone() # activate output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the hand to move or both of them." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Close the hand" default_value="Open the hand" custom_choice="0" tooltip="Action you want to make on the robot&apos;s hand." id="5">
                                    <Choice value="Open the hand" />
                                    <Choice value="Close the hand" />
                                  </Parameter>
                                </Box>
                                <Box name="Twinkle" id="1" localization="8" tooltip="NAO&apos;s selected LEDs flash on and off during the time defined in parameters." x="173" y="103">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="LEDs group" inherits_from_parent="0" content_type="3" value="AllLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="5">
                                    <Choice value="AllLeds" />
                                    <Choice value="BrainLeds" />
                                    <Choice value="ChestLeds" />
                                    <Choice value="EarLeds" />
                                    <Choice value="FaceLeds" />
                                    <Choice value="FeetLeds" />
                                    <Choice value="LeftEarLeds" />
                                    <Choice value="LeftFaceLeds" />
                                    <Choice value="LeftFootLeds" />
                                    <Choice value="RightEarLeds" />
                                    <Choice value="RightFaceLeds" />
                                    <Choice value="RightFootLeds" />
                                  </Parameter>
                                  <Parameter name="Time to flash on (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                  <Parameter name="Time to flash off (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="7" />
                                  <Parameter name="Animation duration (s)" inherits_from_parent="0" content_type="2" value="10" default_value="10" min="0.1" max="5000" tooltip="Duration of the animation of LEDs." id="8" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Set LEDs" id="3" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="176" y="119">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., self.getParameter("Time to flash on (s)"))
        self.onReady() # activate output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                            <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                            <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                              <Choice value="AllLeds" />
                                              <Choice value="BrainLeds" />
                                              <Choice value="ChestLeds" />
                                              <Choice value="EarLeds" />
                                              <Choice value="FaceLeds" />
                                              <Choice value="FeetLeds" />
                                              <Choice value="LeftEarLeds" />
                                              <Choice value="LeftFaceLeds" />
                                              <Choice value="LeftFootLeds" />
                                              <Choice value="RightEarLeds" />
                                              <Choice value="RightFaceLeds" />
                                              <Choice value="RightFootLeds" />
                                            </Parameter>
                                            <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                            <Parameter name="Time to flash on (s)" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                          </Box>
                                          <Box name="Set LEDs" id="1" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="186" y="318">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., self.getParameter("Time to flash off (s)"))
        self.onReady() # activate output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                            <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                            <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                              <Choice value="AllLeds" />
                                              <Choice value="BrainLeds" />
                                              <Choice value="ChestLeds" />
                                              <Choice value="EarLeds" />
                                              <Choice value="FaceLeds" />
                                              <Choice value="FeetLeds" />
                                              <Choice value="LeftEarLeds" />
                                              <Choice value="LeftFaceLeds" />
                                              <Choice value="LeftFootLeds" />
                                              <Choice value="RightEarLeds" />
                                              <Choice value="RightFaceLeds" />
                                              <Choice value="RightFootLeds" />
                                            </Parameter>
                                            <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                            <Parameter name="Time to flash off (s)" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                          </Box>
                                          <Box name="Wait" id="2" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="172" y="16">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Animation duration (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                            <Parameter name="Animation duration (s)" inherits_from_parent="1" content_type="2" value="10" default_value="10" min="0.1" max="5000" tooltip="Duration of the animation of LEDs." id="5" />
                                          </Box>
                                          <Box name="Set LEDs" id="4" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="308" y="12">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., 0.1)
        self.onReady() # activate output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                            <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                            <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                              <Choice value="AllLeds" />
                                              <Choice value="BrainLeds" />
                                              <Choice value="ChestLeds" />
                                              <Choice value="EarLeds" />
                                              <Choice value="FaceLeds" />
                                              <Choice value="FeetLeds" />
                                              <Choice value="LeftEarLeds" />
                                              <Choice value="LeftFaceLeds" />
                                              <Choice value="LeftFootLeds" />
                                              <Choice value="RightEarLeds" />
                                              <Choice value="RightFaceLeds" />
                                              <Choice value="RightFootLeds" />
                                            </Parameter>
                                            <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                                          <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="657" y="181">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="70" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="309" y="217">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei ,vier, \nEins,zwei,drei ,vier, \nEins,zwei,drei ,vier,  ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Eins,zwei,drei ,vier, 
Eins,zwei,drei ,vier, 
Eins,zwei,drei ,vier,  ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="135" y="224">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                <Link inputowner="4" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="15" value="1.4" />
                              <Key frame="20" value="0" />
                              <Key frame="40" value="0" />
                              <Key frame="60" value="0" />
                              <Key frame="80" value="0" />
                              <Key frame="100" value="0" />
                              <Key frame="120" value="0" />
                              <Key frame="140" value="0" />
                              <Key frame="160" value="0" />
                              <Key frame="180" value="0" />
                              <Key frame="200" value="0" />
                              <Key frame="220" value="0" />
                              <Key frame="240" value="0" />
                              <Key frame="260" value="0" />
                              <Key frame="280" value="0" />
                              <Key frame="300" value="0" />
                              <Key frame="316" value="0" />
                              <Key frame="330" value="-10" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="15" value="1.9" />
                              <Key frame="20" value="0" />
                              <Key frame="40" value="0" />
                              <Key frame="60" value="0" />
                              <Key frame="80" value="0" />
                              <Key frame="100" value="0" />
                              <Key frame="120" value="0" />
                              <Key frame="140" value="0" />
                              <Key frame="160" value="0" />
                              <Key frame="180" value="0" />
                              <Key frame="200" value="0" />
                              <Key frame="220" value="0" />
                              <Key frame="240" value="0" />
                              <Key frame="260" value="0" />
                              <Key frame="280" value="0" />
                              <Key frame="300" value="0" />
                              <Key frame="330" value="-0.00240423" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="20" value="5.53478" />
                              <Key frame="40" value="5.53478" />
                              <Key frame="60" value="-10.901" />
                              <Key frame="80" value="-28.0399" />
                              <Key frame="100" value="-10.901" />
                              <Key frame="120" value="-28.0399" />
                              <Key frame="140" value="-10.901" />
                              <Key frame="160" value="-28.0399" />
                              <Key frame="180" value="-10.901" />
                              <Key frame="200" value="-28.0399" />
                              <Key frame="220" value="-10.901" />
                              <Key frame="240" value="-28.0399" />
                              <Key frame="260" value="-10.901" />
                              <Key frame="280" value="-28.0399" />
                              <Key frame="300" value="-28.0399" />
                              <Key frame="330" value="5.62267" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="20" value="-6.67737" />
                              <Key frame="40" value="-14.4118" />
                              <Key frame="60" value="3.34228" />
                              <Key frame="80" value="-12.1267" />
                              <Key frame="100" value="3.34228" />
                              <Key frame="120" value="-12.1267" />
                              <Key frame="140" value="3.34228" />
                              <Key frame="160" value="-12.1267" />
                              <Key frame="180" value="3.34228" />
                              <Key frame="200" value="-12.1267" />
                              <Key frame="220" value="3.34228" />
                              <Key frame="240" value="-12.1267" />
                              <Key frame="260" value="3.34228" />
                              <Key frame="280" value="-12.1267" />
                              <Key frame="300" value="-12.1267" />
                              <Key frame="330" value="-6.58948" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="15" value="-58.2698" />
                              <Key frame="20" value="-80.1549" />
                              <Key frame="40" value="-81.4732" />
                              <Key frame="60" value="-81.4732" />
                              <Key frame="80" value="-87.6256" />
                              <Key frame="100" value="-81.4732" />
                              <Key frame="120" value="-87.6256" />
                              <Key frame="140" value="-81.4732" />
                              <Key frame="160" value="-87.6256" />
                              <Key frame="180" value="-81.4732" />
                              <Key frame="200" value="-87.6256" />
                              <Key frame="220" value="-81.4732" />
                              <Key frame="240" value="-87.6256" />
                              <Key frame="260" value="-81.4732" />
                              <Key frame="280" value="-87.6256" />
                              <Key frame="300" value="-87.6256" />
                              <Key frame="316" value="-23.7284" />
                              <Key frame="330" value="-23.9041" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="15" value="4.30429" />
                              <Key frame="20" value="-0.00240423" />
                              <Key frame="40" value="-0.969218" />
                              <Key frame="60" value="-0.969218" />
                              <Key frame="80" value="-13.6256" />
                              <Key frame="100" value="-0.969218" />
                              <Key frame="120" value="-13.6256" />
                              <Key frame="140" value="-0.969218" />
                              <Key frame="160" value="-13.6256" />
                              <Key frame="180" value="-0.969218" />
                              <Key frame="200" value="-13.6256" />
                              <Key frame="220" value="-0.969218" />
                              <Key frame="240" value="-13.6256" />
                              <Key frame="260" value="-0.969218" />
                              <Key frame="280" value="-13.6256" />
                              <Key frame="300" value="-13.6256" />
                              <Key frame="316" value="-73.4799" />
                              <Key frame="330" value="-67.9427" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="15" value="0.8468" />
                              <Key frame="20" value="0.8468" />
                              <Key frame="40" value="0.8484" />
                              <Key frame="60" value="0.8484" />
                              <Key frame="80" value="0.8472" />
                              <Key frame="100" value="0.8484" />
                              <Key frame="120" value="0.8472" />
                              <Key frame="140" value="0.8484" />
                              <Key frame="160" value="0.8472" />
                              <Key frame="180" value="0.8484" />
                              <Key frame="200" value="0.8472" />
                              <Key frame="220" value="0.8484" />
                              <Key frame="240" value="0.8472" />
                              <Key frame="260" value="0.8484" />
                              <Key frame="280" value="0.8472" />
                              <Key frame="300" value="0.8472" />
                              <Key frame="316" value="0.3056" />
                              <Key frame="330" value="0.3056" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="20" value="7.82477" />
                              <Key frame="40" value="9.31893" />
                              <Key frame="60" value="2.46338" />
                              <Key frame="80" value="-30.6718" />
                              <Key frame="100" value="2.46338" />
                              <Key frame="120" value="-30.6718" />
                              <Key frame="140" value="2.46338" />
                              <Key frame="160" value="-30.6718" />
                              <Key frame="180" value="2.46338" />
                              <Key frame="200" value="-30.6718" />
                              <Key frame="220" value="2.46338" />
                              <Key frame="240" value="-30.6718" />
                              <Key frame="260" value="2.46338" />
                              <Key frame="280" value="-30.6718" />
                              <Key frame="300" value="-30.6718" />
                              <Key frame="330" value="8.08845" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="20" value="6.59429" />
                              <Key frame="40" value="17.9323" />
                              <Key frame="60" value="-14.9392" />
                              <Key frame="80" value="24.7" />
                              <Key frame="100" value="-14.9392" />
                              <Key frame="120" value="24.7" />
                              <Key frame="140" value="-14.9392" />
                              <Key frame="160" value="24.7" />
                              <Key frame="180" value="-14.9392" />
                              <Key frame="200" value="24.7" />
                              <Key frame="220" value="-14.9392" />
                              <Key frame="240" value="24.7" />
                              <Key frame="260" value="-14.9392" />
                              <Key frame="280" value="24.7" />
                              <Key frame="300" value="24.7" />
                              <Key frame="330" value="6.5064" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="20" value="-9.92936" />
                              <Key frame="40" value="-9.84147" />
                              <Key frame="60" value="-13.7966" />
                              <Key frame="80" value="-33.0449" />
                              <Key frame="100" value="-13.7966" />
                              <Key frame="120" value="-33.0449" />
                              <Key frame="140" value="-13.7966" />
                              <Key frame="160" value="-33.0449" />
                              <Key frame="180" value="-13.7966" />
                              <Key frame="200" value="-33.0449" />
                              <Key frame="220" value="-13.7966" />
                              <Key frame="240" value="-33.0449" />
                              <Key frame="260" value="-13.7966" />
                              <Key frame="280" value="-33.0449" />
                              <Key frame="300" value="-33.0449" />
                              <Key frame="330" value="-9.92936" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="20" value="-5.18802" />
                              <Key frame="40" value="-5.27591" />
                              <Key frame="60" value="24.2557" />
                              <Key frame="80" value="76.5513" />
                              <Key frame="100" value="24.2557" />
                              <Key frame="120" value="76.5513" />
                              <Key frame="140" value="24.2557" />
                              <Key frame="160" value="76.5513" />
                              <Key frame="180" value="24.2557" />
                              <Key frame="200" value="76.5513" />
                              <Key frame="220" value="24.2557" />
                              <Key frame="240" value="76.5513" />
                              <Key frame="260" value="24.2557" />
                              <Key frame="280" value="76.5513" />
                              <Key frame="300" value="76.5513" />
                              <Key frame="330" value="-5.27591" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="15" value="52.7326" />
                              <Key frame="20" value="81.9127" />
                              <Key frame="40" value="81.2974" />
                              <Key frame="60" value="81.3853" />
                              <Key frame="80" value="65.4769" />
                              <Key frame="100" value="81.3853" />
                              <Key frame="120" value="65.4769" />
                              <Key frame="140" value="81.3853" />
                              <Key frame="160" value="65.4769" />
                              <Key frame="180" value="81.3853" />
                              <Key frame="200" value="65.4769" />
                              <Key frame="220" value="81.3853" />
                              <Key frame="240" value="65.4769" />
                              <Key frame="260" value="81.3853" />
                              <Key frame="280" value="65.4769" />
                              <Key frame="300" value="65.4769" />
                              <Key frame="316" value="82.0885" />
                              <Key frame="330" value="86.2194" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="15" value="21.5311" />
                              <Key frame="20" value="42.4493" />
                              <Key frame="40" value="44.7345" />
                              <Key frame="60" value="44.2071" />
                              <Key frame="80" value="38.9336" />
                              <Key frame="100" value="44.2071" />
                              <Key frame="120" value="38.9336" />
                              <Key frame="140" value="44.2071" />
                              <Key frame="160" value="38.9336" />
                              <Key frame="180" value="44.2071" />
                              <Key frame="200" value="38.9336" />
                              <Key frame="220" value="44.2071" />
                              <Key frame="240" value="38.9336" />
                              <Key frame="260" value="44.2071" />
                              <Key frame="280" value="38.9336" />
                              <Key frame="300" value="38.9336" />
                              <Key frame="316" value="19.3338" />
                              <Key frame="330" value="7.46839" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="15" value="-41.9268" />
                              <Key frame="20" value="-51.6827" />
                              <Key frame="40" value="-52.7374" />
                              <Key frame="60" value="-52.7374" />
                              <Key frame="80" value="-22.1511" />
                              <Key frame="100" value="-52.7374" />
                              <Key frame="120" value="-22.1511" />
                              <Key frame="140" value="-52.7374" />
                              <Key frame="160" value="-22.1511" />
                              <Key frame="180" value="-52.7374" />
                              <Key frame="200" value="-22.1511" />
                              <Key frame="220" value="-52.7374" />
                              <Key frame="240" value="-22.1511" />
                              <Key frame="260" value="-52.7374" />
                              <Key frame="280" value="-22.1511" />
                              <Key frame="300" value="-22.1511" />
                              <Key frame="316" value="5.2711" />
                              <Key frame="330" value="5.09532" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="20" value="5.89115" />
                              <Key frame="40" value="-5.44688" />
                              <Key frame="60" value="-21.0037" />
                              <Key frame="80" value="-37.4395" />
                              <Key frame="100" value="-21.0037" />
                              <Key frame="120" value="-37.4395" />
                              <Key frame="140" value="-21.0037" />
                              <Key frame="160" value="-37.4395" />
                              <Key frame="180" value="-21.0037" />
                              <Key frame="200" value="-37.4395" />
                              <Key frame="220" value="-21.0037" />
                              <Key frame="240" value="-37.4395" />
                              <Key frame="260" value="-21.0037" />
                              <Key frame="280" value="-37.4395" />
                              <Key frame="300" value="-37.4395" />
                              <Key frame="330" value="6.06693" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="20" value="4.22121" />
                              <Key frame="40" value="0.441859" />
                              <Key frame="60" value="22.4148" />
                              <Key frame="80" value="1.23289" />
                              <Key frame="100" value="22.4148" />
                              <Key frame="120" value="1.23289" />
                              <Key frame="140" value="22.4148" />
                              <Key frame="160" value="1.23289" />
                              <Key frame="180" value="22.4148" />
                              <Key frame="200" value="1.23289" />
                              <Key frame="220" value="22.4148" />
                              <Key frame="240" value="1.23289" />
                              <Key frame="260" value="22.4148" />
                              <Key frame="280" value="1.23289" />
                              <Key frame="300" value="1.23289" />
                              <Key frame="330" value="4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="15" value="73.4799" />
                              <Key frame="20" value="73.5678" />
                              <Key frame="40" value="74.2709" />
                              <Key frame="60" value="74.183" />
                              <Key frame="80" value="72.7768" />
                              <Key frame="100" value="74.183" />
                              <Key frame="120" value="72.7768" />
                              <Key frame="140" value="74.183" />
                              <Key frame="160" value="72.7768" />
                              <Key frame="180" value="74.183" />
                              <Key frame="200" value="72.7768" />
                              <Key frame="220" value="74.183" />
                              <Key frame="240" value="72.7768" />
                              <Key frame="260" value="74.183" />
                              <Key frame="280" value="72.7768" />
                              <Key frame="300" value="72.7768" />
                              <Key frame="316" value="23.909" />
                              <Key frame="330" value="23.9968" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="15" value="-14.4166" />
                              <Key frame="20" value="-13.7135" />
                              <Key frame="40" value="-12.483" />
                              <Key frame="60" value="-12.7467" />
                              <Key frame="80" value="-11.0768" />
                              <Key frame="100" value="-12.7467" />
                              <Key frame="120" value="-11.0768" />
                              <Key frame="140" value="-12.7467" />
                              <Key frame="160" value="-11.0768" />
                              <Key frame="180" value="-12.7467" />
                              <Key frame="200" value="-11.0768" />
                              <Key frame="220" value="-12.7467" />
                              <Key frame="240" value="-11.0768" />
                              <Key frame="260" value="-12.7467" />
                              <Key frame="280" value="-11.0768" />
                              <Key frame="300" value="-11.0768" />
                              <Key frame="316" value="67.4984" />
                              <Key frame="330" value="66.6195" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="15" value="0.9284" />
                              <Key frame="20" value="0.9284" />
                              <Key frame="40" value="0.9304" />
                              <Key frame="60" value="0.9304" />
                              <Key frame="80" value="0.9284" />
                              <Key frame="100" value="0.9304" />
                              <Key frame="120" value="0.9284" />
                              <Key frame="140" value="0.9304" />
                              <Key frame="160" value="0.9284" />
                              <Key frame="180" value="0.9304" />
                              <Key frame="200" value="0.9284" />
                              <Key frame="220" value="0.9304" />
                              <Key frame="240" value="0.9284" />
                              <Key frame="260" value="0.9304" />
                              <Key frame="280" value="0.9284" />
                              <Key frame="300" value="0.9284" />
                              <Key frame="316" value="0.3096" />
                              <Key frame="330" value="0.3064" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="20" value="7.55628" />
                              <Key frame="40" value="7.64417" />
                              <Key frame="60" value="7.55628" />
                              <Key frame="80" value="-4.39699" />
                              <Key frame="100" value="7.55628" />
                              <Key frame="120" value="-4.39699" />
                              <Key frame="140" value="7.55628" />
                              <Key frame="160" value="-4.39699" />
                              <Key frame="180" value="7.55628" />
                              <Key frame="200" value="-4.39699" />
                              <Key frame="220" value="7.55628" />
                              <Key frame="240" value="-4.39699" />
                              <Key frame="260" value="7.55628" />
                              <Key frame="280" value="-4.39699" />
                              <Key frame="300" value="-4.39699" />
                              <Key frame="330" value="7.46839" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="20" value="-3.68905" />
                              <Key frame="40" value="2.63916" />
                              <Key frame="60" value="-38.4942" />
                              <Key frame="80" value="4.39699" />
                              <Key frame="100" value="-38.4942" />
                              <Key frame="120" value="4.39699" />
                              <Key frame="140" value="-38.4942" />
                              <Key frame="160" value="4.39699" />
                              <Key frame="180" value="-38.4942" />
                              <Key frame="200" value="4.39699" />
                              <Key frame="220" value="-38.4942" />
                              <Key frame="240" value="4.39699" />
                              <Key frame="260" value="-38.4942" />
                              <Key frame="280" value="4.39699" />
                              <Key frame="300" value="4.39699" />
                              <Key frame="330" value="-3.77694" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="20" value="-9.92936" />
                              <Key frame="40" value="-9.84147" />
                              <Key frame="60" value="-13.7966" />
                              <Key frame="80" value="-33.0449" />
                              <Key frame="100" value="-13.7966" />
                              <Key frame="120" value="-33.0449" />
                              <Key frame="140" value="-13.7966" />
                              <Key frame="160" value="-33.0449" />
                              <Key frame="180" value="-13.7966" />
                              <Key frame="200" value="-33.0449" />
                              <Key frame="220" value="-13.7966" />
                              <Key frame="240" value="-33.0449" />
                              <Key frame="260" value="-13.7966" />
                              <Key frame="280" value="-33.0449" />
                              <Key frame="300" value="-33.0449" />
                              <Key frame="330" value="-9.92936" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="20" value="-5.2711" />
                              <Key frame="40" value="7.56109" />
                              <Key frame="60" value="26.1063" />
                              <Key frame="80" value="66.8001" />
                              <Key frame="100" value="26.1063" />
                              <Key frame="120" value="66.8001" />
                              <Key frame="140" value="26.1063" />
                              <Key frame="160" value="66.8001" />
                              <Key frame="180" value="26.1063" />
                              <Key frame="200" value="66.8001" />
                              <Key frame="220" value="26.1063" />
                              <Key frame="240" value="66.8001" />
                              <Key frame="260" value="26.1063" />
                              <Key frame="280" value="66.8001" />
                              <Key frame="300" value="66.8001" />
                              <Key frame="330" value="-5.29" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="15" value="62.2297" />
                              <Key frame="20" value="67.2396" />
                              <Key frame="40" value="67.679" />
                              <Key frame="60" value="67.679" />
                              <Key frame="80" value="66.4486" />
                              <Key frame="100" value="67.679" />
                              <Key frame="120" value="66.4486" />
                              <Key frame="140" value="67.679" />
                              <Key frame="160" value="66.4486" />
                              <Key frame="180" value="67.679" />
                              <Key frame="200" value="66.4486" />
                              <Key frame="220" value="67.679" />
                              <Key frame="240" value="66.4486" />
                              <Key frame="260" value="67.679" />
                              <Key frame="280" value="66.4486" />
                              <Key frame="300" value="66.4486" />
                              <Key frame="316" value="79.0171" />
                              <Key frame="330" value="85.2574" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="15" value="-34.9833" />
                              <Key frame="20" value="-34.9833" />
                              <Key frame="40" value="-36.5654" />
                              <Key frame="60" value="-36.6533" />
                              <Key frame="80" value="-36.1259" />
                              <Key frame="100" value="-36.6533" />
                              <Key frame="120" value="-36.1259" />
                              <Key frame="140" value="-36.6533" />
                              <Key frame="160" value="-36.1259" />
                              <Key frame="180" value="-36.6533" />
                              <Key frame="200" value="-36.1259" />
                              <Key frame="220" value="-36.6533" />
                              <Key frame="240" value="-36.1259" />
                              <Key frame="260" value="-36.6533" />
                              <Key frame="280" value="-36.1259" />
                              <Key frame="300" value="-36.1259" />
                              <Key frame="316" value="-18.2839" />
                              <Key frame="330" value="-5.89115" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="15" value="48.6017" />
                              <Key frame="20" value="48.5138" />
                              <Key frame="40" value="47.2834" />
                              <Key frame="60" value="47.2834" />
                              <Key frame="80" value="46.5802" />
                              <Key frame="100" value="47.2834" />
                              <Key frame="120" value="46.5802" />
                              <Key frame="140" value="47.2834" />
                              <Key frame="160" value="46.5802" />
                              <Key frame="180" value="47.2834" />
                              <Key frame="200" value="46.5802" />
                              <Key frame="220" value="47.2834" />
                              <Key frame="240" value="46.5802" />
                              <Key frame="260" value="47.2834" />
                              <Key frame="280" value="46.5802" />
                              <Key frame="300" value="46.5802" />
                              <Key frame="316" value="2.28279" />
                              <Key frame="330" value="7.55628" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="intro" id="5" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="85" y="23">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="472" y="253">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="91" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="150" y="223">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Kommen wir nun zum Training unseres Körpers und unserer Beine! \nUnsere erste Übung sind Körperkreise! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Kommen wir nun zum Training unseres Körpers und unserer Beine! 
Unsere erste Übung sind Körperkreise! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="63" y="86">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="GoToStance_Exclamation_LeanRight" id="26" localization="8" tooltip="ID : #01F 9993&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Transition&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : LeanRight" x="356" y="42">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="26">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="11" value="0" />
                                        <Key frame="24" value="-8.61579" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="24" value="-2.90283" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="11" value="-5.2" />
                                        <Key frame="24" value="-0.524941" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="24" value="-12.9225" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="12" value="-54.5" />
                                        <Key frame="23" value="-84.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="12" value="-103.9" />
                                        <Key frame="23" value="-92.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="12" value="0.83" />
                                        <Key frame="23" value="0.01" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="11" value="-12.4782" />
                                        <Key frame="24" value="5.09532" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="24" value="13.7966" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="11" value="-11.072" />
                                        <Key frame="24" value="-10.4567" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="11" value="23.992" />
                                        <Key frame="24" value="2.63916" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="12" value="62.8" />
                                        <Key frame="23" value="97.1" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="12" value="15.3" />
                                        <Key frame="23" value="-2.2" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="12" value="-71.3" />
                                        <Key frame="23" value="-79.1" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="11" value="-5.2" />
                                        <Key frame="24" value="-3.78175" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="24" value="-2.1997" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="10" value="54.5" />
                                        <Key frame="26" value="84.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="10" value="103.9" />
                                        <Key frame="26" value="92.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="10" value="0.83" />
                                        <Key frame="26" value="0.01" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="11" value="-15.3835" />
                                        <Key frame="24" value="6.77007" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="24" value="5.00743" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="11" value="-11.072" />
                                        <Key frame="24" value="-10.4567" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="11" value="24.8758" />
                                        <Key frame="24" value="4.56796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="10" value="64.5" />
                                        <Key frame="26" value="97.1" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="10" value="-15.3" />
                                        <Key frame="26" value="2.2" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="10" value="71.3" />
                                        <Key frame="26" value="79.1" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="SlowlyOfferBothHands_01" id="61" localization="8" tooltip="ID : #01E 0011&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Supplicate&#x0A;- Please&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : LeanFront&#x0A;End stance : Center" x="230" y="43">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="43">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="14" value="12.9225" />
                                        <Key frame="28" value="6.24271" />
                                        <Key frame="43" value="5.18321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="14" value="-8.70368" />
                                        <Key frame="28" value="-12.483" />
                                        <Key frame="43" value="-5.2711" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="14" value="-23.909" />
                                        <Key frame="22" value="-45.6" />
                                        <Key frame="28" value="-66.3" />
                                        <Key frame="43" value="-20.657" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="22" value="-119.5" />
                                        <Key frame="43" value="-77.1" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="22" value="0.6724" />
                                        <Key frame="43" value="0.3136" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="14" value="-9.75839" />
                                        <Key frame="28" value="7.29261" />
                                        <Key frame="43" value="7.56109" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="14" value="7.3805" />
                                        <Key frame="28" value="14.0603" />
                                        <Key frame="43" value="2.81494" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="14" value="-13.0056" />
                                        <Key frame="28" value="-10.1051" />
                                        <Key frame="43" value="-10.193" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="14" value="-5.09532" />
                                        <Key frame="28" value="-5.09532" />
                                        <Key frame="43" value="-5.01224" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="22" value="57.7473" />
                                        <Key frame="43" value="80.7749" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="22" value="7.29742" />
                                        <Key frame="28" value="9.5" />
                                        <Key frame="43" value="4.39699" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="22" value="-77.6939" />
                                        <Key frame="43" value="-57.6" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="14" value="11.2477" />
                                        <Key frame="28" value="4.91954" />
                                        <Key frame="43" value="5.27591" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="14" value="4.39218" />
                                        <Key frame="28" value="1.57965" />
                                        <Key frame="43" value="9.49471" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="14" value="24.4315" />
                                        <Key frame="22" value="31.6" />
                                        <Key frame="28" value="55.2" />
                                        <Key frame="43" value="26.453" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="22" value="110.043" />
                                        <Key frame="43" value="77.1" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="22" value="0.6692" />
                                        <Key frame="43" value="0.504" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="14" value="-8.52309" />
                                        <Key frame="28" value="7.64898" />
                                        <Key frame="43" value="7.29261" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="14" value="-0.178186" />
                                        <Key frame="28" value="2.45857" />
                                        <Key frame="43" value="-9.40201" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="14" value="-13.0056" />
                                        <Key frame="28" value="-10.1051" />
                                        <Key frame="43" value="-10.193" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="14" value="-4.74855" />
                                        <Key frame="28" value="-4.74855" />
                                        <Key frame="43" value="-5.00743" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="22" value="50.1838" />
                                        <Key frame="43" value="75.4087" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="22" value="-0.788627" />
                                        <Key frame="43" value="-3.68905" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="22" value="88.861" />
                                        <Key frame="43" value="57.6" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="476" y="33">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                <Link inputowner="61" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="26" indexofinput="2" outputowner="61" indexofoutput="4" />
                                <Link inputowner="7" indexofinput="2" outputowner="26" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="squats" id="1" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="381" y="25">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="490" y="24">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="91" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="229" y="28">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(" Das fühlte sich gut an! Jetzt können wir zusammen Kniebeugen machen! Seid ihr bereit! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[ Das fühlte sich gut an! Jetzt können wir zusammen Kniebeugen machen! Seid ihr bereit! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="99" y="24">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="WideBothArmsCircle_LeanLeft_01" id="114" localization="8" tooltip="ID : #01F 0029&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Wow&#x0A;- Awesome&#x0A;- Great!&#x0A;- Yoohoo&#x0A;- Impressive&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : LeanLeft&#x0A;End stance : LeanLeft" x="180" y="256">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="57">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="15" value="13.8845" />
                                        <Key frame="22" value="20.5" />
                                        <Key frame="32" value="-14" />
                                        <Key frame="38" value="1.8" />
                                        <Key frame="55" value="0.0854867" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="15" value="3.95273" />
                                        <Key frame="22" value="4.83163" />
                                        <Key frame="32" value="7.11683" />
                                        <Key frame="38" value="5.88634" />
                                        <Key frame="55" value="5.18321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="13" value="-13.0983" />
                                        <Key frame="21" value="-14.944" />
                                        <Key frame="31" value="-6.94585" />
                                        <Key frame="39" value="-4.04543" />
                                        <Key frame="54" value="2.28279" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="13" value="-0.876518" />
                                        <Key frame="21" value="-1.14019" />
                                        <Key frame="31" value="0.353968" />
                                        <Key frame="39" value="-0.261268" />
                                        <Key frame="54" value="0.61764" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="14" value="-79.1002" />
                                        <Key frame="23" value="-88.5" />
                                        <Key frame="30" value="-80.3306" />
                                        <Key frame="40" value="-53.3" />
                                        <Key frame="57" value="-46.4923" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="14" value="-73.5678" />
                                        <Key frame="23" value="-63.636" />
                                        <Key frame="30" value="-112.592" />
                                        <Key frame="40" value="-99.4" />
                                        <Key frame="57" value="-101.342" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="14" value="0.2484" />
                                        <Key frame="23" value="0.2496" />
                                        <Key frame="30" value="0.86" />
                                        <Key frame="40" value="0.76" />
                                        <Key frame="57" value="0.7656" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="13" value="7.38531" />
                                        <Key frame="21" value="3.95753" />
                                        <Key frame="31" value="23.6453" />
                                        <Key frame="39" value="26.8094" />
                                        <Key frame="54" value="18.0202" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="13" value="-2.1949" />
                                        <Key frame="21" value="-2.54646" />
                                        <Key frame="31" value="-0.173378" />
                                        <Key frame="39" value="0.441859" />
                                        <Key frame="54" value="-2.0191" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="13" value="-18.8943" />
                                        <Key frame="21" value="-18.7185" />
                                        <Key frame="31" value="-17.5759" />
                                        <Key frame="39" value="-17.4002" />
                                        <Key frame="54" value="-20.4764" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="13" value="23.7284" />
                                        <Key frame="21" value="28.914" />
                                        <Key frame="31" value="0.788627" />
                                        <Key frame="39" value="-5.10013" />
                                        <Key frame="54" value="-5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="14" value="58.8851" />
                                        <Key frame="23" value="46.2286" />
                                        <Key frame="30" value="26.7" />
                                        <Key frame="40" value="14.6" />
                                        <Key frame="57" value="43.4161" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="14" value="7.20472" />
                                        <Key frame="23" value="8.96255" />
                                        <Key frame="30" value="-2.46338" />
                                        <Key frame="40" value="4.5" />
                                        <Key frame="57" value="3.68905" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="14" value="-38.9384" />
                                        <Key frame="23" value="-30.1493" />
                                        <Key frame="30" value="-48.7823" />
                                        <Key frame="40" value="-46.1456" />
                                        <Key frame="57" value="-61.8782" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="13" value="-14.3239" />
                                        <Key frame="21" value="-16.8728" />
                                        <Key frame="31" value="-5.71056" />
                                        <Key frame="39" value="-4.2164" />
                                        <Key frame="54" value="3.60597" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="13" value="8.61579" />
                                        <Key frame="21" value="8.26423" />
                                        <Key frame="31" value="9.93417" />
                                        <Key frame="39" value="11.4283" />
                                        <Key frame="54" value="11.4283" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="14" value="77.8745" />
                                        <Key frame="20" value="88.1578" />
                                        <Key frame="33" value="81.7417" />
                                        <Key frame="41" value="53.3" />
                                        <Key frame="56" value="44.8272" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="14" value="67.1469" />
                                        <Key frame="20" value="61.1702" />
                                        <Key frame="33" value="103.182" />
                                        <Key frame="41" value="99.4" />
                                        <Key frame="56" value="101.249" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="14" value="0.056" />
                                        <Key frame="20" value="0.05" />
                                        <Key frame="33" value="0.86" />
                                        <Key frame="41" value="0.76" />
                                        <Key frame="56" value="0.774" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="13" value="-2.63916" />
                                        <Key frame="21" value="-7.64898" />
                                        <Key frame="31" value="17.488" />
                                        <Key frame="39" value="23.1131" />
                                        <Key frame="54" value="10.3688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="13" value="-13.8845" />
                                        <Key frame="21" value="-13.1813" />
                                        <Key frame="31" value="-13.8845" />
                                        <Key frame="39" value="-16.4334" />
                                        <Key frame="54" value="-13.9724" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="13" value="-18.8943" />
                                        <Key frame="21" value="-18.7185" />
                                        <Key frame="31" value="-17.5759" />
                                        <Key frame="39" value="-17.4002" />
                                        <Key frame="54" value="-20.4764" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="13" value="33.2255" />
                                        <Key frame="21" value="39.9931" />
                                        <Key frame="31" value="5.62747" />
                                        <Key frame="39" value="-0.788627" />
                                        <Key frame="54" value="-0.700723" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="14" value="68.9095" />
                                        <Key frame="20" value="47.376" />
                                        <Key frame="33" value="26.7" />
                                        <Key frame="41" value="14.6" />
                                        <Key frame="56" value="41.0478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="14" value="-1.49656" />
                                        <Key frame="20" value="-0.353968" />
                                        <Key frame="33" value="6.2379" />
                                        <Key frame="41" value="-4.5" />
                                        <Key frame="56" value="-1.145" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="14" value="24.7831" />
                                        <Key frame="20" value="23.2889" />
                                        <Key frame="33" value="29.8808" />
                                        <Key frame="41" value="34.0996" />
                                        <Key frame="56" value="56.5999" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="squats" id="3" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="491" y="187">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="squats" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="124" y="29">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="300">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram />
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                              <ActuatorList model="nao">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="1" value="-9.42773" />
                                                  <Key frame="25" value="-9.42773" />
                                                  <Key frame="50" value="-9.42773" />
                                                  <Key frame="75" value="-9.42773" />
                                                  <Key frame="100" value="-9.42773" />
                                                  <Key frame="125" value="-9.42773" />
                                                  <Key frame="150" value="-9.42773" />
                                                  <Key frame="175" value="-9.42773" />
                                                  <Key frame="200" value="-9.42773" />
                                                  <Key frame="225" value="-9.42773" />
                                                  <Key frame="250" value="-9.42773" />
                                                  <Key frame="275" value="-9.42773" />
                                                  <Key frame="300" value="-9.42773" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                  <Key frame="1" value="0" />
                                                  <Key frame="25" value="0" />
                                                  <Key frame="50" value="0" />
                                                  <Key frame="75" value="0" />
                                                  <Key frame="100" value="0" />
                                                  <Key frame="125" value="0" />
                                                  <Key frame="150" value="0" />
                                                  <Key frame="175" value="0" />
                                                  <Key frame="200" value="0" />
                                                  <Key frame="225" value="0" />
                                                  <Key frame="250" value="0" />
                                                  <Key frame="275" value="0" />
                                                  <Key frame="300" value="0" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="1" value="10.8" />
                                                  <Key frame="25" value="-44.5" />
                                                  <Key frame="50" value="10.8" />
                                                  <Key frame="75" value="-44.5" />
                                                  <Key frame="100" value="10.8" />
                                                  <Key frame="125" value="-44.5" />
                                                  <Key frame="150" value="10.8" />
                                                  <Key frame="175" value="-44.5" />
                                                  <Key frame="200" value="10.8" />
                                                  <Key frame="225" value="-44.5" />
                                                  <Key frame="250" value="10.8" />
                                                  <Key frame="275" value="-44.5" />
                                                  <Key frame="300" value="10.8" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="1" value="-6.44651" />
                                                  <Key frame="25" value="-6.80023" />
                                                  <Key frame="50" value="-6.44651" />
                                                  <Key frame="75" value="-6.80023" />
                                                  <Key frame="100" value="-6.44651" />
                                                  <Key frame="125" value="-6.80023" />
                                                  <Key frame="150" value="-6.44651" />
                                                  <Key frame="175" value="-6.80023" />
                                                  <Key frame="200" value="-6.44651" />
                                                  <Key frame="225" value="-6.80023" />
                                                  <Key frame="250" value="-6.44651" />
                                                  <Key frame="275" value="-6.80023" />
                                                  <Key frame="300" value="-6.44651" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="1" value="-36.9745" />
                                                  <Key frame="25" value="-37" />
                                                  <Key frame="50" value="-36.9745" />
                                                  <Key frame="75" value="-37" />
                                                  <Key frame="100" value="-36.9745" />
                                                  <Key frame="125" value="-37" />
                                                  <Key frame="150" value="-36.9745" />
                                                  <Key frame="175" value="-37" />
                                                  <Key frame="200" value="-36.9745" />
                                                  <Key frame="225" value="-37" />
                                                  <Key frame="250" value="-36.9745" />
                                                  <Key frame="275" value="-37" />
                                                  <Key frame="300" value="-36.9745" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="1" value="-24.4727" />
                                                  <Key frame="25" value="-24.2" />
                                                  <Key frame="50" value="-24.4727" />
                                                  <Key frame="75" value="-24.2" />
                                                  <Key frame="100" value="-24.4727" />
                                                  <Key frame="125" value="-24.2" />
                                                  <Key frame="150" value="-24.4727" />
                                                  <Key frame="175" value="-24.2" />
                                                  <Key frame="200" value="-24.4727" />
                                                  <Key frame="225" value="-24.2" />
                                                  <Key frame="250" value="-24.4727" />
                                                  <Key frame="275" value="-24.2" />
                                                  <Key frame="300" value="-24.4727" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="1" value="0.31014" />
                                                  <Key frame="25" value="0.3135" />
                                                  <Key frame="50" value="0.31014" />
                                                  <Key frame="75" value="0.3135" />
                                                  <Key frame="100" value="0.31014" />
                                                  <Key frame="125" value="0.3135" />
                                                  <Key frame="150" value="0.31014" />
                                                  <Key frame="175" value="0.3135" />
                                                  <Key frame="200" value="0.31014" />
                                                  <Key frame="225" value="0.3135" />
                                                  <Key frame="250" value="0.31014" />
                                                  <Key frame="275" value="0.3135" />
                                                  <Key frame="300" value="0.31014" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="1" value="-0.8" />
                                                  <Key frame="25" value="-52.3" />
                                                  <Key frame="50" value="-0.8" />
                                                  <Key frame="75" value="-52.3" />
                                                  <Key frame="100" value="-0.8" />
                                                  <Key frame="125" value="-52.3" />
                                                  <Key frame="150" value="-0.8" />
                                                  <Key frame="175" value="-52.3" />
                                                  <Key frame="200" value="-0.8" />
                                                  <Key frame="225" value="-52.3" />
                                                  <Key frame="250" value="-0.8" />
                                                  <Key frame="275" value="-52.3" />
                                                  <Key frame="300" value="-0.8" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="1" value="6.6" />
                                                  <Key frame="25" value="7.01289" />
                                                  <Key frame="50" value="6.6" />
                                                  <Key frame="75" value="7.01289" />
                                                  <Key frame="100" value="6.6" />
                                                  <Key frame="125" value="7.01289" />
                                                  <Key frame="150" value="6.6" />
                                                  <Key frame="175" value="7.01289" />
                                                  <Key frame="200" value="6.6" />
                                                  <Key frame="225" value="7.01289" />
                                                  <Key frame="250" value="6.6" />
                                                  <Key frame="275" value="7.01289" />
                                                  <Key frame="300" value="6.6" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="1" value="-9.1" />
                                                  <Key frame="25" value="-9.17791" />
                                                  <Key frame="50" value="-9.1" />
                                                  <Key frame="75" value="-9.17791" />
                                                  <Key frame="100" value="-9.1" />
                                                  <Key frame="125" value="-9.17791" />
                                                  <Key frame="150" value="-9.1" />
                                                  <Key frame="175" value="-9.17791" />
                                                  <Key frame="200" value="-9.1" />
                                                  <Key frame="225" value="-9.17791" />
                                                  <Key frame="250" value="-9.1" />
                                                  <Key frame="275" value="-9.17791" />
                                                  <Key frame="300" value="-9.1" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="1" value="-5.3" />
                                                  <Key frame="25" value="102.3" />
                                                  <Key frame="50" value="-5.3" />
                                                  <Key frame="75" value="102.3" />
                                                  <Key frame="100" value="-5.3" />
                                                  <Key frame="125" value="102.3" />
                                                  <Key frame="150" value="-5.3" />
                                                  <Key frame="175" value="102.3" />
                                                  <Key frame="200" value="-5.3" />
                                                  <Key frame="225" value="102.3" />
                                                  <Key frame="250" value="-5.3" />
                                                  <Key frame="275" value="102.3" />
                                                  <Key frame="300" value="-5.3" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="1" value="10.5" />
                                                  <Key frame="25" value="10.7" />
                                                  <Key frame="50" value="10.5" />
                                                  <Key frame="75" value="10.7" />
                                                  <Key frame="100" value="10.5" />
                                                  <Key frame="125" value="10.7" />
                                                  <Key frame="150" value="10.5" />
                                                  <Key frame="175" value="10.7" />
                                                  <Key frame="200" value="10.5" />
                                                  <Key frame="225" value="10.7" />
                                                  <Key frame="250" value="10.5" />
                                                  <Key frame="275" value="10.7" />
                                                  <Key frame="300" value="10.5" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="1" value="21.4" />
                                                  <Key frame="25" value="21.8" />
                                                  <Key frame="50" value="21.4" />
                                                  <Key frame="75" value="21.8" />
                                                  <Key frame="100" value="21.4" />
                                                  <Key frame="125" value="21.8" />
                                                  <Key frame="150" value="21.4" />
                                                  <Key frame="175" value="21.8" />
                                                  <Key frame="200" value="21.4" />
                                                  <Key frame="225" value="21.8" />
                                                  <Key frame="250" value="21.4" />
                                                  <Key frame="275" value="21.8" />
                                                  <Key frame="300" value="21.4" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="1" value="5.82534" />
                                                  <Key frame="25" value="5.82534" />
                                                  <Key frame="50" value="5.82534" />
                                                  <Key frame="75" value="5.82534" />
                                                  <Key frame="100" value="5.82534" />
                                                  <Key frame="125" value="5.82534" />
                                                  <Key frame="150" value="5.82534" />
                                                  <Key frame="175" value="5.82534" />
                                                  <Key frame="200" value="5.82534" />
                                                  <Key frame="225" value="5.82534" />
                                                  <Key frame="250" value="5.82534" />
                                                  <Key frame="275" value="5.82534" />
                                                  <Key frame="300" value="5.82534" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="1" value="10.8" />
                                                  <Key frame="25" value="-44.5" />
                                                  <Key frame="50" value="10.8" />
                                                  <Key frame="75" value="-44.5" />
                                                  <Key frame="100" value="10.8" />
                                                  <Key frame="125" value="-44.5" />
                                                  <Key frame="150" value="10.8" />
                                                  <Key frame="175" value="-44.5" />
                                                  <Key frame="200" value="10.8" />
                                                  <Key frame="225" value="-44.5" />
                                                  <Key frame="250" value="10.8" />
                                                  <Key frame="275" value="-44.5" />
                                                  <Key frame="300" value="10.8" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="1" value="6.35" />
                                                  <Key frame="25" value="5.96148" />
                                                  <Key frame="50" value="6.35" />
                                                  <Key frame="75" value="5.96148" />
                                                  <Key frame="100" value="6.35" />
                                                  <Key frame="125" value="5.96148" />
                                                  <Key frame="150" value="6.35" />
                                                  <Key frame="175" value="5.96148" />
                                                  <Key frame="200" value="6.35" />
                                                  <Key frame="225" value="5.96148" />
                                                  <Key frame="250" value="6.35" />
                                                  <Key frame="275" value="5.96148" />
                                                  <Key frame="300" value="6.35" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="1" value="36.6938" />
                                                  <Key frame="25" value="37" />
                                                  <Key frame="50" value="36.6938" />
                                                  <Key frame="75" value="37" />
                                                  <Key frame="100" value="36.6938" />
                                                  <Key frame="125" value="37" />
                                                  <Key frame="150" value="36.6938" />
                                                  <Key frame="175" value="37" />
                                                  <Key frame="200" value="36.6938" />
                                                  <Key frame="225" value="37" />
                                                  <Key frame="250" value="36.6938" />
                                                  <Key frame="275" value="37" />
                                                  <Key frame="300" value="36.6938" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="1" value="24.4741" />
                                                  <Key frame="25" value="24.2" />
                                                  <Key frame="50" value="24.4741" />
                                                  <Key frame="75" value="24.2" />
                                                  <Key frame="100" value="24.4741" />
                                                  <Key frame="125" value="24.2" />
                                                  <Key frame="150" value="24.4741" />
                                                  <Key frame="175" value="24.2" />
                                                  <Key frame="200" value="24.4741" />
                                                  <Key frame="225" value="24.2" />
                                                  <Key frame="250" value="24.4741" />
                                                  <Key frame="275" value="24.2" />
                                                  <Key frame="300" value="24.4741" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="1" value="0.358792" />
                                                  <Key frame="25" value="0.35883" />
                                                  <Key frame="50" value="0.358792" />
                                                  <Key frame="75" value="0.35883" />
                                                  <Key frame="100" value="0.358792" />
                                                  <Key frame="125" value="0.35883" />
                                                  <Key frame="150" value="0.358792" />
                                                  <Key frame="175" value="0.35883" />
                                                  <Key frame="200" value="0.358792" />
                                                  <Key frame="225" value="0.35883" />
                                                  <Key frame="250" value="0.358792" />
                                                  <Key frame="275" value="0.35883" />
                                                  <Key frame="300" value="0.358792" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="1" value="-0.8" />
                                                  <Key frame="25" value="-52.3" />
                                                  <Key frame="50" value="-0.8" />
                                                  <Key frame="75" value="-52.3" />
                                                  <Key frame="100" value="-0.8" />
                                                  <Key frame="125" value="-52.3" />
                                                  <Key frame="150" value="-0.8" />
                                                  <Key frame="175" value="-52.3" />
                                                  <Key frame="200" value="-0.8" />
                                                  <Key frame="225" value="-52.3" />
                                                  <Key frame="250" value="-0.8" />
                                                  <Key frame="275" value="-52.3" />
                                                  <Key frame="300" value="-0.8" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="1" value="-6.6" />
                                                  <Key frame="25" value="-6.32089" />
                                                  <Key frame="50" value="-6.6" />
                                                  <Key frame="75" value="-6.32089" />
                                                  <Key frame="100" value="-6.6" />
                                                  <Key frame="125" value="-6.32089" />
                                                  <Key frame="150" value="-6.6" />
                                                  <Key frame="175" value="-6.32089" />
                                                  <Key frame="200" value="-6.6" />
                                                  <Key frame="225" value="-6.32089" />
                                                  <Key frame="250" value="-6.6" />
                                                  <Key frame="275" value="-6.32089" />
                                                  <Key frame="300" value="-6.6" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="1" value="-9.1" />
                                                  <Key frame="25" value="-9.17791" />
                                                  <Key frame="50" value="-9.1" />
                                                  <Key frame="75" value="-9.17791" />
                                                  <Key frame="100" value="-9.1" />
                                                  <Key frame="125" value="-9.17791" />
                                                  <Key frame="150" value="-9.1" />
                                                  <Key frame="175" value="-9.17791" />
                                                  <Key frame="200" value="-9.1" />
                                                  <Key frame="225" value="-9.17791" />
                                                  <Key frame="250" value="-9.1" />
                                                  <Key frame="275" value="-9.17791" />
                                                  <Key frame="300" value="-9.1" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="1" value="-5.3" />
                                                  <Key frame="25" value="102.3" />
                                                  <Key frame="50" value="-5.3" />
                                                  <Key frame="75" value="102.3" />
                                                  <Key frame="100" value="-5.3" />
                                                  <Key frame="125" value="102.3" />
                                                  <Key frame="150" value="-5.3" />
                                                  <Key frame="175" value="102.3" />
                                                  <Key frame="200" value="-5.3" />
                                                  <Key frame="225" value="102.3" />
                                                  <Key frame="250" value="-5.3" />
                                                  <Key frame="275" value="102.3" />
                                                  <Key frame="300" value="-5.3" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="1" value="10.5" />
                                                  <Key frame="25" value="10.7" />
                                                  <Key frame="50" value="10.5" />
                                                  <Key frame="75" value="10.7" />
                                                  <Key frame="100" value="10.5" />
                                                  <Key frame="125" value="10.7" />
                                                  <Key frame="150" value="10.5" />
                                                  <Key frame="175" value="10.7" />
                                                  <Key frame="200" value="10.5" />
                                                  <Key frame="225" value="10.7" />
                                                  <Key frame="250" value="10.5" />
                                                  <Key frame="275" value="10.7" />
                                                  <Key frame="300" value="10.5" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="1" value="-21.4" />
                                                  <Key frame="25" value="-21.8" />
                                                  <Key frame="50" value="-21.4" />
                                                  <Key frame="75" value="-21.8" />
                                                  <Key frame="100" value="-21.4" />
                                                  <Key frame="125" value="-21.8" />
                                                  <Key frame="150" value="-21.4" />
                                                  <Key frame="175" value="-21.8" />
                                                  <Key frame="200" value="-21.4" />
                                                  <Key frame="225" value="-21.8" />
                                                  <Key frame="250" value="-21.4" />
                                                  <Key frame="275" value="-21.8" />
                                                  <Key frame="300" value="-21.4" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="1" value="7.57786" />
                                                  <Key frame="25" value="7.65004" />
                                                  <Key frame="50" value="7.57786" />
                                                  <Key frame="75" value="7.65004" />
                                                  <Key frame="100" value="7.57786" />
                                                  <Key frame="125" value="7.65004" />
                                                  <Key frame="150" value="7.57786" />
                                                  <Key frame="175" value="7.65004" />
                                                  <Key frame="200" value="7.57786" />
                                                  <Key frame="225" value="7.65004" />
                                                  <Key frame="250" value="7.57786" />
                                                  <Key frame="275" value="7.65004" />
                                                  <Key frame="300" value="7.57786" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="116" y="370">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei ,vier, \nEins,zwei,drei ,vier, \nEins,zwei,drei ,vier, ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[Eins,zwei,drei ,vier, 
Eins,zwei,drei ,vier, 
Eins,zwei,drei ,vier, ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Say Text" id="5" localization="8" tooltip="Say the text received on its input." x="509" y="261">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="63" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                                          <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="330" y="254">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="114" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                                <Link inputowner="7" indexofinput="2" outputowner="114" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Hands" id="6" localization="8" tooltip="This box contains Nao&apos;s exercising movements with his hands ." x="327" y="205">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Like it or not" id="6" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="145" y="134">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="NO" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        <Output name="YES" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="84.0896">
                                <Box name="Switch Case" id="11" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="128" y="346">
                                  <bitmap>media/images/box/interaction/choice.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("ja")):
			self.output_1(p)
		elif(p == self.typeConversion("nein")):
			self.output_2(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <keywords>
                                      <keyword>&quot;ja&quot;</keyword>
                                      <keyword>&quot;nein&quot;</keyword>
                                      <keyword></keyword>
                                    </keywords>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                  <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                  <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                  <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                </Box>
                                <Box name="Choice" id="16" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. The recognized answer is sent to the answer output.&#x0A;&#x0A;Note that you must open this box to enter the question text and the&#x0A;available answers." x="136" y="39">
                                  <bitmap>media/images/box/interaction/choice.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Output name="answer" type="3" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Choice" id="1" localization="8" tooltip="The Choice box is based on the dialog engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. Each recognized answer stimulate its&#x0A;corresponding output.&#x0A;Setting the choices in the box table:&#x0A;- Edit a choice by left double-clicking on its line.&#x0A;- Add a choice by right clicking on a line and selecting &apos;Insert a row&apos;.&#x0A;- Delete a choice by right clicking on its line and selecting &apos;Remove a row&apos;.&#x0A;- Write alternative answers for one choice by separating the phrases with &apos;/&apos; in the same line (e.g.: apple pie / pie / apple)." plugin="ui_choice_plugin" x="333" y="51">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v9
# @author Desktop Application team
# (c) 2014 Aldebaran Robotics

import os
import tempfile
import shutil
import uuid
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.dialogIsRunning = False
        self.dialogIsLoaded = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.langDict = {
            "Arabic":"arw",
            "Czech":"czc",
            "Danish":"dad",
            "German":"ged",
            "Greek":"grg",
            "English":"enu",
            "Spanish":"spe",
            "Finnish":"fif",
            "French":"frf",
            "Italian":"iti",
            "Japanese":"jpj",
            "Korean":"kok",
            "Dutch":"dun",
            "Norwegian":"nor",
            "Polish":"plp",
            "Brazilian":"ptb",
            "Portuguese":"ptp",
            "Russian":"rur",
            "Swedish":"sws",
            "Turkish":"trt",
            "Chinese":"mnc",
            "MandarinTaiwan":"mnt"
        }
        # end - choices

        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aDialogChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 10
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")

# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # SERVICE INITIALIZATIONS
        self.animSpeech = self.session().service("ALAnimatedSpeech")
        self.tts = self.session().service("ALTextToSpeech")
        self.memory = self.session().service("ALMemory")
        self.motion = self.session().service("ALMotion")

        try:
            self.dcm = self.session().service( "DCM" )
        except:
            self.dcm = None

        try:
            self.dialog = self.session().service("ALDialog")
        except:
            self.dialog = None
            raise RuntimeError("Choice box cannot be launched, as Dialog is not available.")

        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True
        self.generateTopicFile()

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", ""], "Brazilian": ["sim", "não", ""], "Chinese": ["是", "不是", ""], "Czech": ["ano", "ne", ""], "Danish": ["ja", "nej", ""], "Dutch": ["ja", "nee", ""], "English": ["yes", "no", ""], "Finnish": ["kyllä", "ei", ""], "French": ["oui", "non", ""], "German": ["ja", "nein", ""], "Greek": ["", ""], "Italian": ["sì", "no", ""], "Japanese": ["はい", "いいえ", ""], "Korean": ["예", "아니", ""], "MandarinTaiwan": ["是", "不是", ""], "Norwegian": ["", ""], "Polish": ["tak", "nie", ""], "Portuguese": ["sim", "não", ""], "Russian": ["да", "нет", ""], "Spanish": ["si", "no", ""], "Swedish": ["ja", "ingen", ""], "Turkish": ["evet", "hayır", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        language = self.tts.getLanguage()
        try:
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.getLocalizedStringList("TTS confirmation")
            self.getLocalizedStringList("TTS enumMarks")
            self.getLocalizedStringList("TTS helpEnumChoices")
            self.getLocalizedStringList("TTS helpEnumDefault")
            self.getLocalizedStringList("TTS helpTactile")
            self.getLocalizedStringList("TTS notUnderstood")
            self.getLocalizedStringList("TTS noQuestion")
            self.getLocalizedStringList("TTS notUnderstoodAnims")
        except Exception as e:
            raise Exception( "The current language is not supported by this Choice box. Internal sentences are missing for this language. (%s)" % e)
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.guid = ""
        self.lastHeadPos = None
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 10 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateBrainLight =  True
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.bodyLanguageMode = self.tryGetParameter( "Body language mode", "contextual" )
        self.dialog.setASRConfidenceThreshold(self.rUnderstoodThreshold )
        self.animSpeech.setBodyLanguageModeFromStr(self.bodyLanguageMode)
        self.aDefaultChoices = []
        self.aDialogDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.asHelpWords = self.removeUnauthorizedCharacters(self.asHelpWords)
            self.aDefaultChoices.append( self.asHelpWords )
            self.aDialogDefaultChoices += self.asHelpWords
        if (self.bActivateDefaultChoiceRepeat):
            self.asRepeatWords = self.removeUnauthorizedCharacters(self.asRepeatWords)
            self.aDefaultChoices.append( self.asRepeatWords )
            self.aDialogDefaultChoices += self.asRepeatWords
        if (self.bActivateDefaultChoiceExit):
            self.asExitWords = self.removeUnauthorizedCharacters(self.asExitWords)
            self.aDefaultChoices.append( self.asExitWords )
            self.aDialogDefaultChoices += self.asExitWords
        if( question == None ):
            question = ""
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        self.initQuestionAndChoices( question )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        if( not self.bGoOut ):
            self.questionRecognitionReaction()

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = self.tts.getLanguage()
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            self.aDialogDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
                self.aDialogDefaultChoices += self.asHelpWords
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
                self.aDialogDefaultChoices += self.asRepeatWords
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
                self.aDialogDefaultChoices += self.asExitWords
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aDialogChoices += choice
                    self.aChoiceIndexes.append( index )
                index += 1
            self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.animSpeech.stop(idtts)
            except:
                try:
                    self.tts.stop(idtts)
                except:
                    self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def removeIdTTS(self):
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

    def getLocalizedStringList(self, parameterName):
        return self.getParameter(parameterName).split("/")

    def removeUnauthorizedCharacters(self, wordList):
        wordList = [x.replace("'","") for x in wordList]
        return wordList

    def getLanguage(self):
        try:
            language = self.langDict[self.tts.getLanguage()]
        except:
            raise RuntimeError("Language " + self.tts.getLanguage() + " is not available for Choice box!")
        return language

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        language = self.getLanguage()
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aDialogChoices += aChoice
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )
        self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)
        self.sQuestion = [self.sQuestion]
# DIALOG ----------------------------------------------------------------------------------------------------

    def startDialog(self, activate = True):
        if self.bIsRunning:
            self.dialogIsRunning = True
            language = self.getLanguage()
            if not self.dialogIsLoaded:
                self.topics = []
                try:
                    for top in self.allTopicPaths:
                        topic = self.dialog._addDialogFromTopicBox(top, self.behaviorAbsolutePath())
                        self.topics.append(topic)
                        self.dialogIsLoaded = True
                except Exception as e:
                    print "Could not load topic " + str(e)
            if activate:
                try:
                    for top in self.topics:
                        if language in top.split("_")[-1]:
                            self.topic = top
                            self.guid = self.topic.split("_")[2]
                    self.dialog.setConcept("choices" + self.guid, language, self.aDialogChoices)
                    self.dialog.setConcept("question" + self.guid, language, self.sQuestion)
                    self.dialog.activateTopic(self.topic)
                    self.dialog.subscribe(self.getName())
                    thread.start_new_thread( self.loopLedsBrainTwinkle, () )
                except Exception as e:
                    print "Could not activate topic " + str(e)
                try:
                    self.memory.subscribeToEvent("Dialog/LastInput", self.getName(),"onDialogLastInput")
                    self.memory.subscribeToEvent("Dialog/NotSpeaking", self.getName(),"onDialogNotSpeaking")
                    self.memory.subscribeToEvent("Dialog/NotUnderstood", self.getName(),"onDialogNotUnderstood")
                except Exception as e:
                    print "Could not subscribe to event " + str(e)

    def stopDialog(self, unload=True):
        try:
            if unload:
                self.dialog.deactivateTopic(self.topic)
                for top in self.topics:
                    self.dialog.unloadTopic(top)
                self.dialogIsLoaded = False
            else:
                self.dialogIsRunning = False
            self.dialog.unsubscribe(self.getName())
        except Exception as e:
            print "Could not deactivate/unload topic " + str(e)
        try:
            self.memory.unsubscribeToEvent("Dialog/LastInput", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotSpeaking", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotUnderstood", self.getName())
        except Exception as e:
            print "Could not unsubscribe from Event " + str(e)

# DIALOG GENERATING --------------------------------------------------------------------------------------

    def generateTopicFile(self):
        self.directory = tempfile.mkdtemp()
        try:
            os.stat(self.directory)
        except:
            os.mkdir(self.directory)
        self.allTopicPaths = []
        for lang,dLang in self.langDict.iteritems():
            guid = str(uuid.uuid4())
            topicName = "dlg_choice_%s_%s.top" % (guid, dLang)
            topicPath = os.path.join(self.directory, topicName)
            self.allTopicPaths.append(topicPath)
            dialog = self.generateTopicContent(guid, dLang)
            with open(topicPath, 'w') as topic:
                topic.write(dialog)

    def generateTopicContent(self, guid, language):
        dialog = """topic: ~dlg_choice_%s_%s () \nlanguage: %s \ndynamic: question%s\ndynamic: choices%s\nu:(in:onActivation)  ~question%s \n\tu1:(~choices%s) $test=0 """ % (guid, language, language, guid, guid, guid, guid)
        return dialog

    def removeTopicFileDir(self):
        shutil.rmtree(self.directory)

# DIALOG OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onDialogLastInput(self, pDataName, pValue, pMessage):
        try:
            confidence = self.memory.getData("Dialog/Confidence")
        except:
            confidence = 0
        if pValue != "" and pValue in self.aDialogChoices:
            if confidence >= self.rConfirmationThreshold:
                self.sPreviousAnswer = pValue
                self.reactionWordUnderstood(pValue)
            else:
                self.stopDialog()
                self.sPreviousAnswer = pValue
                self.askConfirmation()
        else:
            if not self.bGoOut:
                if self.dialogIsRunning:
                    self.stopDialog(False)
                self.reactionNothingUnderstood()

    def onDialogNotSpeaking(self, pDataName, pValue, pMessage):
        if int(pValue) >= self.nTimeoutReco:
            if self.dialogIsRunning:
                self.stopDialog(False)
            self.sRecoInterruption = "timeout"

    def onDialogNotUnderstood(self, pDataName, pValue, pMessage):
        if self.dialogIsRunning:
            self.stopDialog(False)
        self.reactionNothingUnderstood()

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        if not self.dialogIsRunning:
            self.startDialog(True)
        self.processRecoInterruption()

    def askConfirmation(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        self.bInConfirmation = True
        sentence = self.getLocalizedStringList("TTS confirmation")[0]
        idTTS = -1
        sentenceToSay = sentence % self.sPreviousAnswer
        if( sentenceToSay != ""):
            idTTS = self.animSpeech.pCall("say", sentenceToSay )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentenceToSay) )
        # prepare speech recognition
        aWordsRecognised = []
        aWordsRecognised.extend( self.asNegativeWords )
        aWordsRecognised.extend( self.asPositiveWords )
        sWordsRecognised = "You can say: "
        if( len( aWordsRecognised ) > 1 ):
            for i in range( len( aWordsRecognised ) - 1 ):
                sWordsRecognised += "'" + aWordsRecognised[i] + "', "
        if( len( aWordsRecognised ) > 0 ):
            sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
        sWordsRecognised += "."
        self.logger.debug( sWordsRecognised )
        self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the animSpeech." )
        self.startDialog()

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.stopDialog()
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    self.startDialog()
                    self.sRecoInterruption = ""
                    self.processRecoInterruption()
        else:
            self.nCountNoReply = 0
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.getLocalizedStringList("TTS noQuestion")[0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.animSpeech.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )
        if not self.dialogIsRunning:
            self.bInTactileSensorMenu = False
            self.startDialog()

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        self.headDefault()
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word
            if( self.sPreviousAnswer in self.asHelpWords ):
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ):
                self.repeatWhenNoQuestion()
                # repeat the question
            else:
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
            self.sPreviousAnswer = ""

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.getLocalizedStringList("TTS notUnderstood")[0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.getLocalizedStringList("TTS notUnderstoodAnims")
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumDefault = self.getLocalizedStringList("TTS helpEnumDefault")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.getLocalizedStringList("TTS helpTactile")
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.animSpeech.pCall("say", sentence + "\\Pau=300\\" )
                self.bInTactileSensorMenu = False
            else:
                idTTS = self.animSpeech.pCall("say", sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question
        if not self.dialogIsRunning:
            self.startDialog()

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.animSpeech.pCall("say", sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.animSpeech.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
            if not self.dialogIsRunning:
                self.startDialog()
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDs ----------------------------------------------------------------------------------------------------

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLedsBrain( 0., 500 )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLedsBrain( 0.5, 500 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# ANIMATIONS ----------------------------------------------------------------------------------------------

    def headDown(self):
        names = []
        times = []
        keys = []
        names.append("HeadPitch")
        times.append([1.24])
        keys.append([[0.392662, [3, -0.413333, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.24])
        keys.append([[-0.027654, [3, -0.413333, 0], [3, 0, 0]]])
        try:
            self.motion.angleInterpolationBezier(names, times, keys)
            self.lastHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        except BaseException, err:
          print err

    def headDefault(self):
        currentHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        if currentHeadPos != self.lastHeadPos:
            return
        names = []
        times = []
        keys = []

        names.append("HeadPitch")
        times.append([1.2])
        keys.append([[-0.194861, [3, -0.4, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.2])
        keys.append([[-0.00771196, [3, -0.4, 0], [3, 0, 0]]])

        try:
            self.motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                self.headDown()
                thread.start_new_thread(self.loopLedsBrainTurn, ())
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) or self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    self.reactionWordUnderstood( self.aChoices[self.nIndexChoice][0] )
                    self.rTimeWhenActionMadeInTactileMenu = -1
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        self.headDown()
        sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
        idTTS = self.tts.pCall("say", sentence )
        self.aIdsTTS.append( idTTS )
        self.logger.debug( "Robot says: " + str(sentence) )
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.animSpeech.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.stopDialog(False)
        self.nCountNoReply = 0
        self.lastTimeoutVal = 0
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bInTactileSensorMenu = False
        self.bIsRunning = False
        self.goOutOfQuestionRecoReaction()

        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        if self.dialogIsRunning:
            self.stopDialog(False)
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.stopDialog()
        language = self.getLanguage()
        #reset concepts to reduce loading time
        try:
            self.dialog.setConcept("choices" + self.guid, language, [])
            self.dialog.setConcept("question" + self.guid, language, [])
        except Exception as e:
            print "Could not empty concept " + str(e)
        try:
            self.removeTopicFileDir()
        except Exception as e:
            print "Could not remove temporary topic file directory " + str(e)
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic" nuanceCode="arw">
                                                <keyword>نعم</keyword>
                                                <keyword>لا</keyword>
                                                <keyword></keyword>
                                              </arabic>
                                              <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian" nuanceCode="ptb">
                                                <keyword>sim</keyword>
                                                <keyword>não</keyword>
                                                <keyword></keyword>
                                              </brazilian>
                                              <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese" nuanceCode="mnc">
                                                <keyword>是</keyword>
                                                <keyword>不是</keyword>
                                                <keyword></keyword>
                                              </chinese>
                                              <czech uiName="‎Český Jazyk (Czech)" languageName="Czech" nuanceCode="czc">
                                                <keyword>ano</keyword>
                                                <keyword>ne</keyword>
                                                <keyword></keyword>
                                              </czech>
                                              <danish uiName="‎Dansk (Danish)" languageName="Danish" nuanceCode="dad">
                                                <keyword>ja</keyword>
                                                <keyword>nej</keyword>
                                                <keyword></keyword>
                                              </danish>
                                              <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch" nuanceCode="dun">
                                                <keyword>ja</keyword>
                                                <keyword>nee</keyword>
                                                <keyword></keyword>
                                              </dutch>
                                              <english uiName="‎American English (American English)" languageName="English" nuanceCode="enu">
                                                <keyword>yes</keyword>
                                                <keyword>no</keyword>
                                                <keyword></keyword>
                                              </english>
                                              <finnish uiName="‎Suomi (Finnish)" languageName="Finnish" nuanceCode="fif">
                                                <keyword>kyllä</keyword>
                                                <keyword>ei</keyword>
                                                <keyword></keyword>
                                              </finnish>
                                              <french uiName="‎Français (French)" languageName="French" nuanceCode="frf">
                                                <keyword>oui</keyword>
                                                <keyword>non</keyword>
                                                <keyword></keyword>
                                              </french>
                                              <german uiName="‎Deutsch (German)" languageName="German" nuanceCode="ged">
                                                <keyword>ja</keyword>
                                                <keyword>nein</keyword>
                                                <keyword></keyword>
                                              </german>
                                              <greek uiName="‎Ελληνικά (Greek)" languageName="Greek" nuanceCode="grg">
                                                <keyword></keyword>
                                                <keyword></keyword>
                                              </greek>
                                              <italian uiName="‎Italiano (Italian)" languageName="Italian" nuanceCode="iti">
                                                <keyword>sì</keyword>
                                                <keyword>no</keyword>
                                                <keyword></keyword>
                                              </italian>
                                              <japanese uiName="‎日本語 (Japanese)" languageName="Japanese" nuanceCode="jpj">
                                                <keyword>はい</keyword>
                                                <keyword>いいえ</keyword>
                                                <keyword></keyword>
                                              </japanese>
                                              <korean uiName="‎한국어 (Korean)" languageName="Korean" nuanceCode="kok">
                                                <keyword>예</keyword>
                                                <keyword>아니</keyword>
                                                <keyword></keyword>
                                              </korean>
                                              <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan" nuanceCode="mnt">
                                                <keyword>是</keyword>
                                                <keyword>不是</keyword>
                                                <keyword></keyword>
                                              </mandarintaiwan>
                                              <norwegian uiName="‎Norsk (Norwegian)" languageName="Norwegian" nuanceCode="nor">
                                                <keyword></keyword>
                                                <keyword></keyword>
                                              </norwegian>
                                              <polish uiName="‎Język polski (Polish)" languageName="Polish" nuanceCode="plp">
                                                <keyword>tak</keyword>
                                                <keyword>nie</keyword>
                                                <keyword></keyword>
                                              </polish>
                                              <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese" nuanceCode="ptp">
                                                <keyword>sim</keyword>
                                                <keyword>não</keyword>
                                                <keyword></keyword>
                                              </portuguese>
                                              <russian uiName="‎Русский (Russian)" languageName="Russian" nuanceCode="rur">
                                                <keyword>да</keyword>
                                                <keyword>нет</keyword>
                                                <keyword></keyword>
                                              </russian>
                                              <spanish uiName="‎Español (Spanish)" languageName="Spanish" nuanceCode="spe">
                                                <keyword>si</keyword>
                                                <keyword>no</keyword>
                                                <keyword></keyword>
                                              </spanish>
                                              <swedish uiName="‎Svenska (Swedish)" languageName="Swedish" nuanceCode="sws">
                                                <keyword>ja</keyword>
                                                <keyword>ingen</keyword>
                                                <keyword></keyword>
                                              </swedish>
                                              <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish" nuanceCode="trt">
                                                <keyword>evet</keyword>
                                                <keyword>hayır</keyword>
                                                <keyword></keyword>
                                              </turkish>
                                              <language>german</language>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                            <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip='To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;eg [[&quot;yes&quot;,&quot;ok&quot;],&quot;no&quot;,&quot;maybe&quot;]&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected.' id="3" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                            <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                            <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="8" />
                                            <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="9" />
                                            <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="10" />
                                            <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="11" />
                                            <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="12" />
                                            <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="13" />
                                            <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="6" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="14" />
                                            <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="15" />
                                            <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="16" />
                                            <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="17" />
                                            <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="18" />
                                            <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="19" />
                                            <Parameter name="Body language mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="" id="20">
                                              <Choice value="contextual" />
                                              <Choice value="random" />
                                              <Choice value="disabled" />
                                            </Parameter>
                                            <Parameter name="SpeechReco negative" inherits_from_parent="0" content_type="5" value="no/no nao/disagree/I disagree" default_value="no/no nao/disagree/I disagree" tooltip="" id="21" />
                                            <Parameter name="SpeechReco positive" inherits_from_parent="0" content_type="5" value="yes/yes nao/agree/I agree/of course" default_value="yes/yes nao/agree/I agree/of course" tooltip="" id="22" />
                                            <Parameter name="SpeechReco help" inherits_from_parent="0" content_type="5" value="help/help me/i don&apos;t know" default_value="help/help me/i don&apos;t know" tooltip="" id="23" />
                                            <Parameter name="SpeechReco exit" inherits_from_parent="0" content_type="5" value="exit/stop/quit" default_value="exit/stop/quit" tooltip="" id="24" />
                                            <Parameter name="SpeechReco repeat" inherits_from_parent="0" content_type="5" value="repeat/pardon/what/excuse me" default_value="repeat/pardon/what/excuse me" tooltip="" id="25" />
                                            <Parameter name="TTS confirmation" inherits_from_parent="0" content_type="5" value="I understood %s. Is that correct?" default_value="I understood %s. Is that correct?" tooltip="" id="26" />
                                            <Parameter name="TTS enumMarks" inherits_from_parent="0" content_type="5" value=", / or " default_value=", / or " tooltip="" id="27" />
                                            <Parameter name="TTS helpEnumChoices" inherits_from_parent="0" content_type="5" value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" default_value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" tooltip="" id="28" />
                                            <Parameter name="TTS helpEnumDefault" inherits_from_parent="0" content_type="5" value=" you can ask me: %s. " default_value=" you can ask me: %s. " tooltip="" id="29" />
                                            <Parameter name="TTS helpTactile" inherits_from_parent="0" content_type="5" value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." default_value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." tooltip="" id="30" />
                                            <Parameter name="TTS notUnderstood" inherits_from_parent="0" content_type="5" value="I did not understand. " default_value="I did not understand. " tooltip="" id="31" />
                                            <Parameter name="TTS noQuestion" inherits_from_parent="0" content_type="5" value="No question has been defined, so I cannot repeat it. " default_value="No question has been defined, so I cannot repeat it. " tooltip="" id="32" />
                                            <Parameter name="TTS notUnderstoodAnims" inherits_from_parent="0" content_type="5" value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " default_value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " tooltip="" id="33" />
                                          </Box>
                                          <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.sentences = {
			"Chinese" : " 你喜欢吃巧克力吗？ ",
			"English" : " Do you like exercising with me?! ",
			"French" : " Aimes-tu le chocolat ? ",
			"German" : " Trainiert ihr gerne mit mir?!  ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Arabic" : " هل تحب الشوكولاته؟ ",
			"Polish" : " Lubisz czekoladę? ",
			"Czech" : " Máš rád čokoládu? ",
			"Dutch" : " Hou je van chocolade? ",
			"Danish" : " Kan du lide chokolade? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"Swedish" : " Gillar du choklad? ",
			"Russian" : " Вы любите шоколад? ",
			"Turkish" : " Çikolata sever misin? ",
			"MandarinTaiwan" : " 你喜歡吃巧克力嗎？ ",
		}

	def onLoad(self):
		self.tts = self.session().service("ALTextToSpeech")

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese">
                                                <![CDATA[你喜欢吃巧克力吗？]]>
                                              </chinese>
                                              <english uiName="‎American English (American English)" languageName="English">
                                                <![CDATA[Do you like exercising with me?!]]>
                                              </english>
                                              <french uiName="‎Français (French)" languageName="French">
                                                <![CDATA[Aimes-tu le chocolat ?]]>
                                              </french>
                                              <german uiName="‎Deutsch (German)" languageName="German">
                                                <![CDATA[Trainiert ihr gerne mit mir?! ]]>
                                              </german>
                                              <italian uiName="‎Italiano (Italian)" languageName="Italian">
                                                <![CDATA[Ti piace il cioccolato?]]>
                                              </italian>
                                              <japanese uiName="‎日本語 (Japanese)" languageName="Japanese">
                                                <![CDATA[チョコレートが好きですか]]>
                                              </japanese>
                                              <korean uiName="‎한국어 (Korean)" languageName="Korean">
                                                <![CDATA[당신은 초콜렛을 좋아합니까?]]>
                                              </korean>
                                              <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese">
                                                <![CDATA[Gostas de chocolate?]]>
                                              </portuguese>
                                              <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian">
                                                <![CDATA[Você gosta de chocolate?]]>
                                              </brazilian>
                                              <spanish uiName="‎Español (Spanish)" languageName="Spanish">
                                                <![CDATA[¿Te gusta el chocolate?]]>
                                              </spanish>
                                              <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic">
                                                <![CDATA[هل تحب الشوكولاته؟]]>
                                              </arabic>
                                              <polish uiName="‎Język polski (Polish)" languageName="Polish">
                                                <![CDATA[Lubisz czekoladę?]]>
                                              </polish>
                                              <czech uiName="‎Český Jazyk (Czech)" languageName="Czech">
                                                <![CDATA[Máš rád čokoládu?]]>
                                              </czech>
                                              <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch">
                                                <![CDATA[Hou je van chocolade?]]>
                                              </dutch>
                                              <danish uiName="‎Dansk (Danish)" languageName="Danish">
                                                <![CDATA[Kan du lide chokolade?]]>
                                              </danish>
                                              <finnish uiName="‎Suomi (Finnish)" languageName="Finnish">
                                                <![CDATA[Pidätkö suklaasta?]]>
                                              </finnish>
                                              <swedish uiName="‎Svenska (Swedish)" languageName="Swedish">
                                                <![CDATA[Gillar du choklad?]]>
                                              </swedish>
                                              <russian uiName="‎Русский (Russian)" languageName="Russian">
                                                <![CDATA[Вы любите шоколад?]]>
                                              </russian>
                                              <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish">
                                                <![CDATA[Çikolata sever misin?]]>
                                              </turkish>
                                              <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan">
                                                <![CDATA[你喜歡吃巧克力嗎？]]>
                                              </mandarintaiwan>
                                              <language>german</language>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                          <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="7" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Confused" id="20" localization="8" tooltip="ID : #02C 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Confused" x="518" y="164">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="65">
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                                        <Key frame="25" value="2.72224" />
                                        <Key frame="45" value="-0.00240423" />
                                        <Key frame="65" value="5.71056" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                                        <Key frame="25" value="-30.8524" />
                                        <Key frame="45" value="-33.4013" />
                                        <Key frame="65" value="-30.4129" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                                        <Key frame="23" value="69.8715" />
                                        <Key frame="43" value="73.7388" />
                                        <Key frame="63" value="75.4087" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                                        <Key frame="23" value="0.498473" />
                                        <Key frame="43" value="3.51326" />
                                        <Key frame="63" value="2.89802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                                        <Key frame="23" value="-28.3914" />
                                        <Key frame="43" value="-55.7258" />
                                        <Key frame="63" value="-68.7337" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                                        <Key frame="23" value="-46.4923" />
                                        <Key frame="43" value="-67.9379" />
                                        <Key frame="63" value="-61.0823" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                                        <Key frame="43" value="-43" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                                        <Key frame="43" value="0.58" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                                        <Key frame="21" value="76.3803" />
                                        <Key frame="41" value="73.8315" />
                                        <Key frame="61" value="83.148" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                                        <Key frame="21" value="-0.529755" />
                                        <Key frame="41" value="-0.881321" />
                                        <Key frame="61" value="-0.969213" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                                        <Key frame="21" value="44.4708" />
                                        <Key frame="41" value="55.1936" />
                                        <Key frame="61" value="69.6078" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                                        <Key frame="21" value="69.8763" />
                                        <Key frame="41" value="79.896" />
                                        <Key frame="61" value="65.9212" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                                        <Key frame="41" value="52" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                                        <Key frame="41" value="0.527273" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                                        <Key frame="42" value="-27.9472" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                                        <Key frame="42" value="1.40867" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                                        <Key frame="42" value="-3.86483" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                                        <Key frame="42" value="30.2323" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                                        <Key frame="42" value="-10.9889" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                                        <Key frame="42" value="0.178188" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                                        <Key frame="42" value="1.49656" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                                        <Key frame="42" value="-0.79343" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                                        <Key frame="42" value="26.8973" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                                        <Key frame="42" value="-10.0173" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                                        <Key frame="42" value="-1.84332" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Text Edit" id="12" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="438" y="299">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Toll! Das mag ich auch! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Toll! Das mag ich auch! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Happy" id="3" localization="8" tooltip="ID : #02A 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Happy" x="393" y="469">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="53">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="FaceLeds" index="1">
                                        <Diagram scale="100">
                                          <Box name="laugh" id="1" localization="8" tooltip="laugh" x="123" y="42">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        if( self.bIsRunning ):

            return;

        rDuration = 0.2;
        self.bMustStop = False;
        self.bIsRunning = True;

        while( not self.bMustStop ):
            self.leds.fadeRGB( "FaceLed0", 0x787e9d, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed1", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed2", 0x2ec1e9, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed5", 0x1e9980, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed6", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration, _async=True );

            #time.sleep( 0.1 );

            self.leds.fadeRGB( "FaceLed0", 0x0400a1, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed1", 0x14a176, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed2", 0x000022, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed4", 0x00000e, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed5", 0x56ffff, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed6", 0x000020, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed7", 0x000038, rDuration*2 );


            if( self.bMustStop ):
                break;

        self.bIsRunning = False;
        self.onStopped();

    def onInput_onStop(self):
        self.bMustStop = True;]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                                        <Key frame="19" value="-13" />
                                        <Key frame="34" value="7" />
                                        <Key frame="53" value="-0.881321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                                        <Key frame="19" value="7.29261" />
                                        <Key frame="34" value="-8" />
                                        <Key frame="53" value="-10.3736" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                                        <Key frame="9" value="84.901" />
                                        <Key frame="17" value="80.5064" />
                                        <Key frame="25" value="84.8131" />
                                        <Key frame="32" value="81.9127" />
                                        <Key frame="51" value="85.1647" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                                        <Key frame="9" value="35.8574" />
                                        <Key frame="17" value="8.17153" />
                                        <Key frame="25" value="34.0117" />
                                        <Key frame="32" value="9.31412" />
                                        <Key frame="51" value="4.91953" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                                        <Key frame="9" value="-50.628" />
                                        <Key frame="17" value="-59.5051" />
                                        <Key frame="25" value="-50.8917" />
                                        <Key frame="32" value="-58.7141" />
                                        <Key frame="51" value="-64.8665" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                                        <Key frame="9" value="-39.1973" />
                                        <Key frame="17" value="-80.5943" />
                                        <Key frame="25" value="-39.3731" />
                                        <Key frame="32" value="-79.3638" />
                                        <Key frame="51" value="-21.8826" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                                        <Key frame="17" value="-6.4185" />
                                        <Key frame="32" value="-6.4185" />
                                        <Key frame="51" value="-7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                                        <Key frame="17" value="0.110572" />
                                        <Key frame="32" value="0.110935" />
                                        <Key frame="51" value="0.112026" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                                        <Key frame="7" value="79.3686" />
                                        <Key frame="15" value="85.3453" />
                                        <Key frame="23" value="81.2144" />
                                        <Key frame="30" value="85.4332" />
                                        <Key frame="49" value="88.1578" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                                        <Key frame="7" value="-7.20953" />
                                        <Key frame="15" value="-34.1923" />
                                        <Key frame="23" value="-8.26423" />
                                        <Key frame="30" value="-32.6102" />
                                        <Key frame="49" value="-3.07861" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                                        <Key frame="7" value="60.3792" />
                                        <Key frame="15" value="50.799" />
                                        <Key frame="23" value="59.6761" />
                                        <Key frame="30" value="51.0627" />
                                        <Key frame="49" value="85.6041" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                                        <Key frame="7" value="81.7417" />
                                        <Key frame="15" value="39.2021" />
                                        <Key frame="23" value="80.4233" />
                                        <Key frame="30" value="39.5537" />
                                        <Key frame="49" value="26.0184" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                                        <Key frame="15" value="0.173379" />
                                        <Key frame="30" value="0.173379" />
                                        <Key frame="49" value="-0.266079" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                                        <Key frame="15" value="0.221844" />
                                        <Key frame="30" value="0.221844" />
                                        <Key frame="49" value="0.221116" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                                        <Key frame="16" value="-20.2127" />
                                        <Key frame="31" value="-20.2127" />
                                        <Key frame="50" value="-18.367" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                                        <Key frame="16" value="14.0651" />
                                        <Key frame="31" value="-0.705538" />
                                        <Key frame="50" value="6.15482" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                                        <Key frame="16" value="1.58446" />
                                        <Key frame="31" value="-6.59428" />
                                        <Key frame="50" value="11.8678" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                                        <Key frame="16" value="2.98591" />
                                        <Key frame="31" value="27.3367" />
                                        <Key frame="50" value="-5.29104" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                                        <Key frame="16" value="7.99574" />
                                        <Key frame="31" value="-8.4352" />
                                        <Key frame="50" value="6.76526" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                                        <Key frame="16" value="-13.445" />
                                        <Key frame="31" value="1.0523" />
                                        <Key frame="50" value="-5.09532" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                                        <Key frame="16" value="0.79343" />
                                        <Key frame="31" value="-13.9772" />
                                        <Key frame="50" value="-3.60116" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                                        <Key frame="16" value="-6.68218" />
                                        <Key frame="31" value="1.76024" />
                                        <Key frame="50" value="12.2145" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                                        <Key frame="16" value="27.3367" />
                                        <Key frame="31" value="2.98591" />
                                        <Key frame="50" value="-4.48007" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                                        <Key frame="16" value="-8.61098" />
                                        <Key frame="31" value="8.08363" />
                                        <Key frame="50" value="6.33061" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                                        <Key frame="16" value="-1.0523" />
                                        <Key frame="31" value="13.445" />
                                        <Key frame="50" value="3.16651" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                  <Resource name="Left eye leds" type="Lock" timeout="1" />
                                  <Resource name="Right eye leds" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="635" y="412">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="823" y="20">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Delay (1)" id="6" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="800" y="407">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Text Edit (1)" id="7" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="350" y="22">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("ach, wirklich... schade... ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[ach, wirklich... schade... ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Say Text (1)" id="8" localization="8" tooltip="Say the text received on its input." x="609" y="13">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit (2)" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="980" y="24">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Lass uns noch ein paar Übungen machen, und ihr werdet  \nes mit Sicherheit mögen! Als nächstes werden wir Handhebungen machen! Macht mit ! ! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Lass uns noch ein paar Übungen machen, und ihr werdet  
es mit Sicherheit mögen! Als nächstes werden wir Handhebungen machen! Macht mit ! ! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Say Text (2)" id="9" localization="8" tooltip="Say the text received on its input." x="1239" y="15">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit (3)" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="952" y="412">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Lass uns noch ein paar Übungen machen, und ihr werdet  \nes mit Sicherheit mögen! Als nächstes werden wir Handhebungen machen! Macht mit ! ! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Lass uns noch ein paar Übungen machen, und ihr werdet  
es mit Sicherheit mögen! Als nächstes werden wir Handhebungen machen! Macht mit ! ! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Say Text (3)" id="10" localization="8" tooltip="Say the text received on its input." x="1211" y="403">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="animation" id="15" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="867" y="198">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="LittleBothArmsBump_DuckEnd_01" id="117" localization="8" tooltip='ID : #01C 0013&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Yes&#x0A;- Affirmative&#x0A;- &quot;.&quot;&#x0A;- Indicate&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Flex' x="97" y="47">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="35">
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="11" value="2.5" />
                                                  <Key frame="34" value="2.63435" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                  <Key frame="11" value="5.12269" />
                                                  <Key frame="34" value="5.47908" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="4.30429" />
                                                  <Key frame="16" value="2.81013" />
                                                  <Key frame="25" value="2.81013" />
                                                  <Key frame="32" value="4.30429" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-3.77694" />
                                                  <Key frame="16" value="-4.30429" />
                                                  <Key frame="25" value="-4.30429" />
                                                  <Key frame="32" value="-3.77694" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-51.9416" />
                                                  <Key frame="17" value="-49.9201" />
                                                  <Key frame="24" value="-49.9201" />
                                                  <Key frame="35" value="-49.7491" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="10" value="-55.1105" />
                                                  <Key frame="17" value="-77.1" />
                                                  <Key frame="24" value="-53.88" />
                                                  <Key frame="35" value="-46.0529" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="10" value="0.1836" />
                                                  <Key frame="17" value="0.59" />
                                                  <Key frame="24" value="0.1956" />
                                                  <Key frame="35" value="0.2224" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="13.274" />
                                                  <Key frame="16" value="18.1081" />
                                                  <Key frame="25" value="18.1081" />
                                                  <Key frame="32" value="13.274" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="3.34228" />
                                                  <Key frame="16" value="5.10013" />
                                                  <Key frame="25" value="5.10013" />
                                                  <Key frame="32" value="3.34228" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-18.8064" />
                                                  <Key frame="16" value="-18.8064" />
                                                  <Key frame="25" value="-18.8064" />
                                                  <Key frame="32" value="-18.8064" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="-3.43018" />
                                                  <Key frame="16" value="-2.81494" />
                                                  <Key frame="25" value="-2.81494" />
                                                  <Key frame="32" value="-3.43018" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="10" value="80.1549" />
                                                  <Key frame="17" value="80.1549" />
                                                  <Key frame="24" value="80.1549" />
                                                  <Key frame="35" value="76.2924" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-4.48488" />
                                                  <Key frame="17" value="1.67426" />
                                                  <Key frame="24" value="-0.793436" />
                                                  <Key frame="35" value="-2.37068" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="10" value="5.35899" />
                                                  <Key frame="17" value="0.261268" />
                                                  <Key frame="24" value="2.63435" />
                                                  <Key frame="35" value="0.705531" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="2.1997" />
                                                  <Key frame="16" value="-0.700723" />
                                                  <Key frame="25" value="-0.700723" />
                                                  <Key frame="32" value="2.1997" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="10.1978" />
                                                  <Key frame="16" value="10.1978" />
                                                  <Key frame="25" value="10.1978" />
                                                  <Key frame="32" value="10.1978" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="9" value="56.8683" />
                                                  <Key frame="15" value="55.4621" />
                                                  <Key frame="24" value="56.8683" />
                                                  <Key frame="33" value="60.9066" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="9" value="54.3147" />
                                                  <Key frame="15" value="77.1" />
                                                  <Key frame="24" value="53.6994" />
                                                  <Key frame="33" value="45.6182" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="9" value="0.1648" />
                                                  <Key frame="15" value="0.59" />
                                                  <Key frame="24" value="0.1648" />
                                                  <Key frame="33" value="0.1888" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="10.4567" />
                                                  <Key frame="16" value="16.3455" />
                                                  <Key frame="25" value="16.3455" />
                                                  <Key frame="32" value="10.4567" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-10.8962" />
                                                  <Key frame="16" value="-11.5114" />
                                                  <Key frame="25" value="-11.5114" />
                                                  <Key frame="32" value="-10.8962" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-18.8064" />
                                                  <Key frame="16" value="-18.8064" />
                                                  <Key frame="25" value="-18.8064" />
                                                  <Key frame="32" value="-18.8064" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="1.23289" />
                                                  <Key frame="16" value="1.84813" />
                                                  <Key frame="25" value="1.84813" />
                                                  <Key frame="32" value="1.23289" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="9" value="83.6753" />
                                                  <Key frame="15" value="83.6753" />
                                                  <Key frame="24" value="83.6753" />
                                                  <Key frame="33" value="85.7799" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="9" value="3.60116" />
                                                  <Key frame="15" value="-2.97715" />
                                                  <Key frame="24" value="-2.1997" />
                                                  <Key frame="33" value="-3.86484" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="9" value="-11.692" />
                                                  <Key frame="15" value="-11.692" />
                                                  <Key frame="24" value="-11.692" />
                                                  <Key frame="33" value="-13.3571" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="StrongLeftArmInFront_LeanLeft_01" id="105" localization="8" tooltip="ID : #01C 0031&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;-&#x0A;-&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : LeanLeft" x="404" y="62">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="27">
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-4.13332" />
                                                  <Key frame="17" value="9.4" />
                                                  <Key frame="26" value="-5.4" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                  <Key frame="10" value="4.04062" />
                                                  <Key frame="17" value="5.44688" />
                                                  <Key frame="26" value="4.04062" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="-7.82477" />
                                                  <Key frame="17" value="-3.25439" />
                                                  <Key frame="26" value="-1.05711" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-5.09532" />
                                                  <Key frame="17" value="-2.54646" />
                                                  <Key frame="26" value="-0.700723" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="9" value="-87.4499" />
                                                  <Key frame="15" value="-70.5747" />
                                                  <Key frame="25" value="-62.9281" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="9" value="-56.0773" />
                                                  <Key frame="15" value="-91.0582" />
                                                  <Key frame="25" value="-95.6286" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="9" value="0.172" />
                                                  <Key frame="15" value="0.6344" />
                                                  <Key frame="25" value="0.7732" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="26.1941" />
                                                  <Key frame="17" value="17.0534" />
                                                  <Key frame="26" value="11.5162" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="7.56109" />
                                                  <Key frame="17" value="2.90283" />
                                                  <Key frame="26" value="0.266077" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-16.1697" />
                                                  <Key frame="17" value="-17.5759" />
                                                  <Key frame="26" value="-18.1912" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="2.45857" />
                                                  <Key frame="17" value="2.0191" />
                                                  <Key frame="26" value="2.0191" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="9" value="68.5531" />
                                                  <Key frame="15" value="79.0123" />
                                                  <Key frame="25" value="81.3853" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="9" value="10.0173" />
                                                  <Key frame="15" value="11.5993" />
                                                  <Key frame="25" value="14.4118" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="9" value="15.9939" />
                                                  <Key frame="15" value="-4.48488" />
                                                  <Key frame="25" value="-14.5045" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="10" value="-5.44688" />
                                                  <Key frame="17" value="-1.0523" />
                                                  <Key frame="26" value="1.84813" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="10" value="3.86964" />
                                                  <Key frame="17" value="6.24271" />
                                                  <Key frame="26" value="6.94585" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="11" value="59.7688" />
                                                  <Key frame="18" value="46.6729" />
                                                  <Key frame="27" value="42.1025" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="11" value="65.8285" />
                                                  <Key frame="18" value="79.9791" />
                                                  <Key frame="27" value="83.1432" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="11" value="0.0372" />
                                                  <Key frame="18" value="0.0372" />
                                                  <Key frame="27" value="0.0372" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="10" value="27.244" />
                                                  <Key frame="17" value="17.0486" />
                                                  <Key frame="26" value="10.1051" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="10" value="-6.15001" />
                                                  <Key frame="17" value="-8.08364" />
                                                  <Key frame="26" value="-8.69887" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-16.1697" />
                                                  <Key frame="17" value="-17.5759" />
                                                  <Key frame="26" value="-18.1912" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="10" value="-0.788627" />
                                                  <Key frame="17" value="-0.43705" />
                                                  <Key frame="26" value="-0.43705" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="11" value="99.3201" />
                                                  <Key frame="18" value="98.1775" />
                                                  <Key frame="27" value="99.3201" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="11" value="-10.9889" />
                                                  <Key frame="18" value="-6.3306" />
                                                  <Key frame="27" value="-5.62747" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="11" value="-23.6453" />
                                                  <Key frame="18" value="-7.4732" />
                                                  <Key frame="27" value="-7.91266" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="265" y="53">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="544" y="148">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                              <Choice value="Crouch" />
                                              <Choice value="LyingBack" />
                                              <Choice value="LyingBelly" />
                                              <Choice value="Sit" />
                                              <Choice value="SitRelax" />
                                              <Choice value="StandInit" />
                                              <Choice value="Stand" />
                                              <Choice value="StandZero" />
                                            </Parameter>
                                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                            <Resource name="All motors" type="Lock" timeout="0" />
                                            <Resource name="Stiffness" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="14" indexofinput="2" outputowner="117" indexofoutput="4" />
                                          <Link inputowner="105" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="117" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="7" indexofinput="2" outputowner="105" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="11" indexofinput="2" outputowner="16" indexofoutput="5" />
                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="2" outputowner="12" indexofoutput="3" />
                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="3" />
                                <Link inputowner="14" indexofinput="2" outputowner="8" indexofoutput="4" />
                                <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="9" indexofoutput="4" />
                                <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="3" />
                                <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="6" outputowner="10" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" />
                                <Link inputowner="20" indexofinput="2" outputowner="11" indexofoutput="5" />
                                <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Doing great" id="2" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="388" y="41">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="GoToStance_Affirmation_Flex" id="13" localization="8" tooltip="ID : #01C 9996&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Transition&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Flex" x="208" y="212">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="25">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="11" value="0" />
                                        <Key frame="24" value="-8.61579" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="24" value="2.90283" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="11" value="-6.2379" />
                                        <Key frame="24" value="-13.8893" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="24" value="-6.67737" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="12" value="-66.3" />
                                        <Key frame="23" value="-70.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="12" value="-45.8" />
                                        <Key frame="23" value="-83.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="12" value="0.35" />
                                        <Key frame="23" value="0.53" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="11" value="-15.3835" />
                                        <Key frame="24" value="-24.4315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="24" value="6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="11" value="-11.072" />
                                        <Key frame="24" value="-13.8845" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="11" value="24.8758" />
                                        <Key frame="24" value="35.5059" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="10" value="62.8" />
                                        <Key frame="23" value="93.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="10" value="11.1" />
                                        <Key frame="23" value="0.3" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="12" value="-42" />
                                        <Key frame="23" value="-12.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="11" value="-7.82477" />
                                        <Key frame="24" value="-10.0173" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="24" value="5.3638" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="10" value="56.7" />
                                        <Key frame="25" value="70.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="10" value="63.7" />
                                        <Key frame="25" value="83.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="10" value="0.09" />
                                        <Key frame="25" value="0.53" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="11" value="-12.4782" />
                                        <Key frame="24" value="-21.7996" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="24" value="-0.700723" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="11" value="-11.072" />
                                        <Key frame="24" value="-13.8845" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="11" value="23.992" />
                                        <Key frame="24" value="29.6219" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="12" value="64.5" />
                                        <Key frame="25" value="93.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="12" value="-5.3" />
                                        <Key frame="25" value="-0.3" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="10" value="-24.4" />
                                        <Key frame="25" value="12.7" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="GoToStance_Affirmation_LeanRight" id="12" localization="8" tooltip="ID : #01C 9993&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Transition&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : LeanRight" x="389" y="201">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="25">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="11" value="0" />
                                        <Key frame="24" value="-8.61579" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="24" value="2.90283" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="11" value="-6.2379" />
                                        <Key frame="24" value="-0.524941" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="24" value="-12.9225" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="12" value="-66.3" />
                                        <Key frame="23" value="-70.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="12" value="-45.8" />
                                        <Key frame="23" value="-83.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="12" value="0.35" />
                                        <Key frame="23" value="0.53" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="11" value="-15.3835" />
                                        <Key frame="24" value="5.09532" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="24" value="13.7966" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="11" value="-11.072" />
                                        <Key frame="24" value="-10.4567" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="11" value="24.8758" />
                                        <Key frame="24" value="2.63916" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="10" value="62.8" />
                                        <Key frame="23" value="93.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="10" value="11.1" />
                                        <Key frame="23" value="0.3" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="12" value="-42" />
                                        <Key frame="23" value="-12.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="11" value="-7.82477" />
                                        <Key frame="24" value="-3.78175" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="24" value="-2.1997" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="10" value="56.7" />
                                        <Key frame="25" value="70.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="10" value="63.7" />
                                        <Key frame="25" value="83.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="10" value="0.09" />
                                        <Key frame="25" value="0.53" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="11" value="-12.4782" />
                                        <Key frame="24" value="6.77007" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="24" value="5.00743" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="11" value="-11.072" />
                                        <Key frame="24" value="-10.4567" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="11" value="23.992" />
                                        <Key frame="24" value="4.56796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="12" value="64.5" />
                                        <Key frame="25" value="93.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="12" value="-5.3" />
                                        <Key frame="25" value="-0.3" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="10" value="-24.4" />
                                        <Key frame="25" value="12.7" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Text Edit" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="234" y="0">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Das macht ihr toll! Macht euch bereit für die nächste Übung! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Das macht ihr toll! Macht euch bereit für die nächste Übung! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Say Text" id="9" localization="8" tooltip="Say the text received on its input." x="491" y="0">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="539" y="187">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Wait For Signals" id="1" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="634" y="46">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                  <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                  <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                </Box>
                                <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="4" />
                                <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="3" />
                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="7" indexofinput="2" outputowner="12" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="3" outputowner="7" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="9" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="hands to chest" id="7" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="590" y="206">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="70.7107">
                                <Box name="hands to chest" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="409" y="315">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="440">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="536" y="22">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="68" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="241" y="24">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei ,vier,\nEins,zwei,drei ,vier,\nEins,zwei,drei ,vier,\nEins,zwei,drei ,vier,")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[Eins,zwei,drei ,vier,
Eins,zwei,drei ,vier,
Eins,zwei,drei ,vier,
Eins,zwei,drei ,vier,]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="99" y="19">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                          <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="15" value="-5.1" />
                                        <Key frame="20" value="-7.5" />
                                        <Key frame="40" value="-4.8" />
                                        <Key frame="65" value="-7" />
                                        <Key frame="90" value="-5.1" />
                                        <Key frame="115" value="-7.4" />
                                        <Key frame="140" value="-5.6" />
                                        <Key frame="165" value="-5.6" />
                                        <Key frame="190" value="-5.5" />
                                        <Key frame="240" value="-4.8" />
                                        <Key frame="290" value="-4.8" />
                                        <Key frame="340" value="-5.6" />
                                        <Key frame="390" value="-5.6" />
                                        <Key frame="415" value="-5" />
                                        <Key frame="440" value="-9.36757" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="20" value="0" />
                                        <Key frame="440" value="0" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="440" value="3.95183" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="440" value="-5.66238" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="-9.8" />
                                        <Key frame="20" value="-9.8" />
                                        <Key frame="65" value="-9.8" />
                                        <Key frame="115" value="-9.8" />
                                        <Key frame="140" value="-64.6" />
                                        <Key frame="165" value="-15.6" />
                                        <Key frame="190" value="-64.6" />
                                        <Key frame="215" value="-9.8" />
                                        <Key frame="265" value="-9.8" />
                                        <Key frame="315" value="-9.8" />
                                        <Key frame="340" value="-64.6" />
                                        <Key frame="365" value="-9.8" />
                                        <Key frame="390" value="-64.6" />
                                        <Key frame="415" value="-9.8" />
                                        <Key frame="440" value="-33.4856" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="-79.2" />
                                        <Key frame="20" value="-79.2" />
                                        <Key frame="40" value="-110.1" />
                                        <Key frame="65" value="-79.2" />
                                        <Key frame="90" value="-110.1" />
                                        <Key frame="115" value="-79.2" />
                                        <Key frame="140" value="-30.9" />
                                        <Key frame="165" value="-79.7" />
                                        <Key frame="190" value="-30.9" />
                                        <Key frame="215" value="-79.2" />
                                        <Key frame="240" value="-110.1" />
                                        <Key frame="265" value="-79.2" />
                                        <Key frame="290" value="-110.1" />
                                        <Key frame="315" value="-79.2" />
                                        <Key frame="340" value="-30.9" />
                                        <Key frame="365" value="-79.2" />
                                        <Key frame="390" value="-30.9" />
                                        <Key frame="415" value="-79.2" />
                                        <Key frame="440" value="-69.3931" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                                        <Key frame="15" value="0" />
                                        <Key frame="20" value="0" />
                                        <Key frame="40" value="1" />
                                        <Key frame="65" value="0" />
                                        <Key frame="90" value="1" />
                                        <Key frame="115" value="0" />
                                        <Key frame="140" value="0.03" />
                                        <Key frame="165" value="0" />
                                        <Key frame="190" value="0" />
                                        <Key frame="215" value="0" />
                                        <Key frame="240" value="1" />
                                        <Key frame="265" value="0" />
                                        <Key frame="290" value="1" />
                                        <Key frame="315" value="0" />
                                        <Key frame="340" value="0.03" />
                                        <Key frame="365" value="0" />
                                        <Key frame="390" value="0.03" />
                                        <Key frame="415" value="0" />
                                        <Key frame="440" value="0.316782" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="40" value="-0.1" />
                                        <Key frame="240" value="-0.1" />
                                        <Key frame="290" value="-0.1" />
                                        <Key frame="440" value="9.96813" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="440" value="5.771" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="440" value="-9.14965" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="40" value="-3.1" />
                                        <Key frame="240" value="-3.1" />
                                        <Key frame="290" value="-3.1" />
                                        <Key frame="440" value="-5.03944" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="6.7" />
                                        <Key frame="20" value="6.7" />
                                        <Key frame="40" value="-6.7" />
                                        <Key frame="65" value="6.7" />
                                        <Key frame="90" value="-6.7" />
                                        <Key frame="115" value="6.7" />
                                        <Key frame="140" value="12.1" />
                                        <Key frame="165" value="4.4" />
                                        <Key frame="190" value="12.1" />
                                        <Key frame="215" value="6.7" />
                                        <Key frame="240" value="-6.7" />
                                        <Key frame="265" value="6.7" />
                                        <Key frame="290" value="-6.7" />
                                        <Key frame="315" value="6.7" />
                                        <Key frame="340" value="12.1" />
                                        <Key frame="365" value="6.7" />
                                        <Key frame="390" value="12.1" />
                                        <Key frame="415" value="6.7" />
                                        <Key frame="440" value="85.897" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="-3.2" />
                                        <Key frame="20" value="-3.2" />
                                        <Key frame="40" value="59.1" />
                                        <Key frame="65" value="-3.2" />
                                        <Key frame="90" value="59.1" />
                                        <Key frame="115" value="-3.2" />
                                        <Key frame="140" value="61.2" />
                                        <Key frame="165" value="-3.5" />
                                        <Key frame="190" value="61.2" />
                                        <Key frame="215" value="-3.2" />
                                        <Key frame="240" value="59.1" />
                                        <Key frame="265" value="-3.2" />
                                        <Key frame="290" value="59.1" />
                                        <Key frame="315" value="-3.2" />
                                        <Key frame="340" value="61.2" />
                                        <Key frame="365" value="-3.2" />
                                        <Key frame="390" value="61.2" />
                                        <Key frame="415" value="-3.2" />
                                        <Key frame="440" value="11.1721" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-2.3" />
                                        <Key frame="20" value="-2.3" />
                                        <Key frame="65" value="-2.3" />
                                        <Key frame="115" value="-2.3" />
                                        <Key frame="140" value="-3.5" />
                                        <Key frame="165" value="-3.5" />
                                        <Key frame="190" value="-3.5" />
                                        <Key frame="215" value="-2.3" />
                                        <Key frame="265" value="-2.3" />
                                        <Key frame="315" value="-2.3" />
                                        <Key frame="340" value="-3.5" />
                                        <Key frame="365" value="-2.3" />
                                        <Key frame="390" value="-3.5" />
                                        <Key frame="415" value="-2.3" />
                                        <Key frame="440" value="5.79469" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="440" value="4.41582" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="440" value="4.91102" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="9.8" />
                                        <Key frame="20" value="9.8" />
                                        <Key frame="65" value="9.8" />
                                        <Key frame="115" value="9.8" />
                                        <Key frame="140" value="64.6" />
                                        <Key frame="165" value="15.6" />
                                        <Key frame="190" value="64.6" />
                                        <Key frame="215" value="9.8" />
                                        <Key frame="265" value="9.8" />
                                        <Key frame="315" value="9.8" />
                                        <Key frame="340" value="64.6" />
                                        <Key frame="365" value="9.8" />
                                        <Key frame="390" value="64.6" />
                                        <Key frame="415" value="9.8" />
                                        <Key frame="440" value="29.2029" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="79.2" />
                                        <Key frame="20" value="79.2" />
                                        <Key frame="40" value="110.1" />
                                        <Key frame="65" value="79.2" />
                                        <Key frame="90" value="110.1" />
                                        <Key frame="115" value="79.2" />
                                        <Key frame="140" value="30.9" />
                                        <Key frame="165" value="79.7" />
                                        <Key frame="190" value="30.9" />
                                        <Key frame="215" value="79.2" />
                                        <Key frame="240" value="110.1" />
                                        <Key frame="265" value="79.2" />
                                        <Key frame="290" value="110.1" />
                                        <Key frame="315" value="79.2" />
                                        <Key frame="340" value="30.9" />
                                        <Key frame="365" value="79.2" />
                                        <Key frame="390" value="30.9" />
                                        <Key frame="415" value="79.2" />
                                        <Key frame="440" value="75.342" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="0" />
                                        <Key frame="20" value="0" />
                                        <Key frame="40" value="1" />
                                        <Key frame="65" value="0" />
                                        <Key frame="90" value="1" />
                                        <Key frame="115" value="0" />
                                        <Key frame="140" value="0.03" />
                                        <Key frame="165" value="0" />
                                        <Key frame="190" value="0" />
                                        <Key frame="215" value="0" />
                                        <Key frame="240" value="1" />
                                        <Key frame="265" value="0" />
                                        <Key frame="290" value="1" />
                                        <Key frame="315" value="0" />
                                        <Key frame="340" value="0.03" />
                                        <Key frame="365" value="0" />
                                        <Key frame="390" value="0.03" />
                                        <Key frame="415" value="0" />
                                        <Key frame="440" value="0.347743" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="40" value="-0.1" />
                                        <Key frame="240" value="-0.1" />
                                        <Key frame="290" value="-0.1" />
                                        <Key frame="440" value="9.68511" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="440" value="-5.24078" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="440" value="-9.14965" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="40" value="-3.1" />
                                        <Key frame="240" value="-3.1" />
                                        <Key frame="290" value="-3.1" />
                                        <Key frame="440" value="-5.03944" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="6.7" />
                                        <Key frame="20" value="6.7" />
                                        <Key frame="40" value="-6.7" />
                                        <Key frame="65" value="6.7" />
                                        <Key frame="90" value="-6.7" />
                                        <Key frame="115" value="6.7" />
                                        <Key frame="140" value="12.1" />
                                        <Key frame="165" value="4.4" />
                                        <Key frame="190" value="12.1" />
                                        <Key frame="215" value="6.7" />
                                        <Key frame="240" value="-6.7" />
                                        <Key frame="265" value="6.7" />
                                        <Key frame="290" value="-6.7" />
                                        <Key frame="315" value="6.7" />
                                        <Key frame="340" value="12.1" />
                                        <Key frame="365" value="6.7" />
                                        <Key frame="390" value="12.1" />
                                        <Key frame="415" value="6.7" />
                                        <Key frame="440" value="85.0714" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="3.2" />
                                        <Key frame="20" value="3.2" />
                                        <Key frame="40" value="-59.1" />
                                        <Key frame="65" value="3.2" />
                                        <Key frame="90" value="-59.1" />
                                        <Key frame="115" value="3.2" />
                                        <Key frame="140" value="-61.2" />
                                        <Key frame="165" value="3.5" />
                                        <Key frame="190" value="-61.2" />
                                        <Key frame="215" value="3.2" />
                                        <Key frame="240" value="-59.1" />
                                        <Key frame="265" value="3.2" />
                                        <Key frame="290" value="-59.1" />
                                        <Key frame="315" value="3.2" />
                                        <Key frame="340" value="-61.2" />
                                        <Key frame="365" value="3.2" />
                                        <Key frame="390" value="-61.2" />
                                        <Key frame="415" value="3.2" />
                                        <Key frame="440" value="-9.86274" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="2.3" />
                                        <Key frame="20" value="2.3" />
                                        <Key frame="65" value="2.3" />
                                        <Key frame="115" value="2.3" />
                                        <Key frame="140" value="3.5" />
                                        <Key frame="165" value="3.5" />
                                        <Key frame="190" value="3.5" />
                                        <Key frame="215" value="2.3" />
                                        <Key frame="265" value="2.3" />
                                        <Key frame="315" value="2.3" />
                                        <Key frame="340" value="3.5" />
                                        <Key frame="365" value="2.3" />
                                        <Key frame="390" value="3.5" />
                                        <Key frame="415" value="2.3" />
                                        <Key frame="440" value="8.32868" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="372" y="40">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="93" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="101" y="28">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Als nächstes werden wir unsere Brustmuskulatur dehnen! Lass uns gehen! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Als nächstes werden wir unsere Brustmuskulatur dehnen! Lass uns gehen! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="542" y="308">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="animation" id="7" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="86" y="180">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="BothArmsShowGround_LeanBack_01" id="5" localization="8" tooltip='ID : #01F 0005&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- &quot;!&quot;&#x0A;- Great!&#x0A;- Impressive&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : LeanBack&#x0A;End stance : LeanBack' x="115" y="38">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="35">
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="23" value="7.81997" />
                                                  <Key frame="35" value="6.15001" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                  <Key frame="8" value="6.98103" />
                                                  <Key frame="15" value="-8.71897" />
                                                  <Key frame="23" value="-0.827397" />
                                                  <Key frame="35" value="-0.739506" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="8" value="-8.08364" />
                                                  <Key frame="18" value="-0.964409" />
                                                  <Key frame="33" value="0.529749" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="8" value="-7.03374" />
                                                  <Key frame="18" value="-5.01224" />
                                                  <Key frame="33" value="-6.24271" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="7" value="-26.0183" />
                                                  <Key frame="19" value="-37.9716" />
                                                  <Key frame="32" value="-46.1456" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="7" value="-64.6859" />
                                                  <Key frame="19" value="-83.2311" />
                                                  <Key frame="32" value="-84.8131" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="7" value="0.6772" />
                                                  <Key frame="19" value="0.6796" />
                                                  <Key frame="32" value="0.4336" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="8" value="11.9509" />
                                                  <Key frame="18" value="23.992" />
                                                  <Key frame="33" value="20.5643" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="8" value="6.32579" />
                                                  <Key frame="18" value="3.42537" />
                                                  <Key frame="33" value="6.06212" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="8" value="-9.31412" />
                                                  <Key frame="18" value="-7.3805" />
                                                  <Key frame="33" value="-7.81997" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="8" value="11.4283" />
                                                  <Key frame="18" value="-4.91954" />
                                                  <Key frame="33" value="-5.00743" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="7" value="80.2476" />
                                                  <Key frame="19" value="82.7085" />
                                                  <Key frame="32" value="83.2359" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="7" value="-4.65585" />
                                                  <Key frame="19" value="-5.35899" />
                                                  <Key frame="32" value="-3.16169" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="7" value="-69.6078" />
                                                  <Key frame="19" value="-78.9244" />
                                                  <Key frame="32" value="-84.7252" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="8" value="-12.3951" />
                                                  <Key frame="18" value="-1.40867" />
                                                  <Key frame="33" value="-0.705531" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="8" value="8.25942" />
                                                  <Key frame="18" value="10.4567" />
                                                  <Key frame="33" value="9.31412" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="9" value="17.4002" />
                                                  <Key frame="21" value="30.1445" />
                                                  <Key frame="33" value="38.3184" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="9" value="82.3569" />
                                                  <Key frame="21" value="63.1087" />
                                                  <Key frame="33" value="60.1203" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="9" value="0.6768" />
                                                  <Key frame="21" value="0.6796" />
                                                  <Key frame="33" value="0.4328" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="8" value="9.93417" />
                                                  <Key frame="18" value="24.1726" />
                                                  <Key frame="33" value="21.448" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="8" value="-9.84628" />
                                                  <Key frame="18" value="-13.4498" />
                                                  <Key frame="33" value="-11.0768" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="8" value="-9.31412" />
                                                  <Key frame="18" value="-7.3805" />
                                                  <Key frame="33" value="-7.81997" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="8" value="17.2244" />
                                                  <Key frame="18" value="-4.74855" />
                                                  <Key frame="33" value="-4.39699" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="9" value="78.2212" />
                                                  <Key frame="21" value="81.7369" />
                                                  <Key frame="33" value="79.1002" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="9" value="5.97904" />
                                                  <Key frame="21" value="5.45169" />
                                                  <Key frame="33" value="6.68218" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="9" value="53.0011" />
                                                  <Key frame="21" value="68.9095" />
                                                  <Key frame="33" value="71.0189" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Say Text (1)" id="5" localization="8" tooltip="Say the text received on its input." x="884" y="169">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="93" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit (1)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="613" y="157">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Fertig! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Fertig! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Goto Posture" id="6" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="194" y="168">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Wait For Signals" id="3" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="371" y="197">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                  <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                  <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="14" indexofinput="2" outputowner="4" indexofoutput="4" />
                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="3" outputowner="6" indexofoutput="4" />
                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="scissors" id="8" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="723" y="57">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="scissors" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="589" y="53">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="392">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="236" y="38">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei ,vier, \nEins,zwei,drei ,vier, \nEins,zwei,drei ,vier, ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[Eins,zwei,drei ,vier, 
Eins,zwei,drei ,vier, 
Eins,zwei,drei ,vier, ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Say Text" id="5" localization="8" tooltip="Say the text received on its input." x="534" y="32">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="58" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="85" y="21">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Random Eyes" id="1" localization="8" tooltip="The color of the eyes changes randomly.&#x0A;&#x0A;Note: It is a never ending box. You have to call the onStop input to stop it." x="137" y="160">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        self.bMustStop = True

    def onInput_onStart(self):
        #self.onStopped() # activate output of the box
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        while( not self.bMustStop ):
            rRandTime = random.uniform(0.0,2.0)
            self.leds.fadeRGB("FaceLeds", 256*random.randint(0,255) + 256*256*random.randint(0,255) + random.randint(0,255), rRandTime)
            time.sleep(random.uniform(0.0,3.0))
        self.bIsRunning = False
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                          </Box>
                                          <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                                          <Link inputowner="4" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="30" value="-5.06262" />
                                        <Key frame="90" value="-5.06262" />
                                        <Key frame="150" value="-5.06262" />
                                        <Key frame="210" value="-5.06262" />
                                        <Key frame="270" value="-5.06262" />
                                        <Key frame="330" value="-5.06262" />
                                        <Key frame="392" value="-9.37779" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="30" value="6.67011e-09" />
                                        <Key frame="90" value="6.67011e-09" />
                                        <Key frame="150" value="6.67011e-09" />
                                        <Key frame="210" value="6.67011e-09" />
                                        <Key frame="270" value="6.67011e-09" />
                                        <Key frame="330" value="6.67011e-09" />
                                        <Key frame="392" value="0" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="30" value="4.61059" />
                                        <Key frame="90" value="4.61059" />
                                        <Key frame="150" value="4.61059" />
                                        <Key frame="210" value="4.61059" />
                                        <Key frame="270" value="4.61059" />
                                        <Key frame="330" value="4.61059" />
                                        <Key frame="392" value="4.53789" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="30" value="-6.91378" />
                                        <Key frame="90" value="-6.91378" />
                                        <Key frame="150" value="-6.91378" />
                                        <Key frame="210" value="-6.91378" />
                                        <Key frame="270" value="-6.91378" />
                                        <Key frame="330" value="-6.91378" />
                                        <Key frame="392" value="-5.46208" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="-23.8" />
                                        <Key frame="30" value="-24.2594" />
                                        <Key frame="45" value="-23.8" />
                                        <Key frame="60" value="-23.8" />
                                        <Key frame="75" value="-23.8" />
                                        <Key frame="90" value="-24.2594" />
                                        <Key frame="105" value="-23.8" />
                                        <Key frame="120" value="-23.8" />
                                        <Key frame="135" value="-23.8" />
                                        <Key frame="150" value="-24.2594" />
                                        <Key frame="165" value="-23.8" />
                                        <Key frame="180" value="-23.8" />
                                        <Key frame="195" value="-23.8" />
                                        <Key frame="210" value="-24.2594" />
                                        <Key frame="225" value="-23.8" />
                                        <Key frame="240" value="-23.8" />
                                        <Key frame="255" value="-23.8" />
                                        <Key frame="270" value="-24.2594" />
                                        <Key frame="285" value="-23.8" />
                                        <Key frame="300" value="-23.8" />
                                        <Key frame="315" value="-23.8" />
                                        <Key frame="330" value="-24.2594" />
                                        <Key frame="345" value="-23.8" />
                                        <Key frame="360" value="-23.8" />
                                        <Key frame="375" value="-23.8" />
                                        <Key frame="392" value="-29.3857" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="3.9" />
                                        <Key frame="30" value="-20.123" />
                                        <Key frame="45" value="3.9" />
                                        <Key frame="60" value="3.9" />
                                        <Key frame="75" value="3.9" />
                                        <Key frame="90" value="-20.123" />
                                        <Key frame="105" value="3.9" />
                                        <Key frame="120" value="3.9" />
                                        <Key frame="135" value="3.9" />
                                        <Key frame="150" value="-20.123" />
                                        <Key frame="165" value="3.9" />
                                        <Key frame="180" value="3.9" />
                                        <Key frame="195" value="3.9" />
                                        <Key frame="210" value="-20.123" />
                                        <Key frame="225" value="3.9" />
                                        <Key frame="240" value="3.9" />
                                        <Key frame="255" value="3.9" />
                                        <Key frame="270" value="-20.123" />
                                        <Key frame="285" value="3.9" />
                                        <Key frame="300" value="3.9" />
                                        <Key frame="315" value="3.9" />
                                        <Key frame="330" value="-20.123" />
                                        <Key frame="345" value="3.9" />
                                        <Key frame="360" value="3.9" />
                                        <Key frame="375" value="3.9" />
                                        <Key frame="392" value="-68.2039" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                                        <Key frame="15" value="0.01" />
                                        <Key frame="30" value="0.0202426" />
                                        <Key frame="45" value="0.01" />
                                        <Key frame="60" value="0.01" />
                                        <Key frame="75" value="0.01" />
                                        <Key frame="90" value="0.0202426" />
                                        <Key frame="105" value="0.01" />
                                        <Key frame="120" value="0.01" />
                                        <Key frame="135" value="0.01" />
                                        <Key frame="150" value="0.0202426" />
                                        <Key frame="165" value="0.01" />
                                        <Key frame="180" value="0.01" />
                                        <Key frame="195" value="0.01" />
                                        <Key frame="210" value="0.0202426" />
                                        <Key frame="225" value="0.01" />
                                        <Key frame="240" value="0.01" />
                                        <Key frame="255" value="0.01" />
                                        <Key frame="270" value="0.0202426" />
                                        <Key frame="285" value="0.01" />
                                        <Key frame="300" value="0.01" />
                                        <Key frame="315" value="0.01" />
                                        <Key frame="330" value="0.0202426" />
                                        <Key frame="345" value="0.01" />
                                        <Key frame="360" value="0.01" />
                                        <Key frame="375" value="0.01" />
                                        <Key frame="392" value="0.312648" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="30" value="7.30347" />
                                        <Key frame="90" value="7.30347" />
                                        <Key frame="150" value="7.30347" />
                                        <Key frame="210" value="7.30347" />
                                        <Key frame="270" value="7.30347" />
                                        <Key frame="330" value="7.30347" />
                                        <Key frame="392" value="9.27075" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="30" value="6.89294" />
                                        <Key frame="90" value="6.89294" />
                                        <Key frame="150" value="6.89294" />
                                        <Key frame="210" value="6.89294" />
                                        <Key frame="270" value="6.89294" />
                                        <Key frame="330" value="6.89294" />
                                        <Key frame="392" value="5.46417" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="30" value="-9.73887" />
                                        <Key frame="90" value="-9.73887" />
                                        <Key frame="150" value="-9.73887" />
                                        <Key frame="210" value="-9.73887" />
                                        <Key frame="270" value="-9.73887" />
                                        <Key frame="330" value="-9.73887" />
                                        <Key frame="392" value="-9.45242" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="30" value="-5.03944" />
                                        <Key frame="90" value="-5.03944" />
                                        <Key frame="150" value="-5.03944" />
                                        <Key frame="210" value="-5.03944" />
                                        <Key frame="270" value="-5.03944" />
                                        <Key frame="330" value="-5.03944" />
                                        <Key frame="392" value="-5.18" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="-6.4" />
                                        <Key frame="30" value="12.0634" />
                                        <Key frame="45" value="-6.4" />
                                        <Key frame="60" value="-13.2" />
                                        <Key frame="75" value="-6.4" />
                                        <Key frame="90" value="12.0634" />
                                        <Key frame="105" value="-6.4" />
                                        <Key frame="120" value="-13.2" />
                                        <Key frame="135" value="-6.4" />
                                        <Key frame="150" value="12.0634" />
                                        <Key frame="165" value="-6.4" />
                                        <Key frame="180" value="-13.2" />
                                        <Key frame="195" value="-6.4" />
                                        <Key frame="210" value="12.0634" />
                                        <Key frame="225" value="-6.4" />
                                        <Key frame="240" value="-13.2" />
                                        <Key frame="255" value="-6.4" />
                                        <Key frame="270" value="12.0634" />
                                        <Key frame="285" value="-6.4" />
                                        <Key frame="300" value="-13.2" />
                                        <Key frame="315" value="-6.4" />
                                        <Key frame="330" value="12.0634" />
                                        <Key frame="345" value="-6.4" />
                                        <Key frame="360" value="-13.2" />
                                        <Key frame="375" value="-6.4" />
                                        <Key frame="392" value="84.0058" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="23.2" />
                                        <Key frame="30" value="-18" />
                                        <Key frame="45" value="23.2" />
                                        <Key frame="60" value="-18" />
                                        <Key frame="75" value="23.2" />
                                        <Key frame="90" value="-18" />
                                        <Key frame="105" value="23.2" />
                                        <Key frame="120" value="-18" />
                                        <Key frame="135" value="23.2" />
                                        <Key frame="150" value="-18" />
                                        <Key frame="165" value="23.2" />
                                        <Key frame="180" value="-18" />
                                        <Key frame="195" value="23.2" />
                                        <Key frame="210" value="-18" />
                                        <Key frame="225" value="23.2" />
                                        <Key frame="240" value="-18" />
                                        <Key frame="255" value="23.2" />
                                        <Key frame="270" value="-18" />
                                        <Key frame="285" value="23.2" />
                                        <Key frame="300" value="-18" />
                                        <Key frame="315" value="23.2" />
                                        <Key frame="330" value="-18" />
                                        <Key frame="345" value="23.2" />
                                        <Key frame="360" value="-18" />
                                        <Key frame="375" value="23.2" />
                                        <Key frame="392" value="11.9388" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-6.2" />
                                        <Key frame="30" value="5.77518" />
                                        <Key frame="45" value="-6.2" />
                                        <Key frame="60" value="-6.2" />
                                        <Key frame="75" value="-6.2" />
                                        <Key frame="90" value="5.77518" />
                                        <Key frame="105" value="-6.2" />
                                        <Key frame="120" value="-6.2" />
                                        <Key frame="135" value="-6.2" />
                                        <Key frame="150" value="5.77518" />
                                        <Key frame="165" value="-6.2" />
                                        <Key frame="180" value="-6.2" />
                                        <Key frame="195" value="-6.2" />
                                        <Key frame="210" value="5.77518" />
                                        <Key frame="225" value="-6.2" />
                                        <Key frame="240" value="-6.2" />
                                        <Key frame="255" value="-6.2" />
                                        <Key frame="270" value="5.77518" />
                                        <Key frame="285" value="-6.2" />
                                        <Key frame="300" value="-6.2" />
                                        <Key frame="315" value="-6.2" />
                                        <Key frame="330" value="5.77518" />
                                        <Key frame="345" value="-6.2" />
                                        <Key frame="360" value="-6.2" />
                                        <Key frame="375" value="-6.2" />
                                        <Key frame="392" value="6.03572" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="30" value="5.00897" />
                                        <Key frame="90" value="5.00897" />
                                        <Key frame="150" value="5.00897" />
                                        <Key frame="210" value="5.00897" />
                                        <Key frame="270" value="5.00897" />
                                        <Key frame="330" value="5.00897" />
                                        <Key frame="392" value="4.748" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="30" value="6.08834" />
                                        <Key frame="90" value="6.08834" />
                                        <Key frame="150" value="6.08834" />
                                        <Key frame="210" value="6.08834" />
                                        <Key frame="270" value="6.08834" />
                                        <Key frame="330" value="6.08834" />
                                        <Key frame="392" value="5.82749" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="23.8" />
                                        <Key frame="30" value="24.0162" />
                                        <Key frame="45" value="23.8" />
                                        <Key frame="60" value="23.8" />
                                        <Key frame="75" value="23.8" />
                                        <Key frame="90" value="24.0162" />
                                        <Key frame="105" value="23.8" />
                                        <Key frame="120" value="23.8" />
                                        <Key frame="135" value="23.8" />
                                        <Key frame="150" value="24.0162" />
                                        <Key frame="165" value="23.8" />
                                        <Key frame="180" value="23.8" />
                                        <Key frame="195" value="23.8" />
                                        <Key frame="210" value="24.0162" />
                                        <Key frame="225" value="23.8" />
                                        <Key frame="240" value="23.8" />
                                        <Key frame="255" value="23.8" />
                                        <Key frame="270" value="24.0162" />
                                        <Key frame="285" value="23.8" />
                                        <Key frame="300" value="23.8" />
                                        <Key frame="315" value="23.8" />
                                        <Key frame="330" value="24.0162" />
                                        <Key frame="345" value="23.8" />
                                        <Key frame="360" value="23.8" />
                                        <Key frame="375" value="23.8" />
                                        <Key frame="392" value="26.698" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="-3.9" />
                                        <Key frame="30" value="-4.11029" />
                                        <Key frame="45" value="-3.9" />
                                        <Key frame="60" value="-3.9" />
                                        <Key frame="75" value="-3.9" />
                                        <Key frame="90" value="-4.11029" />
                                        <Key frame="105" value="-3.9" />
                                        <Key frame="120" value="-3.9" />
                                        <Key frame="135" value="-3.9" />
                                        <Key frame="150" value="-4.11029" />
                                        <Key frame="165" value="-3.9" />
                                        <Key frame="180" value="-3.9" />
                                        <Key frame="195" value="-3.9" />
                                        <Key frame="210" value="-4.11029" />
                                        <Key frame="225" value="-3.9" />
                                        <Key frame="240" value="-3.9" />
                                        <Key frame="255" value="-3.9" />
                                        <Key frame="270" value="-4.11029" />
                                        <Key frame="285" value="-3.9" />
                                        <Key frame="300" value="-3.9" />
                                        <Key frame="315" value="-3.9" />
                                        <Key frame="330" value="-4.11029" />
                                        <Key frame="345" value="-3.9" />
                                        <Key frame="360" value="-3.9" />
                                        <Key frame="375" value="-3.9" />
                                        <Key frame="392" value="72.0287" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="0.01" />
                                        <Key frame="30" value="0.0102522" />
                                        <Key frame="45" value="0.01" />
                                        <Key frame="60" value="0.01" />
                                        <Key frame="75" value="0.01" />
                                        <Key frame="90" value="0.0102522" />
                                        <Key frame="105" value="0.01" />
                                        <Key frame="120" value="0.01" />
                                        <Key frame="135" value="0.01" />
                                        <Key frame="150" value="0.0102522" />
                                        <Key frame="165" value="0.01" />
                                        <Key frame="180" value="0.01" />
                                        <Key frame="195" value="0.01" />
                                        <Key frame="210" value="0.0102522" />
                                        <Key frame="225" value="0.01" />
                                        <Key frame="240" value="0.01" />
                                        <Key frame="255" value="0.01" />
                                        <Key frame="270" value="0.0102522" />
                                        <Key frame="285" value="0.01" />
                                        <Key frame="300" value="0.01" />
                                        <Key frame="315" value="0.01" />
                                        <Key frame="330" value="0.0102522" />
                                        <Key frame="345" value="0.01" />
                                        <Key frame="360" value="0.01" />
                                        <Key frame="375" value="0.01" />
                                        <Key frame="392" value="0.355459" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="30" value="7.74242" />
                                        <Key frame="90" value="7.74242" />
                                        <Key frame="150" value="7.74242" />
                                        <Key frame="210" value="7.74242" />
                                        <Key frame="270" value="7.74242" />
                                        <Key frame="330" value="7.74242" />
                                        <Key frame="392" value="8.47661" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="30" value="-6.81649" />
                                        <Key frame="90" value="-6.81649" />
                                        <Key frame="150" value="-6.81649" />
                                        <Key frame="210" value="-6.81649" />
                                        <Key frame="270" value="-6.81649" />
                                        <Key frame="330" value="-6.81649" />
                                        <Key frame="392" value="-6.70618" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="30" value="-9.73887" />
                                        <Key frame="90" value="-9.73887" />
                                        <Key frame="150" value="-9.73887" />
                                        <Key frame="210" value="-9.73887" />
                                        <Key frame="270" value="-9.73887" />
                                        <Key frame="330" value="-9.73887" />
                                        <Key frame="392" value="-9.45242" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="30" value="-5.04157" />
                                        <Key frame="90" value="-5.04157" />
                                        <Key frame="150" value="-5.04157" />
                                        <Key frame="210" value="-5.04157" />
                                        <Key frame="270" value="-5.04157" />
                                        <Key frame="330" value="-5.04157" />
                                        <Key frame="392" value="-5.20116" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="-6.4" />
                                        <Key frame="30" value="-13.3589" />
                                        <Key frame="45" value="-6.4" />
                                        <Key frame="60" value="11.6" />
                                        <Key frame="75" value="-6.4" />
                                        <Key frame="90" value="-13.3589" />
                                        <Key frame="105" value="-6.4" />
                                        <Key frame="120" value="11.6" />
                                        <Key frame="135" value="-6.4" />
                                        <Key frame="150" value="-13.3589" />
                                        <Key frame="165" value="-6.4" />
                                        <Key frame="180" value="11.6" />
                                        <Key frame="195" value="-6.4" />
                                        <Key frame="210" value="-13.3589" />
                                        <Key frame="225" value="-6.4" />
                                        <Key frame="240" value="11.6" />
                                        <Key frame="255" value="-6.4" />
                                        <Key frame="270" value="-13.3589" />
                                        <Key frame="285" value="-6.4" />
                                        <Key frame="300" value="11.6" />
                                        <Key frame="315" value="-6.4" />
                                        <Key frame="330" value="-13.3589" />
                                        <Key frame="345" value="-6.4" />
                                        <Key frame="360" value="11.6" />
                                        <Key frame="375" value="-6.4" />
                                        <Key frame="392" value="83.3093" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="-23.2" />
                                        <Key frame="30" value="18" />
                                        <Key frame="45" value="-23.2" />
                                        <Key frame="60" value="18" />
                                        <Key frame="75" value="-23.2" />
                                        <Key frame="90" value="18" />
                                        <Key frame="105" value="-23.2" />
                                        <Key frame="120" value="18" />
                                        <Key frame="135" value="-23.2" />
                                        <Key frame="150" value="18" />
                                        <Key frame="165" value="-23.2" />
                                        <Key frame="180" value="18" />
                                        <Key frame="195" value="-23.2" />
                                        <Key frame="210" value="18" />
                                        <Key frame="225" value="-23.2" />
                                        <Key frame="240" value="18" />
                                        <Key frame="255" value="-23.2" />
                                        <Key frame="270" value="18" />
                                        <Key frame="285" value="-23.2" />
                                        <Key frame="300" value="18" />
                                        <Key frame="315" value="-23.2" />
                                        <Key frame="330" value="18" />
                                        <Key frame="345" value="-23.2" />
                                        <Key frame="360" value="18" />
                                        <Key frame="375" value="-23.2" />
                                        <Key frame="392" value="-11.3144" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="6.2" />
                                        <Key frame="30" value="6.2184" />
                                        <Key frame="45" value="6.2" />
                                        <Key frame="60" value="6.2" />
                                        <Key frame="75" value="6.2" />
                                        <Key frame="90" value="6.2184" />
                                        <Key frame="105" value="6.2" />
                                        <Key frame="120" value="6.2" />
                                        <Key frame="135" value="6.2" />
                                        <Key frame="150" value="6.2184" />
                                        <Key frame="165" value="6.2" />
                                        <Key frame="180" value="6.2" />
                                        <Key frame="195" value="6.2" />
                                        <Key frame="210" value="6.2184" />
                                        <Key frame="225" value="6.2" />
                                        <Key frame="240" value="6.2" />
                                        <Key frame="255" value="6.2" />
                                        <Key frame="270" value="6.2184" />
                                        <Key frame="285" value="6.2" />
                                        <Key frame="300" value="6.2" />
                                        <Key frame="315" value="6.2" />
                                        <Key frame="330" value="6.2184" />
                                        <Key frame="345" value="6.2" />
                                        <Key frame="360" value="6.2" />
                                        <Key frame="375" value="6.2" />
                                        <Key frame="392" value="7.76104" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Text Edit" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="95" y="150">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("jetzt meine Lieblingsübung!lustige Roboterschere! wiederholen nach mir!")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[jetzt meine Lieblingsübung!lustige Roboterschere! wiederholen nach mir!]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="335" y="165">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="92" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Excited" id="3" localization="8" tooltip="ID : #02A 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Excited" x="78" y="303">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="54">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="7" value="-38.5" />
                                        <Key frame="14" value="-1.4" />
                                        <Key frame="17" value="-28.8" />
                                        <Key frame="22" value="-11.2" />
                                        <Key frame="26" value="-28.8" />
                                        <Key frame="31" value="-11.2" />
                                        <Key frame="35" value="-28.8" />
                                        <Key frame="39" value="-11.2" />
                                        <Key frame="50" value="-25.2" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="7" value="-0.969218" />
                                        <Key frame="50" value="-0.969218" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="14" value="-8.17634" />
                                        <Key frame="18" value="-10.4615" />
                                        <Key frame="22" value="-8.17634" />
                                        <Key frame="26" value="-10.4615" />
                                        <Key frame="30" value="-8.17634" />
                                        <Key frame="34" value="-10.4615" />
                                        <Key frame="38" value="-8.17634" />
                                        <Key frame="42" value="-10.4615" />
                                        <Key frame="46" value="-8.17634" />
                                        <Key frame="50" value="-10.4615" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="14" value="-6.32579" />
                                        <Key frame="18" value="-6.32579" />
                                        <Key frame="22" value="-6.32579" />
                                        <Key frame="26" value="-6.32579" />
                                        <Key frame="30" value="-6.32579" />
                                        <Key frame="34" value="-6.32579" />
                                        <Key frame="38" value="-6.32579" />
                                        <Key frame="42" value="-6.32579" />
                                        <Key frame="46" value="-6.32579" />
                                        <Key frame="50" value="-6.32579" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="10" value="-85.5" />
                                        <Key frame="18" value="-85.9557" />
                                        <Key frame="22" value="-74.5" />
                                        <Key frame="26" value="-85.9557" />
                                        <Key frame="30" value="-74.5" />
                                        <Key frame="34" value="-85.9557" />
                                        <Key frame="38" value="-74.5" />
                                        <Key frame="42" value="-85.9557" />
                                        <Key frame="46" value="-74.5" />
                                        <Key frame="50" value="-85.9557" />
                                        <Key frame="54" value="-74.5" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="18" value="-81.3901" />
                                        <Key frame="26" value="-81.3901" />
                                        <Key frame="34" value="-81.3901" />
                                        <Key frame="42" value="-81.3901" />
                                        <Key frame="50" value="-81.3901" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="10" value="0.63" />
                                        <Key frame="18" value="0.27" />
                                        <Key frame="22" value="0" />
                                        <Key frame="26" value="0.24" />
                                        <Key frame="30" value="0" />
                                        <Key frame="34" value="0.28" />
                                        <Key frame="38" value="0" />
                                        <Key frame="42" value="0.26" />
                                        <Key frame="46" value="0" />
                                        <Key frame="50" value="0.24" />
                                        <Key frame="54" value="0" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="14" value="-28.0351" />
                                        <Key frame="18" value="-38.1426" />
                                        <Key frame="22" value="-28.0351" />
                                        <Key frame="26" value="-38.1426" />
                                        <Key frame="30" value="-28.0351" />
                                        <Key frame="34" value="-38.1426" />
                                        <Key frame="38" value="-28.0351" />
                                        <Key frame="42" value="-38.1426" />
                                        <Key frame="46" value="-28.0351" />
                                        <Key frame="50" value="-38.1426" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="14" value="4.3091" />
                                        <Key frame="18" value="4.3091" />
                                        <Key frame="22" value="4.3091" />
                                        <Key frame="26" value="4.3091" />
                                        <Key frame="30" value="4.3091" />
                                        <Key frame="34" value="4.3091" />
                                        <Key frame="38" value="4.3091" />
                                        <Key frame="42" value="4.3091" />
                                        <Key frame="46" value="4.3091" />
                                        <Key frame="50" value="4.3091" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="14" value="-11.7751" />
                                        <Key frame="18" value="-13.0056" />
                                        <Key frame="22" value="-11.7751" />
                                        <Key frame="26" value="-13.0056" />
                                        <Key frame="30" value="-11.7751" />
                                        <Key frame="34" value="-13.0056" />
                                        <Key frame="38" value="-11.7751" />
                                        <Key frame="42" value="-13.0056" />
                                        <Key frame="46" value="-11.7751" />
                                        <Key frame="50" value="-13.0056" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="14" value="37" />
                                        <Key frame="18" value="46.9318" />
                                        <Key frame="22" value="37" />
                                        <Key frame="26" value="46.9318" />
                                        <Key frame="30" value="37" />
                                        <Key frame="34" value="46.9318" />
                                        <Key frame="38" value="37" />
                                        <Key frame="42" value="46.9318" />
                                        <Key frame="46" value="37" />
                                        <Key frame="50" value="46.9318" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="8" value="54.2" />
                                        <Key frame="16" value="66.2" />
                                        <Key frame="20" value="69.6" />
                                        <Key frame="24" value="66.2" />
                                        <Key frame="28" value="69.6" />
                                        <Key frame="32" value="66.2" />
                                        <Key frame="36" value="69.6" />
                                        <Key frame="40" value="66.2" />
                                        <Key frame="44" value="69.6" />
                                        <Key frame="48" value="66.2" />
                                        <Key frame="52" value="69.6" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="8" value="12.8" />
                                        <Key frame="16" value="-6.3306" />
                                        <Key frame="24" value="-6.3306" />
                                        <Key frame="32" value="-6.3306" />
                                        <Key frame="40" value="-6.3306" />
                                        <Key frame="48" value="-6.3306" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="10" value="-36.1" />
                                        <Key frame="18" value="5.79845" />
                                        <Key frame="26" value="5.79845" />
                                        <Key frame="34" value="5.79845" />
                                        <Key frame="42" value="5.79845" />
                                        <Key frame="50" value="5.79845" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="14" value="-10.7204" />
                                        <Key frame="18" value="-13.3571" />
                                        <Key frame="22" value="-10.7204" />
                                        <Key frame="26" value="-13.3571" />
                                        <Key frame="30" value="-10.7204" />
                                        <Key frame="34" value="-13.3571" />
                                        <Key frame="38" value="-10.7204" />
                                        <Key frame="42" value="-13.3571" />
                                        <Key frame="46" value="-10.7204" />
                                        <Key frame="50" value="-13.3571" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="14" value="7.12163" />
                                        <Key frame="18" value="7.12163" />
                                        <Key frame="22" value="7.12163" />
                                        <Key frame="26" value="7.12163" />
                                        <Key frame="30" value="7.12163" />
                                        <Key frame="34" value="7.12163" />
                                        <Key frame="38" value="7.12163" />
                                        <Key frame="42" value="7.12163" />
                                        <Key frame="46" value="7.12163" />
                                        <Key frame="50" value="7.12163" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="10" value="85.5" />
                                        <Key frame="15" value="85.1695" />
                                        <Key frame="19" value="74.5" />
                                        <Key frame="23" value="85.1695" />
                                        <Key frame="27" value="74.5" />
                                        <Key frame="31" value="85.1695" />
                                        <Key frame="35" value="74.5" />
                                        <Key frame="39" value="85.1695" />
                                        <Key frame="43" value="74.5" />
                                        <Key frame="47" value="85.1695" />
                                        <Key frame="51" value="74.5" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="76.7271" />
                                        <Key frame="23" value="76.7271" />
                                        <Key frame="31" value="76.7271" />
                                        <Key frame="39" value="76.7271" />
                                        <Key frame="47" value="76.7271" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="10" value="0.63" />
                                        <Key frame="15" value="0.27" />
                                        <Key frame="19" value="0" />
                                        <Key frame="23" value="0.24" />
                                        <Key frame="27" value="0" />
                                        <Key frame="31" value="0.28" />
                                        <Key frame="35" value="0" />
                                        <Key frame="39" value="0.26" />
                                        <Key frame="43" value="0" />
                                        <Key frame="47" value="0.24" />
                                        <Key frame="51" value="0" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="14" value="-27.8641" />
                                        <Key frame="18" value="-38.1474" />
                                        <Key frame="22" value="-27.8641" />
                                        <Key frame="26" value="-38.1474" />
                                        <Key frame="30" value="-27.8641" />
                                        <Key frame="34" value="-38.1474" />
                                        <Key frame="38" value="-27.8641" />
                                        <Key frame="42" value="-38.1474" />
                                        <Key frame="46" value="-27.8641" />
                                        <Key frame="50" value="-38.1474" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="14" value="-4.30429" />
                                        <Key frame="18" value="-3.68905" />
                                        <Key frame="22" value="-4.30429" />
                                        <Key frame="26" value="-3.68905" />
                                        <Key frame="30" value="-4.30429" />
                                        <Key frame="34" value="-3.68905" />
                                        <Key frame="38" value="-4.30429" />
                                        <Key frame="42" value="-3.68905" />
                                        <Key frame="46" value="-4.30429" />
                                        <Key frame="50" value="-3.68905" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="14" value="-11.7751" />
                                        <Key frame="18" value="-13.0056" />
                                        <Key frame="22" value="-11.7751" />
                                        <Key frame="26" value="-13.0056" />
                                        <Key frame="30" value="-11.7751" />
                                        <Key frame="34" value="-13.0056" />
                                        <Key frame="38" value="-11.7751" />
                                        <Key frame="42" value="-13.0056" />
                                        <Key frame="46" value="-11.7751" />
                                        <Key frame="50" value="-13.0056" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="14" value="38.0595" />
                                        <Key frame="18" value="48.3428" />
                                        <Key frame="22" value="38.0595" />
                                        <Key frame="26" value="48.3428" />
                                        <Key frame="30" value="38.0595" />
                                        <Key frame="34" value="48.3428" />
                                        <Key frame="38" value="38.0595" />
                                        <Key frame="42" value="48.3428" />
                                        <Key frame="46" value="38.0595" />
                                        <Key frame="50" value="48.3428" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="8" value="54.2" />
                                        <Key frame="13" value="66.2" />
                                        <Key frame="17" value="69.6" />
                                        <Key frame="21" value="66.2" />
                                        <Key frame="25" value="69.6" />
                                        <Key frame="29" value="66.2" />
                                        <Key frame="33" value="69.6" />
                                        <Key frame="37" value="66.2" />
                                        <Key frame="41" value="69.6" />
                                        <Key frame="45" value="66.2" />
                                        <Key frame="49" value="69.6" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="8" value="-12.8" />
                                        <Key frame="13" value="4.30429" />
                                        <Key frame="21" value="4.30429" />
                                        <Key frame="29" value="4.30429" />
                                        <Key frame="37" value="4.30429" />
                                        <Key frame="45" value="4.30429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="10" value="36.1" />
                                        <Key frame="15" value="6.32579" />
                                        <Key frame="23" value="6.32579" />
                                        <Key frame="31" value="6.32579" />
                                        <Key frame="39" value="6.32579" />
                                        <Key frame="47" value="6.32579" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Wait For Signals" id="5" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="480" y="240">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                  <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                  <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                </Box>
                                <Box name="Eye LEDs" id="7" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="137" y="27">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                              <Choice value="Both" />
                                              <Choice value="Left" />
                                              <Choice value="Right" />
                                            </Parameter>
                                            <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                          </Box>
                                          <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 0])]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <color>#ffff00</color>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                            <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                          </Box>
                                          <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                          <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="440" y="56">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Goto Posture" id="6" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="285" y="341">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="14" indexofinput="2" outputowner="5" indexofoutput="4" />
                                <Link inputowner="4" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                                <Link inputowner="5" indexofinput="3" outputowner="6" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="hands up down" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="504" y="102">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="415">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="353" y="66">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="69" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="71" y="65">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei ,vier,\nEins,zwei,drei ,vier,\nEins,zwei,drei ,vier,\nEins,zwei,drei ,vier,")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Eins,zwei,drei ,vier,
Eins,zwei,drei ,vier,
Eins,zwei,drei ,vier,
Eins,zwei,drei ,vier,]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="80" value="-24.4008" />
                              <Key frame="85" value="-24.4008" />
                              <Key frame="180" value="-24.4008" />
                              <Key frame="185" value="-24.4008" />
                              <Key frame="280" value="-24.4008" />
                              <Key frame="285" value="-24.4008" />
                              <Key frame="380" value="-24.4008" />
                              <Key frame="385" value="-24.4008" />
                              <Key frame="415" value="-25.3104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="80" value="-69.1718" />
                              <Key frame="85" value="-69.1718" />
                              <Key frame="180" value="-69.1718" />
                              <Key frame="185" value="-69.1718" />
                              <Key frame="280" value="-69.1718" />
                              <Key frame="285" value="-69.1718" />
                              <Key frame="380" value="-69.1718" />
                              <Key frame="385" value="-69.1718" />
                              <Key frame="415" value="-68.2064" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="30" value="0" />
                              <Key frame="80" value="0.300961" />
                              <Key frame="85" value="0.300961" />
                              <Key frame="180" value="0.300961" />
                              <Key frame="185" value="0.300961" />
                              <Key frame="280" value="0.300961" />
                              <Key frame="285" value="0.300961" />
                              <Key frame="380" value="0.300961" />
                              <Key frame="385" value="0.300961" />
                              <Key frame="415" value="0.2848" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="30" value="103.6" />
                              <Key frame="35" value="103.6" />
                              <Key frame="80" value="-55" />
                              <Key frame="85" value="-55" />
                              <Key frame="130" value="103.6" />
                              <Key frame="135" value="103.6" />
                              <Key frame="180" value="-55" />
                              <Key frame="185" value="-55" />
                              <Key frame="230" value="103.6" />
                              <Key frame="235" value="103.6" />
                              <Key frame="280" value="-55" />
                              <Key frame="285" value="-55" />
                              <Key frame="330" value="103.6" />
                              <Key frame="335" value="103.6" />
                              <Key frame="380" value="-55" />
                              <Key frame="385" value="-55" />
                              <Key frame="415" value="85.5163" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="80" value="14.7596" />
                              <Key frame="85" value="14.7596" />
                              <Key frame="180" value="14.7596" />
                              <Key frame="185" value="14.7596" />
                              <Key frame="280" value="14.7596" />
                              <Key frame="285" value="14.7596" />
                              <Key frame="380" value="14.7596" />
                              <Key frame="385" value="14.7596" />
                              <Key frame="415" value="10.6325" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="80" value="5.81073" />
                              <Key frame="85" value="5.81073" />
                              <Key frame="180" value="5.81073" />
                              <Key frame="185" value="5.81073" />
                              <Key frame="280" value="5.81073" />
                              <Key frame="285" value="5.81073" />
                              <Key frame="380" value="5.81073" />
                              <Key frame="385" value="5.81073" />
                              <Key frame="415" value="5.53478" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="80" value="24.1014" />
                              <Key frame="85" value="24.1014" />
                              <Key frame="180" value="24.1014" />
                              <Key frame="185" value="24.1014" />
                              <Key frame="280" value="24.1014" />
                              <Key frame="285" value="24.1014" />
                              <Key frame="380" value="24.1014" />
                              <Key frame="385" value="24.1014" />
                              <Key frame="415" value="23.909" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="80" value="68.6119" />
                              <Key frame="85" value="68.6119" />
                              <Key frame="180" value="68.6119" />
                              <Key frame="185" value="68.6119" />
                              <Key frame="280" value="68.6119" />
                              <Key frame="285" value="68.6119" />
                              <Key frame="380" value="68.6119" />
                              <Key frame="385" value="68.6119" />
                              <Key frame="415" value="69.7836" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="30" value="0" />
                              <Key frame="80" value="0.308739" />
                              <Key frame="85" value="0.308739" />
                              <Key frame="180" value="0.308739" />
                              <Key frame="185" value="0.308739" />
                              <Key frame="280" value="0.308739" />
                              <Key frame="285" value="0.308739" />
                              <Key frame="380" value="0.308739" />
                              <Key frame="385" value="0.308739" />
                              <Key frame="415" value="0.338" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="30" value="-55" />
                              <Key frame="35" value="-55" />
                              <Key frame="80" value="104.7" />
                              <Key frame="85" value="104.7" />
                              <Key frame="130" value="-55" />
                              <Key frame="135" value="-55" />
                              <Key frame="180" value="104.7" />
                              <Key frame="185" value="104.7" />
                              <Key frame="230" value="-55" />
                              <Key frame="235" value="-55" />
                              <Key frame="280" value="104.7" />
                              <Key frame="285" value="104.7" />
                              <Key frame="330" value="-55" />
                              <Key frame="335" value="-55" />
                              <Key frame="380" value="104.7" />
                              <Key frame="385" value="104.7" />
                              <Key frame="415" value="84.8179" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="80" value="-10.8403" />
                              <Key frame="85" value="-10.8403" />
                              <Key frame="180" value="-10.8403" />
                              <Key frame="185" value="-10.8403" />
                              <Key frame="280" value="-10.8403" />
                              <Key frame="285" value="-10.8403" />
                              <Key frame="380" value="-10.8403" />
                              <Key frame="385" value="-10.8403" />
                              <Key frame="415" value="-10.5494" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="80" value="6.0421" />
                              <Key frame="85" value="6.0421" />
                              <Key frame="180" value="6.0421" />
                              <Key frame="185" value="6.0421" />
                              <Key frame="280" value="6.0421" />
                              <Key frame="285" value="6.0421" />
                              <Key frame="380" value="6.0421" />
                              <Key frame="385" value="6.0421" />
                              <Key frame="415" value="7.81997" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="30" value="-5.4" />
                              <Key frame="415" value="-6.4137" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="30" value="4.6" />
                              <Key frame="415" value="8.08845" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="30" value="6.1" />
                              <Key frame="415" value="5.80326" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="30" value="4.6" />
                              <Key frame="415" value="7.81997" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="30" value="-5.2" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="30" value="-1.3" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="hands front up" id="9" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="117" y="347">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="raises front up" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="173" y="36">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="20" start_frame="1" end_frame="-1" size="325">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="59.4604">
                                          <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="138" y="31">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Text Edit" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="337" y="191">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei ,vier, ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[Eins,zwei,drei ,vier, ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="734" y="192">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="67" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Delay (1)" id="3" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="142" y="175">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5.3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Delay (2)" id="4" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="131" y="326">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="9.3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Text Edit (1)" id="5" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="316" y="468">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Fertig! ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[Fertig! ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Say Text (1)" id="6" localization="8" tooltip="Say the text received on its input." x="573" y="459">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="81" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Delay (3)" id="7" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="131" y="476">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="14.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="1" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                          <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="-70.4" />
                                        <Key frame="20" value="-70.4" />
                                        <Key frame="30" value="-8.1" />
                                        <Key frame="35" value="-8.1" />
                                        <Key frame="60" value="-8.1" />
                                        <Key frame="65" value="-8.1" />
                                        <Key frame="85" value="-8.1" />
                                        <Key frame="90" value="-8.1" />
                                        <Key frame="105" value="-8.1" />
                                        <Key frame="110" value="-8.1" />
                                        <Key frame="125" value="-8.1" />
                                        <Key frame="130" value="-8.1" />
                                        <Key frame="155" value="-8.1" />
                                        <Key frame="160" value="-8.1" />
                                        <Key frame="180" value="-8.1" />
                                        <Key frame="185" value="-8.1" />
                                        <Key frame="200" value="-8.1" />
                                        <Key frame="205" value="-8.1" />
                                        <Key frame="220" value="-8.1" />
                                        <Key frame="225" value="-8.1" />
                                        <Key frame="250" value="-8.1" />
                                        <Key frame="255" value="-8.1" />
                                        <Key frame="270" value="-8.1" />
                                        <Key frame="275" value="-8.1" />
                                        <Key frame="295" value="-8.1" />
                                        <Key frame="325" value="-68.2064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                                        <Key frame="15" value="0.3" />
                                        <Key frame="20" value="0.3" />
                                        <Key frame="30" value="1" />
                                        <Key frame="35" value="1" />
                                        <Key frame="60" value="1" />
                                        <Key frame="65" value="1" />
                                        <Key frame="85" value="1" />
                                        <Key frame="90" value="1" />
                                        <Key frame="105" value="1" />
                                        <Key frame="110" value="1" />
                                        <Key frame="125" value="1" />
                                        <Key frame="130" value="1" />
                                        <Key frame="155" value="1" />
                                        <Key frame="160" value="1" />
                                        <Key frame="180" value="1" />
                                        <Key frame="185" value="1" />
                                        <Key frame="200" value="1" />
                                        <Key frame="205" value="1" />
                                        <Key frame="220" value="1" />
                                        <Key frame="225" value="1" />
                                        <Key frame="250" value="1" />
                                        <Key frame="255" value="1" />
                                        <Key frame="270" value="1" />
                                        <Key frame="275" value="1" />
                                        <Key frame="295" value="1" />
                                        <Key frame="325" value="0.3336" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="80.3" />
                                        <Key frame="20" value="80.3" />
                                        <Key frame="30" value="5" />
                                        <Key frame="35" value="5" />
                                        <Key frame="60" value="5" />
                                        <Key frame="65" value="5" />
                                        <Key frame="85" value="-65" />
                                        <Key frame="90" value="-65" />
                                        <Key frame="105" value="-65" />
                                        <Key frame="110" value="-65" />
                                        <Key frame="125" value="5" />
                                        <Key frame="130" value="5" />
                                        <Key frame="155" value="5" />
                                        <Key frame="160" value="5" />
                                        <Key frame="180" value="-65" />
                                        <Key frame="185" value="-65" />
                                        <Key frame="200" value="-65" />
                                        <Key frame="205" value="-65" />
                                        <Key frame="220" value="5" />
                                        <Key frame="225" value="5" />
                                        <Key frame="250" value="5" />
                                        <Key frame="255" value="5" />
                                        <Key frame="270" value="-65" />
                                        <Key frame="275" value="-65" />
                                        <Key frame="295" value="-65" />
                                        <Key frame="325" value="86.1315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="85" value="20.3" />
                                        <Key frame="90" value="20.3" />
                                        <Key frame="105" value="20.3" />
                                        <Key frame="110" value="20.3" />
                                        <Key frame="180" value="20.3" />
                                        <Key frame="185" value="20.3" />
                                        <Key frame="200" value="20.3" />
                                        <Key frame="205" value="20.3" />
                                        <Key frame="270" value="20.3" />
                                        <Key frame="275" value="20.3" />
                                        <Key frame="295" value="20.3" />
                                        <Key frame="325" value="10.7204" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="3.5" />
                                        <Key frame="20" value="3.5" />
                                        <Key frame="30" value="10.2" />
                                        <Key frame="35" value="10.2" />
                                        <Key frame="60" value="10.2" />
                                        <Key frame="65" value="10.2" />
                                        <Key frame="85" value="10.2" />
                                        <Key frame="90" value="10.2" />
                                        <Key frame="105" value="10.2" />
                                        <Key frame="110" value="10.2" />
                                        <Key frame="125" value="10.2" />
                                        <Key frame="130" value="10.2" />
                                        <Key frame="155" value="10.2" />
                                        <Key frame="160" value="10.2" />
                                        <Key frame="180" value="10.2" />
                                        <Key frame="185" value="10.2" />
                                        <Key frame="200" value="10.2" />
                                        <Key frame="205" value="10.2" />
                                        <Key frame="220" value="10.2" />
                                        <Key frame="225" value="10.2" />
                                        <Key frame="250" value="10.2" />
                                        <Key frame="255" value="10.2" />
                                        <Key frame="270" value="10.2" />
                                        <Key frame="275" value="10.2" />
                                        <Key frame="295" value="10.2" />
                                        <Key frame="325" value="8.25942" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="8.1" />
                                        <Key frame="20" value="8.1" />
                                        <Key frame="30" value="8.1" />
                                        <Key frame="35" value="8.1" />
                                        <Key frame="60" value="8.1" />
                                        <Key frame="65" value="8.1" />
                                        <Key frame="85" value="8.1" />
                                        <Key frame="90" value="8.1" />
                                        <Key frame="105" value="8.1" />
                                        <Key frame="110" value="8.1" />
                                        <Key frame="125" value="8.1" />
                                        <Key frame="130" value="8.1" />
                                        <Key frame="155" value="8.1" />
                                        <Key frame="160" value="8.1" />
                                        <Key frame="180" value="8.1" />
                                        <Key frame="185" value="8.1" />
                                        <Key frame="200" value="8.1" />
                                        <Key frame="205" value="8.1" />
                                        <Key frame="220" value="8.1" />
                                        <Key frame="225" value="8.1" />
                                        <Key frame="250" value="8.1" />
                                        <Key frame="255" value="8.1" />
                                        <Key frame="270" value="8.1" />
                                        <Key frame="275" value="8.1" />
                                        <Key frame="295" value="8.1" />
                                        <Key frame="325" value="74.5298" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="1" />
                                        <Key frame="20" value="1" />
                                        <Key frame="30" value="1" />
                                        <Key frame="35" value="1" />
                                        <Key frame="60" value="1" />
                                        <Key frame="65" value="1" />
                                        <Key frame="85" value="1" />
                                        <Key frame="90" value="1" />
                                        <Key frame="105" value="1" />
                                        <Key frame="110" value="1" />
                                        <Key frame="125" value="1" />
                                        <Key frame="130" value="1" />
                                        <Key frame="155" value="1" />
                                        <Key frame="160" value="1" />
                                        <Key frame="180" value="1" />
                                        <Key frame="185" value="1" />
                                        <Key frame="200" value="1" />
                                        <Key frame="205" value="1" />
                                        <Key frame="220" value="1" />
                                        <Key frame="225" value="1" />
                                        <Key frame="250" value="1" />
                                        <Key frame="255" value="1" />
                                        <Key frame="270" value="1" />
                                        <Key frame="275" value="1" />
                                        <Key frame="295" value="1" />
                                        <Key frame="325" value="0.3592" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="5" />
                                        <Key frame="20" value="5" />
                                        <Key frame="30" value="5" />
                                        <Key frame="35" value="5" />
                                        <Key frame="60" value="-64.9" />
                                        <Key frame="65" value="-64.9" />
                                        <Key frame="85" value="-65" />
                                        <Key frame="90" value="-65" />
                                        <Key frame="105" value="5" />
                                        <Key frame="110" value="5" />
                                        <Key frame="125" value="5" />
                                        <Key frame="130" value="5" />
                                        <Key frame="155" value="-65" />
                                        <Key frame="160" value="-65" />
                                        <Key frame="180" value="-65" />
                                        <Key frame="185" value="-65" />
                                        <Key frame="200" value="5" />
                                        <Key frame="205" value="5" />
                                        <Key frame="220" value="5" />
                                        <Key frame="225" value="5" />
                                        <Key frame="250" value="-65" />
                                        <Key frame="255" value="-65" />
                                        <Key frame="270" value="-65" />
                                        <Key frame="275" value="-65" />
                                        <Key frame="295" value="5" />
                                        <Key frame="325" value="84.73" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="60" value="-20.3" />
                                        <Key frame="65" value="-20.3" />
                                        <Key frame="85" value="-20.3" />
                                        <Key frame="90" value="-20.3" />
                                        <Key frame="105" value="-20.3" />
                                        <Key frame="110" value="-20.3" />
                                        <Key frame="155" value="-20.3" />
                                        <Key frame="160" value="-20.3" />
                                        <Key frame="180" value="-20.3" />
                                        <Key frame="185" value="-20.3" />
                                        <Key frame="200" value="-20.3" />
                                        <Key frame="205" value="-20.3" />
                                        <Key frame="250" value="-20.3" />
                                        <Key frame="255" value="-20.3" />
                                        <Key frame="270" value="-20.3" />
                                        <Key frame="275" value="-20.3" />
                                        <Key frame="295" value="-20.3" />
                                        <Key frame="325" value="-8.96736" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-10.2" />
                                        <Key frame="20" value="-10.2" />
                                        <Key frame="30" value="-10.2" />
                                        <Key frame="35" value="-10.2" />
                                        <Key frame="60" value="-10.2" />
                                        <Key frame="65" value="-10.2" />
                                        <Key frame="85" value="-10.2" />
                                        <Key frame="90" value="-10.2" />
                                        <Key frame="105" value="-10.2" />
                                        <Key frame="110" value="-10.2" />
                                        <Key frame="125" value="-10.2" />
                                        <Key frame="130" value="-10.2" />
                                        <Key frame="155" value="-10.2" />
                                        <Key frame="160" value="-10.2" />
                                        <Key frame="180" value="-10.2" />
                                        <Key frame="185" value="-10.2" />
                                        <Key frame="200" value="-10.2" />
                                        <Key frame="205" value="-10.2" />
                                        <Key frame="220" value="-10.2" />
                                        <Key frame="225" value="-10.2" />
                                        <Key frame="250" value="-10.2" />
                                        <Key frame="255" value="-10.2" />
                                        <Key frame="270" value="-10.2" />
                                        <Key frame="275" value="-10.2" />
                                        <Key frame="295" value="-10.2" />
                                        <Key frame="325" value="5.18321" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="682" y="45">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="394" y="24">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Exzellent! Kommen wir zu unserer nächsten Übung! ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Exzellent! Kommen wir zu unserer nächsten Übung! ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="FancyRightArmCircle_LeanRight_01" id="55" localization="8" tooltip="ID : #01E 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- What?&#x0A;- Please&#x0A;- Maybe&#x0A;&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : LeanRight" x="430" y="220">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="41">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="7" value="-3.60597" />
                                        <Key frame="12" value="6.5" />
                                        <Key frame="18" value="-3.60597" />
                                        <Key frame="41" value="-3.60597" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="38" value="-7.03374" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="38" value="-11.5114" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="-87.7" />
                                        <Key frame="27" value="-72.4" />
                                        <Key frame="35" value="-86.0436" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="38" value="6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="38" value="12.6588" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="38" value="-14.7634" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="38" value="12.3024" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="26.9" />
                                        <Key frame="27" value="8.69887" />
                                        <Key frame="35" value="10.8962" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="38" value="-8.69887" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="38" value="-7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="14" value="88.5" />
                                        <Key frame="31" value="61.1" />
                                        <Key frame="38" value="88.5" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="24" value="95.0964" />
                                        <Key frame="38" value="45.8" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="14" value="0.25" />
                                        <Key frame="24" value="1" />
                                        <Key frame="31" value="0.37" />
                                        <Key frame="38" value="0.19" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="38" value="7.81997" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="38" value="9.75839" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="38" value="-14.7634" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="38" value="11.7799" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="14" value="61" />
                                        <Key frame="38" value="89.0367" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="24" value="-1.05711" />
                                        <Key frame="38" value="12.2" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="24" value="95.448" />
                                        <Key frame="38" value="2.9" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="27" value="-77.1713" />
                                        <Key frame="35" value="-67.5033" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="27" value="0.3036" />
                                        <Key frame="35" value="0.3036" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="27" value="88.5925" />
                                        <Key frame="35" value="88.5925" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="27" value="-31.5555" />
                                        <Key frame="35" value="-13.0104" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="280" y="128">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="60" y="130">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Goto Posture (1)" id="3" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="742" y="223">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="14" indexofinput="2" outputowner="5" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="55" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="wrist rotate" id="5" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="68" y="27">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="wrist rotations" id="5" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="530" y="23">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="345">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="495" y="21">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="68" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="105" y="35">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Random Eyes" id="4" localization="8" tooltip="The color of the eyes changes randomly.&#x0A;&#x0A;Note: It is a never ending box. You have to call the onStop input to stop it." x="109" y="171">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        self.bMustStop = True

    def onInput_onStart(self):
        #self.onStopped() # activate output of the box
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        while( not self.bMustStop ):
            rRandTime = random.uniform(0.0,2.0)
            self.leds.fadeRGB("FaceLeds", 256*random.randint(0,255) + 256*256*random.randint(0,255) + random.randint(0,255), rRandTime)
            time.sleep(random.uniform(0.0,3.0))
        self.bIsRunning = False
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                          </Box>
                                          <Box name="Text Edit" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="237" y="24">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei,vier,\nEins,zwei,drei,vier,\nEins,zwei,drei,vier,")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[Eins,zwei,drei,vier,
Eins,zwei,drei,vier,
Eins,zwei,drei,vier,]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="1" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="-22.1" />
                                        <Key frame="50" value="-25.1" />
                                        <Key frame="75" value="-22.1" />
                                        <Key frame="100" value="-25.1" />
                                        <Key frame="125" value="-22.1" />
                                        <Key frame="150" value="-25.1" />
                                        <Key frame="175" value="-22.1" />
                                        <Key frame="200" value="-25.1" />
                                        <Key frame="225" value="-22.1" />
                                        <Key frame="250" value="-25.1" />
                                        <Key frame="275" value="-22.1" />
                                        <Key frame="300" value="-25.1" />
                                        <Key frame="325" value="-22.1" />
                                        <Key frame="345" value="-34.1168" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="-36.9" />
                                        <Key frame="50" value="-85.6" />
                                        <Key frame="75" value="-36.9" />
                                        <Key frame="100" value="-85.6" />
                                        <Key frame="125" value="-36.9" />
                                        <Key frame="150" value="-85.6" />
                                        <Key frame="175" value="-36.9" />
                                        <Key frame="200" value="-85.6" />
                                        <Key frame="225" value="-36.9" />
                                        <Key frame="250" value="-85.6" />
                                        <Key frame="275" value="-36.9" />
                                        <Key frame="300" value="-85.6" />
                                        <Key frame="325" value="-36.9" />
                                        <Key frame="345" value="-69.5168" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="17.7" />
                                        <Key frame="50" value="17.7" />
                                        <Key frame="75" value="17.7" />
                                        <Key frame="100" value="17.7" />
                                        <Key frame="125" value="17.7" />
                                        <Key frame="150" value="17.7" />
                                        <Key frame="175" value="17.7" />
                                        <Key frame="200" value="17.7" />
                                        <Key frame="225" value="17.7" />
                                        <Key frame="250" value="17.7" />
                                        <Key frame="275" value="17.7" />
                                        <Key frame="300" value="17.7" />
                                        <Key frame="325" value="17.7" />
                                        <Key frame="345" value="85.8432" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="1.6" />
                                        <Key frame="50" value="1.6" />
                                        <Key frame="75" value="1.6" />
                                        <Key frame="100" value="1.6" />
                                        <Key frame="125" value="1.6" />
                                        <Key frame="150" value="1.6" />
                                        <Key frame="175" value="1.6" />
                                        <Key frame="200" value="1.6" />
                                        <Key frame="225" value="1.6" />
                                        <Key frame="250" value="1.6" />
                                        <Key frame="275" value="1.6" />
                                        <Key frame="300" value="1.6" />
                                        <Key frame="325" value="1.6" />
                                        <Key frame="345" value="11.2429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="38.7" />
                                        <Key frame="50" value="-103.2" />
                                        <Key frame="75" value="38.7" />
                                        <Key frame="100" value="-103.2" />
                                        <Key frame="125" value="38.7" />
                                        <Key frame="150" value="-103.2" />
                                        <Key frame="175" value="38.7" />
                                        <Key frame="200" value="-103.2" />
                                        <Key frame="225" value="38.7" />
                                        <Key frame="250" value="-103.2" />
                                        <Key frame="275" value="38.7" />
                                        <Key frame="300" value="-103.2" />
                                        <Key frame="325" value="38.7" />
                                        <Key frame="345" value="5.82621" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="22.1" />
                                        <Key frame="50" value="25.1" />
                                        <Key frame="75" value="22.1" />
                                        <Key frame="100" value="25.1" />
                                        <Key frame="125" value="22.1" />
                                        <Key frame="150" value="25.1" />
                                        <Key frame="175" value="22.1" />
                                        <Key frame="200" value="25.1" />
                                        <Key frame="225" value="22.1" />
                                        <Key frame="250" value="25.1" />
                                        <Key frame="275" value="22.1" />
                                        <Key frame="300" value="25.1" />
                                        <Key frame="325" value="22.1" />
                                        <Key frame="345" value="30.6205" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="36.9" />
                                        <Key frame="50" value="85.6" />
                                        <Key frame="75" value="36.9" />
                                        <Key frame="100" value="85.6" />
                                        <Key frame="125" value="36.9" />
                                        <Key frame="150" value="85.6" />
                                        <Key frame="175" value="36.9" />
                                        <Key frame="200" value="85.6" />
                                        <Key frame="225" value="36.9" />
                                        <Key frame="250" value="85.6" />
                                        <Key frame="275" value="36.9" />
                                        <Key frame="300" value="85.6" />
                                        <Key frame="325" value="36.9" />
                                        <Key frame="345" value="74.8748" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="17.7" />
                                        <Key frame="50" value="17.7" />
                                        <Key frame="75" value="17.7" />
                                        <Key frame="100" value="17.7" />
                                        <Key frame="125" value="17.7" />
                                        <Key frame="150" value="17.7" />
                                        <Key frame="175" value="17.7" />
                                        <Key frame="200" value="17.7" />
                                        <Key frame="225" value="17.7" />
                                        <Key frame="250" value="17.7" />
                                        <Key frame="275" value="17.7" />
                                        <Key frame="300" value="17.7" />
                                        <Key frame="325" value="17.7" />
                                        <Key frame="345" value="85.266" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="-1.6" />
                                        <Key frame="50" value="-1.6" />
                                        <Key frame="75" value="-1.6" />
                                        <Key frame="100" value="-1.6" />
                                        <Key frame="125" value="-1.6" />
                                        <Key frame="150" value="-1.6" />
                                        <Key frame="175" value="-1.6" />
                                        <Key frame="200" value="-1.6" />
                                        <Key frame="225" value="-1.6" />
                                        <Key frame="250" value="-1.6" />
                                        <Key frame="275" value="-1.6" />
                                        <Key frame="300" value="-1.6" />
                                        <Key frame="325" value="-1.6" />
                                        <Key frame="345" value="-9.74015" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="-38.7" />
                                        <Key frame="50" value="103.2" />
                                        <Key frame="75" value="-38.7" />
                                        <Key frame="100" value="103.2" />
                                        <Key frame="125" value="-38.7" />
                                        <Key frame="150" value="103.2" />
                                        <Key frame="175" value="-38.7" />
                                        <Key frame="200" value="103.2" />
                                        <Key frame="225" value="-38.7" />
                                        <Key frame="250" value="103.2" />
                                        <Key frame="275" value="-38.7" />
                                        <Key frame="300" value="103.2" />
                                        <Key frame="325" value="-38.7" />
                                        <Key frame="345" value="8.43489" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="25" value="0" />
                                        <Key frame="345" value="-9.74028" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Say Text" id="4" localization="8" tooltip="Say the text received on its input." x="366" y="32">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="64" y="4">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Wir beginnen mit den oberen Extremitäten!  \nWir drehen unsere Handgelenke, wiederholt es nach mir!")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Wir beginnen mit den oberen Extremitäten!  
Wir drehen unsere Handgelenke, wiederholt es nach mir!]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="animation" id="2" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="91" y="290">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="BothHandsBumpWithBump_01" id="14" localization="8" tooltip="ID : #01B 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Me&#x0A;- You&#x0A;- Yourself&#x0A;- Yours&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="350" y="29">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="29">
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="10" value="-14.153" />
                                                  <Key frame="16" value="6.5" />
                                                  <Key frame="25" value="-14.153" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                                  <Key frame="10" value="-10.1978" />
                                                  <Key frame="25" value="-10.1978" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="11" value="-68.5" />
                                                  <Key frame="19" value="-53" />
                                                  <Key frame="29" value="-56.8635" smooth="1" symmetrical="1">
                                                    <Tangent side="left" interpType="bezier" abscissaParam="-3.287" ordinateParam="3.82525" />
                                                    <Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" />
                                                  </Key>
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="29" value="-52.3859" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="11" value="0.19" />
                                                  <Key frame="19" value="0.55" />
                                                  <Key frame="29" value="0.1956" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="29" value="71.4" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="19" value="5.3" />
                                                  <Key frame="29" value="-4.7" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="19" value="-51.8" />
                                                  <Key frame="29" value="0.788627" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="11" value="68.5" />
                                                  <Key frame="19" value="53" />
                                                  <Key frame="29" value="59.5051" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="29" value="44.5587" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="11" value="0.19" />
                                                  <Key frame="19" value="0.55" />
                                                  <Key frame="29" value="0.2052" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="29" value="71.4" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="19" value="-5.3" />
                                                  <Key frame="29" value="4.7" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="19" value="51.8" />
                                                  <Key frame="29" value="17.6638" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="LittleArmsBump_01" id="10" localization="8" tooltip='ID : #01E 0006&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- What?&#x0A;- &quot;?&quot;&#x0A;- Maybe&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center' x="71" y="35">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="24">
                                              <ActuatorList model="">
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                                  <Key frame="12" value="2.8" />
                                                  <Key frame="18" value="-13.8" />
                                                  <Key frame="24" value="-0.884312" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                                  <Key frame="24" value="5.2711" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                                  <Key frame="24" value="-8.96255" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                                  <Key frame="18" value="-25.2" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                                  <Key frame="24" value="-69.8763" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                                  <Key frame="18" value="0.52" />
                                                  <Key frame="24" value="0.3256" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                                  <Key frame="24" value="7.38531" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                                  <Key frame="24" value="8.5279" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                                  <Key frame="24" value="-10.193" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                                  <Key frame="24" value="-4.74855" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                                  <Key frame="24" value="82.3521" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                                  <Key frame="18" value="19.2" />
                                                  <Key frame="24" value="12.2146" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                                  <Key frame="18" value="-53.9" />
                                                  <Key frame="24" value="4.83163" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                                  <Key frame="24" value="4.92435" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                                  <Key frame="24" value="6.06693" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                                  <Key frame="18" value="25.2" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                                  <Key frame="24" value="68.9926" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                                  <Key frame="18" value="0.52" />
                                                  <Key frame="24" value="0.314" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                                  <Key frame="24" value="7.20472" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                                  <Key frame="24" value="-3.33748" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                                  <Key frame="24" value="-10.193" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                                  <Key frame="24" value="-5.09532" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                                  <Key frame="24" value="83.2359" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                                  <Key frame="18" value="-19.2" />
                                                  <Key frame="24" value="-11.692" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                                  <Key frame="18" value="53.9" />
                                                  <Key frame="24" value="6.94104" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                            <Resource name="Standing" type="Lock" timeout="1" />
                                            <Resource name="All motors" type="Lock" timeout="1" />
                                          </Box>
                                          <Box name="Delay" id="1" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="209" y="46">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="502" y="32">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                              <Choice value="Crouch" />
                                              <Choice value="LyingBack" />
                                              <Choice value="LyingBelly" />
                                              <Choice value="Sit" />
                                              <Choice value="SitRelax" />
                                              <Choice value="StandInit" />
                                              <Choice value="Stand" />
                                              <Choice value="StandZero" />
                                            </Parameter>
                                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                            <Resource name="All motors" type="Lock" timeout="0" />
                                            <Resource name="Stiffness" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="4" />
                                          <Link inputowner="7" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="3" />
                                <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="248" y="280">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="hands to 4 sides" id="10" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="318" y="165">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="235">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="427" y="12">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="58" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="91" y="18">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Eins,zwei,drei ,vier, \nEins,zwei,drei ,vier, \nEins,zwei,drei ,vier, ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Eins,zwei,drei ,vier, 
Eins,zwei,drei ,vier, 
Eins,zwei,drei ,vier, ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="3" />
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="69" value="-10.5494" />
                              <Key frame="71" value="-10.5494" />
                              <Key frame="140" value="-10.5494" />
                              <Key frame="143" value="-10.5494" />
                              <Key frame="215" value="-10.5494" />
                              <Key frame="235" value="-10.7252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="69" value="0.43705" />
                              <Key frame="71" value="0.43705" />
                              <Key frame="140" value="0.43705" />
                              <Key frame="143" value="0.43705" />
                              <Key frame="215" value="0.43705" />
                              <Key frame="235" value="0.261268" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="15" value="0" />
                              <Key frame="20" value="0" />
                              <Key frame="32" value="0" />
                              <Key frame="36" value="0" />
                              <Key frame="50" value="0" />
                              <Key frame="55" value="0" />
                              <Key frame="69" value="-0.00240423" />
                              <Key frame="71" value="-0.00240423" />
                              <Key frame="85" value="0" />
                              <Key frame="90" value="0" />
                              <Key frame="101" value="0" />
                              <Key frame="105" value="0" />
                              <Key frame="120" value="0" />
                              <Key frame="125" value="0" />
                              <Key frame="140" value="-0.266077" />
                              <Key frame="143" value="-0.266077" />
                              <Key frame="159" value="0" />
                              <Key frame="161" value="0" />
                              <Key frame="176" value="0" />
                              <Key frame="179" value="0" />
                              <Key frame="193" value="0" />
                              <Key frame="197" value="0" />
                              <Key frame="215" value="-0.529749" />
                              <Key frame="235" value="4.39218" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="69" value="-6.67737" />
                              <Key frame="71" value="-6.67737" />
                              <Key frame="140" value="-6.67737" />
                              <Key frame="143" value="-6.67737" />
                              <Key frame="215" value="-6.67737" />
                              <Key frame="235" value="-5.97423" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="69" value="-22.8494" />
                              <Key frame="71" value="-22.8494" />
                              <Key frame="140" value="-22.41" />
                              <Key frame="143" value="-22.41" />
                              <Key frame="215" value="-22.41" />
                              <Key frame="235" value="-32.4296" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="50" value="-90" />
                              <Key frame="55" value="-90" />
                              <Key frame="69" value="-90.443" />
                              <Key frame="71" value="-90.443" />
                              <Key frame="120" value="-90" />
                              <Key frame="125" value="-90" />
                              <Key frame="140" value="-90.443" />
                              <Key frame="143" value="-90.443" />
                              <Key frame="193" value="-90" />
                              <Key frame="197" value="-90" />
                              <Key frame="215" value="-90.443" />
                              <Key frame="235" value="-69.2611" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="32" value="1" />
                              <Key frame="36" value="1" />
                              <Key frame="50" value="1" />
                              <Key frame="55" value="1" />
                              <Key frame="69" value="0.9928" />
                              <Key frame="71" value="0.9928" />
                              <Key frame="101" value="1" />
                              <Key frame="105" value="1" />
                              <Key frame="120" value="1" />
                              <Key frame="125" value="1" />
                              <Key frame="140" value="0.9928" />
                              <Key frame="143" value="0.9928" />
                              <Key frame="176" value="1" />
                              <Key frame="179" value="1" />
                              <Key frame="193" value="1" />
                              <Key frame="197" value="1" />
                              <Key frame="215" value="0.9928" />
                              <Key frame="235" value="0.336" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="15" value="-8" />
                              <Key frame="20" value="-8" />
                              <Key frame="32" value="-8" />
                              <Key frame="36" value="-8" />
                              <Key frame="50" value="-8" />
                              <Key frame="55" value="-8" />
                              <Key frame="69" value="-8.08364" />
                              <Key frame="71" value="-8.08364" />
                              <Key frame="85" value="-8" />
                              <Key frame="90" value="-8" />
                              <Key frame="101" value="-8" />
                              <Key frame="105" value="-8" />
                              <Key frame="120" value="-8" />
                              <Key frame="125" value="-8" />
                              <Key frame="140" value="-8.08364" />
                              <Key frame="143" value="-8.08364" />
                              <Key frame="159" value="-8" />
                              <Key frame="161" value="-8" />
                              <Key frame="176" value="-8" />
                              <Key frame="179" value="-8" />
                              <Key frame="193" value="-8" />
                              <Key frame="197" value="-8" />
                              <Key frame="215" value="-8.34731" />
                              <Key frame="235" value="9.93417" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="15" value="6.6" />
                              <Key frame="20" value="6.6" />
                              <Key frame="32" value="6.6" />
                              <Key frame="36" value="6.6" />
                              <Key frame="50" value="6.6" />
                              <Key frame="55" value="6.6" />
                              <Key frame="69" value="6.59429" />
                              <Key frame="71" value="6.59429" />
                              <Key frame="85" value="6.6" />
                              <Key frame="90" value="6.6" />
                              <Key frame="101" value="6.6" />
                              <Key frame="105" value="6.6" />
                              <Key frame="120" value="6.6" />
                              <Key frame="125" value="6.6" />
                              <Key frame="140" value="6.59429" />
                              <Key frame="143" value="6.59429" />
                              <Key frame="159" value="6.6" />
                              <Key frame="161" value="6.6" />
                              <Key frame="176" value="6.6" />
                              <Key frame="179" value="6.6" />
                              <Key frame="193" value="6.6" />
                              <Key frame="197" value="6.6" />
                              <Key frame="215" value="6.59429" />
                              <Key frame="235" value="5.80326" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="69" value="-9.92936" />
                              <Key frame="71" value="-9.92936" />
                              <Key frame="140" value="-9.92936" />
                              <Key frame="143" value="-9.92936" />
                              <Key frame="215" value="-9.92936" />
                              <Key frame="235" value="-9.05044" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="15" value="10" />
                              <Key frame="20" value="10" />
                              <Key frame="32" value="10" />
                              <Key frame="36" value="10" />
                              <Key frame="50" value="10" />
                              <Key frame="55" value="10" />
                              <Key frame="69" value="10.1051" />
                              <Key frame="71" value="10.1051" />
                              <Key frame="85" value="10" />
                              <Key frame="90" value="10" />
                              <Key frame="101" value="10" />
                              <Key frame="105" value="10" />
                              <Key frame="120" value="10" />
                              <Key frame="125" value="10" />
                              <Key frame="140" value="10.0173" />
                              <Key frame="143" value="10.0173" />
                              <Key frame="159" value="10" />
                              <Key frame="161" value="10" />
                              <Key frame="176" value="10" />
                              <Key frame="179" value="10" />
                              <Key frame="193" value="10" />
                              <Key frame="197" value="10" />
                              <Key frame="215" value="10.1051" />
                              <Key frame="235" value="-5.10013" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="15" value="3" />
                              <Key frame="20" value="3" />
                              <Key frame="32" value="-54.6" />
                              <Key frame="36" value="-54.6" />
                              <Key frame="50" value="-17.7" />
                              <Key frame="55" value="-17.7" />
                              <Key frame="69" value="78.2" />
                              <Key frame="71" value="78.2" />
                              <Key frame="85" value="3" />
                              <Key frame="90" value="3" />
                              <Key frame="101" value="-54.6" />
                              <Key frame="105" value="-54.6" />
                              <Key frame="120" value="-17.7" />
                              <Key frame="125" value="-17.7" />
                              <Key frame="140" value="77.3423" />
                              <Key frame="143" value="77.3423" />
                              <Key frame="159" value="3" />
                              <Key frame="161" value="3" />
                              <Key frame="176" value="-54.6" />
                              <Key frame="179" value="-54.6" />
                              <Key frame="193" value="-17.7" />
                              <Key frame="197" value="-17.7" />
                              <Key frame="215" value="78.0454" />
                              <Key frame="235" value="86.1315" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="32" value="8.9" />
                              <Key frame="36" value="8.9" />
                              <Key frame="50" value="55.9" />
                              <Key frame="55" value="55.9" />
                              <Key frame="69" value="8.25942" />
                              <Key frame="71" value="8.25942" />
                              <Key frame="101" value="8.9" />
                              <Key frame="105" value="8.9" />
                              <Key frame="120" value="55.9" />
                              <Key frame="125" value="55.9" />
                              <Key frame="140" value="8.17153" />
                              <Key frame="143" value="8.17153" />
                              <Key frame="176" value="8.9" />
                              <Key frame="179" value="8.9" />
                              <Key frame="193" value="55.9" />
                              <Key frame="197" value="55.9" />
                              <Key frame="215" value="9.13833" />
                              <Key frame="235" value="10.8083" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="15" value="65.8" />
                              <Key frame="69" value="65.0375" />
                              <Key frame="71" value="65.0375" />
                              <Key frame="85" value="65.8" />
                              <Key frame="90" value="65.8" />
                              <Key frame="140" value="65.0375" />
                              <Key frame="143" value="65.0375" />
                              <Key frame="159" value="65.8" />
                              <Key frame="161" value="65.8" />
                              <Key frame="215" value="65.0375" />
                              <Key frame="235" value="5.79845" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="15" value="0" />
                              <Key frame="20" value="0" />
                              <Key frame="32" value="0" />
                              <Key frame="36" value="0" />
                              <Key frame="50" value="0" />
                              <Key frame="55" value="0" />
                              <Key frame="69" value="0.0902951" />
                              <Key frame="71" value="0.0902951" />
                              <Key frame="85" value="0" />
                              <Key frame="90" value="0" />
                              <Key frame="101" value="0" />
                              <Key frame="105" value="0" />
                              <Key frame="120" value="0" />
                              <Key frame="125" value="0" />
                              <Key frame="140" value="0.00240423" />
                              <Key frame="143" value="0.00240423" />
                              <Key frame="159" value="0" />
                              <Key frame="161" value="0" />
                              <Key frame="176" value="0" />
                              <Key frame="179" value="0" />
                              <Key frame="193" value="0" />
                              <Key frame="197" value="0" />
                              <Key frame="215" value="-0.43705" />
                              <Key frame="235" value="4.3091" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="69" value="6.24271" />
                              <Key frame="71" value="6.24271" />
                              <Key frame="140" value="6.24271" />
                              <Key frame="143" value="6.24271" />
                              <Key frame="215" value="6.24271" />
                              <Key frame="235" value="5.45169" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="69" value="22.5906" />
                              <Key frame="71" value="22.5906" />
                              <Key frame="140" value="21.7996" />
                              <Key frame="143" value="21.7996" />
                              <Key frame="215" value="21.7996" />
                              <Key frame="235" value="27.5125" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="50" value="90" />
                              <Key frame="55" value="90" />
                              <Key frame="69" value="89.6472" />
                              <Key frame="71" value="89.6472" />
                              <Key frame="120" value="90" />
                              <Key frame="125" value="90" />
                              <Key frame="140" value="89.6472" />
                              <Key frame="143" value="89.6472" />
                              <Key frame="193" value="90" />
                              <Key frame="197" value="90" />
                              <Key frame="215" value="89.6472" />
                              <Key frame="235" value="74.0903" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="32" value="1" />
                              <Key frame="36" value="1" />
                              <Key frame="50" value="1" />
                              <Key frame="55" value="1" />
                              <Key frame="69" value="0.9952" />
                              <Key frame="71" value="0.9952" />
                              <Key frame="101" value="1" />
                              <Key frame="105" value="1" />
                              <Key frame="120" value="1" />
                              <Key frame="125" value="1" />
                              <Key frame="140" value="0.9952" />
                              <Key frame="143" value="0.9952" />
                              <Key frame="176" value="1" />
                              <Key frame="179" value="1" />
                              <Key frame="193" value="1" />
                              <Key frame="197" value="1" />
                              <Key frame="215" value="0.9952" />
                              <Key frame="235" value="0.3596" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="15" value="-8" />
                              <Key frame="20" value="-8" />
                              <Key frame="32" value="-8" />
                              <Key frame="36" value="-8" />
                              <Key frame="50" value="-8" />
                              <Key frame="55" value="-8" />
                              <Key frame="69" value="-8.26423" />
                              <Key frame="71" value="-8.26423" />
                              <Key frame="85" value="-8" />
                              <Key frame="90" value="-8" />
                              <Key frame="101" value="-8" />
                              <Key frame="105" value="-8" />
                              <Key frame="120" value="-8" />
                              <Key frame="125" value="-8" />
                              <Key frame="140" value="-8.26423" />
                              <Key frame="143" value="-8.26423" />
                              <Key frame="159" value="-8" />
                              <Key frame="161" value="-8" />
                              <Key frame="176" value="-8" />
                              <Key frame="179" value="-8" />
                              <Key frame="193" value="-8" />
                              <Key frame="197" value="-8" />
                              <Key frame="215" value="-8.5279" />
                              <Key frame="235" value="9.31412" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="15" value="-6.6" />
                              <Key frame="20" value="-6.6" />
                              <Key frame="32" value="-6.6" />
                              <Key frame="36" value="-6.6" />
                              <Key frame="50" value="-6.6" />
                              <Key frame="55" value="-6.6" />
                              <Key frame="69" value="-6.32579" />
                              <Key frame="71" value="-6.32579" />
                              <Key frame="85" value="-6.6" />
                              <Key frame="90" value="-6.6" />
                              <Key frame="101" value="-6.6" />
                              <Key frame="105" value="-6.6" />
                              <Key frame="120" value="-6.6" />
                              <Key frame="125" value="-6.6" />
                              <Key frame="140" value="-6.32579" />
                              <Key frame="143" value="-6.32579" />
                              <Key frame="159" value="-6.6" />
                              <Key frame="161" value="-6.6" />
                              <Key frame="176" value="-6.6" />
                              <Key frame="179" value="-6.6" />
                              <Key frame="193" value="-6.6" />
                              <Key frame="197" value="-6.6" />
                              <Key frame="215" value="-6.32579" />
                              <Key frame="235" value="-5.53478" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="69" value="-9.92936" />
                              <Key frame="71" value="-9.92936" />
                              <Key frame="140" value="-9.92936" />
                              <Key frame="143" value="-9.92936" />
                              <Key frame="215" value="-9.92936" />
                              <Key frame="235" value="-9.05044" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="15" value="10" />
                              <Key frame="20" value="10" />
                              <Key frame="32" value="10" />
                              <Key frame="36" value="10" />
                              <Key frame="50" value="10" />
                              <Key frame="55" value="10" />
                              <Key frame="69" value="9.6705" />
                              <Key frame="71" value="9.6705" />
                              <Key frame="85" value="10" />
                              <Key frame="90" value="10" />
                              <Key frame="101" value="10" />
                              <Key frame="105" value="10" />
                              <Key frame="120" value="10" />
                              <Key frame="125" value="10" />
                              <Key frame="140" value="9.49471" />
                              <Key frame="143" value="9.49471" />
                              <Key frame="159" value="10" />
                              <Key frame="161" value="10" />
                              <Key frame="176" value="10" />
                              <Key frame="179" value="10" />
                              <Key frame="193" value="10" />
                              <Key frame="197" value="10" />
                              <Key frame="215" value="9.75839" />
                              <Key frame="235" value="-4.65585" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="15" value="3" />
                              <Key frame="20" value="3" />
                              <Key frame="32" value="-54.6" />
                              <Key frame="36" value="-54.6" />
                              <Key frame="50" value="-17.7" />
                              <Key frame="55" value="-17.7" />
                              <Key frame="69" value="78.2" />
                              <Key frame="71" value="78.2" />
                              <Key frame="85" value="3" />
                              <Key frame="90" value="3" />
                              <Key frame="101" value="-54.6" />
                              <Key frame="105" value="-54.6" />
                              <Key frame="120" value="-17.7" />
                              <Key frame="125" value="-17.7" />
                              <Key frame="140" value="77.6108" />
                              <Key frame="143" value="77.6108" />
                              <Key frame="159" value="3" />
                              <Key frame="161" value="3" />
                              <Key frame="176" value="-54.6" />
                              <Key frame="179" value="-54.6" />
                              <Key frame="193" value="-17.7" />
                              <Key frame="197" value="-17.7" />
                              <Key frame="215" value="77.6108" />
                              <Key frame="235" value="85.7847" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="32" value="-8.9" />
                              <Key frame="36" value="-8.9" />
                              <Key frame="50" value="-55.9" />
                              <Key frame="55" value="-55.9" />
                              <Key frame="69" value="-9.6705" />
                              <Key frame="71" value="-9.6705" />
                              <Key frame="101" value="-8.9" />
                              <Key frame="105" value="-8.9" />
                              <Key frame="120" value="-55.9" />
                              <Key frame="125" value="-55.9" />
                              <Key frame="140" value="-9.05525" />
                              <Key frame="143" value="-9.05525" />
                              <Key frame="176" value="-8.9" />
                              <Key frame="179" value="-8.9" />
                              <Key frame="193" value="-55.9" />
                              <Key frame="197" value="-55.9" />
                              <Key frame="215" value="-9.75839" />
                              <Key frame="235" value="-8.79157" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="15" value="-65.8" />
                              <Key frame="69" value="-64.7786" />
                              <Key frame="71" value="-64.7786" />
                              <Key frame="85" value="-65.8" />
                              <Key frame="90" value="-65.8" />
                              <Key frame="140" value="-64.7786" />
                              <Key frame="143" value="-64.7786" />
                              <Key frame="159" value="-65.8" />
                              <Key frame="161" value="-65.8" />
                              <Key frame="215" value="-64.7786" />
                              <Key frame="235" value="7.3805" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Macarena (1)" id="11" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="700" y="305">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="70.7107">
                                <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="795" y="458">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../los-del-rio_-_macarena (mp3cut.net).mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Macarena" id="3" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="600" y="390">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="432">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Twinkle" id="1" localization="8" tooltip="NAO&apos;s selected LEDs flash on and off during the time defined in parameters." x="97" y="18">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="LEDs group" inherits_from_parent="0" content_type="3" value="AllLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="5">
                                              <Choice value="AllLeds" />
                                              <Choice value="BrainLeds" />
                                              <Choice value="ChestLeds" />
                                              <Choice value="EarLeds" />
                                              <Choice value="FaceLeds" />
                                              <Choice value="FeetLeds" />
                                              <Choice value="LeftEarLeds" />
                                              <Choice value="LeftFaceLeds" />
                                              <Choice value="LeftFootLeds" />
                                              <Choice value="RightEarLeds" />
                                              <Choice value="RightFaceLeds" />
                                              <Choice value="RightFootLeds" />
                                            </Parameter>
                                            <Parameter name="Time to flash on (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                            <Parameter name="Time to flash off (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="7" />
                                            <Parameter name="Animation duration (s)" inherits_from_parent="0" content_type="2" value="10" default_value="10" min="0.1" max="5000" tooltip="Duration of the animation of LEDs." id="8" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Set LEDs" id="3" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="176" y="119">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., self.getParameter("Time to flash on (s)"))
        self.onReady() # activate output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                      <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                      <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                                        <Choice value="AllLeds" />
                                                        <Choice value="BrainLeds" />
                                                        <Choice value="ChestLeds" />
                                                        <Choice value="EarLeds" />
                                                        <Choice value="FaceLeds" />
                                                        <Choice value="FeetLeds" />
                                                        <Choice value="LeftEarLeds" />
                                                        <Choice value="LeftFaceLeds" />
                                                        <Choice value="LeftFootLeds" />
                                                        <Choice value="RightEarLeds" />
                                                        <Choice value="RightFaceLeds" />
                                                        <Choice value="RightFootLeds" />
                                                      </Parameter>
                                                      <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                                      <Parameter name="Time to flash on (s)" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                                    </Box>
                                                    <Box name="Set LEDs" id="1" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="180" y="262">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., self.getParameter("Time to flash off (s)"))
        self.onReady() # activate output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                      <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                      <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                                        <Choice value="AllLeds" />
                                                        <Choice value="BrainLeds" />
                                                        <Choice value="ChestLeds" />
                                                        <Choice value="EarLeds" />
                                                        <Choice value="FaceLeds" />
                                                        <Choice value="FeetLeds" />
                                                        <Choice value="LeftEarLeds" />
                                                        <Choice value="LeftFaceLeds" />
                                                        <Choice value="LeftFootLeds" />
                                                        <Choice value="RightEarLeds" />
                                                        <Choice value="RightFaceLeds" />
                                                        <Choice value="RightFootLeds" />
                                                      </Parameter>
                                                      <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                                      <Parameter name="Time to flash off (s)" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                                    </Box>
                                                    <Box name="Wait" id="2" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="172" y="16">
                                                      <bitmap>media/images/box/wait.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Animation duration (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                      <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                      <Parameter name="Animation duration (s)" inherits_from_parent="1" content_type="2" value="10" default_value="10" min="0.1" max="5000" tooltip="Duration of the animation of LEDs." id="5" />
                                                    </Box>
                                                    <Box name="Set LEDs" id="4" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="308" y="12">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., 0.1)
        self.onReady() # activate output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                      <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                      <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                                        <Choice value="AllLeds" />
                                                        <Choice value="BrainLeds" />
                                                        <Choice value="ChestLeds" />
                                                        <Choice value="EarLeds" />
                                                        <Choice value="FaceLeds" />
                                                        <Choice value="FeetLeds" />
                                                        <Choice value="LeftEarLeds" />
                                                        <Choice value="LeftFaceLeds" />
                                                        <Choice value="LeftFootLeds" />
                                                        <Choice value="RightEarLeds" />
                                                        <Choice value="RightFaceLeds" />
                                                        <Choice value="RightFootLeds" />
                                                      </Parameter>
                                                      <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                                    </Box>
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Random Eyes" id="2" localization="8" tooltip="The color of the eyes changes randomly.&#x0A;&#x0A;Note: It is a never ending box. You have to call the onStop input to stop it." x="104" y="143">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        self.bMustStop = True

    def onInput_onStart(self):
        #self.onStopped() # activate output of the box
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        while( not self.bMustStop ):
            rRandTime = random.uniform(0.0,2.0)
            self.leds.fadeRGB("FaceLeds", 256*random.randint(0,255) + 256*256*random.randint(0,255) + random.randint(0,255), rRandTime)
            time.sleep(random.uniform(0.0,3.0))
        self.bIsRunning = False
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="25" value="-13.6256" />
                                        <Key frame="49" value="-0.353968" />
                                        <Key frame="69" value="3.68905" />
                                        <Key frame="87" value="3.68905" />
                                        <Key frame="104" value="3.68905" />
                                        <Key frame="127" value="3.68905" />
                                        <Key frame="148" value="3.68905" />
                                        <Key frame="163" value="8.78677" />
                                        <Key frame="178" value="8.78677" />
                                        <Key frame="191" value="-10.901" />
                                        <Key frame="209" value="-5.97904" />
                                        <Key frame="227" value="-16.3503" />
                                        <Key frame="260" value="0.349159" />
                                        <Key frame="292" value="7.90786" />
                                        <Key frame="319" value="12.7419" />
                                        <Key frame="341" value="12.7419" />
                                        <Key frame="360" value="4.2164" />
                                        <Key frame="378" value="16.8728" />
                                        <Key frame="400" value="-13.0104" />
                                        <Key frame="432" value="-13.6256" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="25" value="-0.00240423" />
                                        <Key frame="49" value="-17.9323" />
                                        <Key frame="69" value="17.9275" />
                                        <Key frame="87" value="-13.362" />
                                        <Key frame="104" value="18.1033" />
                                        <Key frame="127" value="18.1033" />
                                        <Key frame="148" value="-10.3736" />
                                        <Key frame="163" value="-20.2175" />
                                        <Key frame="178" value="-20.2175" />
                                        <Key frame="191" value="-13.4498" />
                                        <Key frame="209" value="12.1267" />
                                        <Key frame="227" value="30.6718" />
                                        <Key frame="260" value="17.6638" />
                                        <Key frame="292" value="1.40386" />
                                        <Key frame="319" value="-15.2956" />
                                        <Key frame="341" value="31.5507" />
                                        <Key frame="360" value="-6.85796" />
                                        <Key frame="378" value="28.7382" />
                                        <Key frame="400" value="-27.0731" />
                                        <Key frame="432" value="-0.00240423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="25" value="5.53478" />
                                        <Key frame="49" value="5.53478" />
                                        <Key frame="69" value="5.44688" />
                                        <Key frame="87" value="5.44688" />
                                        <Key frame="104" value="5.53478" />
                                        <Key frame="127" value="5.53478" />
                                        <Key frame="148" value="5.44688" />
                                        <Key frame="260" value="5.53478" />
                                        <Key frame="292" value="5.62267" />
                                        <Key frame="319" value="5.53478" />
                                        <Key frame="341" value="5.53478" />
                                        <Key frame="360" value="5.53478" />
                                        <Key frame="378" value="-10.901" />
                                        <Key frame="400" value="-28.0399" />
                                        <Key frame="432" value="5.62267" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="25" value="-6.67737" />
                                        <Key frame="49" value="-6.67737" />
                                        <Key frame="69" value="-6.67737" />
                                        <Key frame="87" value="-6.67737" />
                                        <Key frame="104" value="-6.67737" />
                                        <Key frame="127" value="-6.67737" />
                                        <Key frame="148" value="-6.67737" />
                                        <Key frame="260" value="-6.67737" />
                                        <Key frame="292" value="-6.58948" />
                                        <Key frame="319" value="-6.67737" />
                                        <Key frame="341" value="-6.67737" />
                                        <Key frame="360" value="-14.4118" />
                                        <Key frame="378" value="3.34228" />
                                        <Key frame="400" value="-12.1267" />
                                        <Key frame="432" value="-6.58948" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="-22.41" />
                                        <Key frame="49" value="-22.41" />
                                        <Key frame="69" value="-23.2889" />
                                        <Key frame="87" value="-23.2889" />
                                        <Key frame="104" value="-23.2889" />
                                        <Key frame="116" value="-23.2889" />
                                        <Key frame="127" value="-23.2889" />
                                        <Key frame="138" value="-58.094" />
                                        <Key frame="148" value="-53.1721" />
                                        <Key frame="163" value="-53.5237" />
                                        <Key frame="178" value="-53.5237" />
                                        <Key frame="191" value="-53.5237" />
                                        <Key frame="209" value="-44.8224" />
                                        <Key frame="227" value="-82.7037" />
                                        <Key frame="260" value="-82.7037" />
                                        <Key frame="292" value="-24.6073" />
                                        <Key frame="319" value="-24.9589" />
                                        <Key frame="332" value="-58.2698" />
                                        <Key frame="341" value="-80.1549" />
                                        <Key frame="360" value="-81.4732" />
                                        <Key frame="378" value="-81.4732" />
                                        <Key frame="400" value="-87.6256" />
                                        <Key frame="417" value="-23.7284" />
                                        <Key frame="432" value="-23.9041" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="-69.8763" />
                                        <Key frame="49" value="-69.8763" />
                                        <Key frame="69" value="-69.0853" />
                                        <Key frame="87" value="-69.0853" />
                                        <Key frame="104" value="-82.2691" />
                                        <Key frame="116" value="-82.2691" />
                                        <Key frame="127" value="-82.2691" />
                                        <Key frame="138" value="-71.0189" />
                                        <Key frame="148" value="-0.705531" />
                                        <Key frame="163" value="-0.353968" />
                                        <Key frame="178" value="-0.353968" />
                                        <Key frame="191" value="-0.61764" />
                                        <Key frame="209" value="-77.1713" />
                                        <Key frame="227" value="-56.341" />
                                        <Key frame="260" value="-56.341" />
                                        <Key frame="292" value="12.3024" />
                                        <Key frame="319" value="11.7751" />
                                        <Key frame="332" value="4.30429" />
                                        <Key frame="341" value="-0.00240423" />
                                        <Key frame="360" value="-0.969218" />
                                        <Key frame="378" value="-0.969218" />
                                        <Key frame="400" value="-13.6256" />
                                        <Key frame="417" value="-73.4799" />
                                        <Key frame="432" value="-67.9427" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="25" value="0.3056" />
                                        <Key frame="49" value="0.3056" />
                                        <Key frame="69" value="0.8488" />
                                        <Key frame="87" value="0.8484" />
                                        <Key frame="104" value="0.8484" />
                                        <Key frame="116" value="0.8484" />
                                        <Key frame="127" value="0.8488" />
                                        <Key frame="138" value="0.8484" />
                                        <Key frame="148" value="0.8488" />
                                        <Key frame="163" value="0.8488" />
                                        <Key frame="178" value="0.8488" />
                                        <Key frame="191" value="0.8488" />
                                        <Key frame="209" value="0.8484" />
                                        <Key frame="227" value="0.8484" />
                                        <Key frame="260" value="0.8488" />
                                        <Key frame="292" value="0.8484" />
                                        <Key frame="319" value="0.8468" />
                                        <Key frame="332" value="0.8468" />
                                        <Key frame="341" value="0.8468" />
                                        <Key frame="360" value="0.8484" />
                                        <Key frame="378" value="0.8484" />
                                        <Key frame="400" value="0.8472" />
                                        <Key frame="417" value="0.3056" />
                                        <Key frame="432" value="0.3056" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="25" value="7.82477" />
                                        <Key frame="49" value="7.73688" />
                                        <Key frame="69" value="7.64898" />
                                        <Key frame="87" value="7.82477" />
                                        <Key frame="104" value="7.73688" />
                                        <Key frame="127" value="7.73688" />
                                        <Key frame="148" value="7.73688" />
                                        <Key frame="260" value="7.73688" />
                                        <Key frame="292" value="7.73688" />
                                        <Key frame="319" value="7.82477" />
                                        <Key frame="341" value="7.82477" />
                                        <Key frame="360" value="9.31893" />
                                        <Key frame="378" value="2.46338" />
                                        <Key frame="400" value="-30.6718" />
                                        <Key frame="432" value="8.08845" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="25" value="6.59429" />
                                        <Key frame="49" value="6.59429" />
                                        <Key frame="69" value="6.59429" />
                                        <Key frame="87" value="6.59429" />
                                        <Key frame="104" value="6.59429" />
                                        <Key frame="127" value="6.59429" />
                                        <Key frame="148" value="6.59429" />
                                        <Key frame="260" value="6.59429" />
                                        <Key frame="292" value="6.59429" />
                                        <Key frame="319" value="6.59429" />
                                        <Key frame="341" value="6.59429" />
                                        <Key frame="360" value="17.9323" />
                                        <Key frame="378" value="-14.9392" />
                                        <Key frame="400" value="24.7" />
                                        <Key frame="432" value="6.5064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="25" value="-9.92936" />
                                        <Key frame="49" value="-9.92936" />
                                        <Key frame="69" value="-9.92936" />
                                        <Key frame="87" value="-10.0173" />
                                        <Key frame="104" value="-10.0173" />
                                        <Key frame="127" value="-9.92936" />
                                        <Key frame="148" value="-9.92936" />
                                        <Key frame="260" value="-9.92936" />
                                        <Key frame="292" value="-9.92936" />
                                        <Key frame="319" value="-9.92936" />
                                        <Key frame="341" value="-9.92936" />
                                        <Key frame="360" value="-9.84147" />
                                        <Key frame="378" value="-13.7966" />
                                        <Key frame="400" value="-33.0449" />
                                        <Key frame="432" value="-9.92936" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="25" value="-5.18802" />
                                        <Key frame="49" value="-5.18802" />
                                        <Key frame="69" value="-5.27591" />
                                        <Key frame="87" value="-5.29" />
                                        <Key frame="104" value="-5.27591" />
                                        <Key frame="127" value="-5.27591" />
                                        <Key frame="148" value="-5.27591" />
                                        <Key frame="260" value="-5.18802" />
                                        <Key frame="292" value="-5.18802" />
                                        <Key frame="319" value="-5.10013" />
                                        <Key frame="341" value="-5.18802" />
                                        <Key frame="360" value="-5.27591" />
                                        <Key frame="378" value="24.2557" />
                                        <Key frame="400" value="76.5513" />
                                        <Key frame="432" value="-5.27591" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="85.5163" />
                                        <Key frame="49" value="85.5163" />
                                        <Key frame="69" value="22.7616" />
                                        <Key frame="87" value="22.7616" />
                                        <Key frame="104" value="24.7831" />
                                        <Key frame="116" value="24.7831" />
                                        <Key frame="127" value="24.871" />
                                        <Key frame="138" value="13.7087" />
                                        <Key frame="148" value="4.12851" />
                                        <Key frame="163" value="7.46839" />
                                        <Key frame="178" value="9.05044" />
                                        <Key frame="191" value="5.44688" />
                                        <Key frame="209" value="12.8298" />
                                        <Key frame="227" value="-39.5537" />
                                        <Key frame="260" value="-39.5537" />
                                        <Key frame="292" value="35.6816" />
                                        <Key frame="319" value="37.9668" />
                                        <Key frame="332" value="52.7326" />
                                        <Key frame="341" value="81.9127" />
                                        <Key frame="360" value="81.2974" />
                                        <Key frame="378" value="81.3853" />
                                        <Key frame="400" value="65.4769" />
                                        <Key frame="417" value="82.0885" />
                                        <Key frame="432" value="86.2194" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="7.46839" />
                                        <Key frame="49" value="7.46839" />
                                        <Key frame="69" value="0.788627" />
                                        <Key frame="87" value="0.788627" />
                                        <Key frame="104" value="0.612832" />
                                        <Key frame="116" value="0.612832" />
                                        <Key frame="127" value="0.612832" />
                                        <Key frame="138" value="-8.44001" />
                                        <Key frame="148" value="-15.9987" />
                                        <Key frame="163" value="-14.153" />
                                        <Key frame="178" value="-14.2409" />
                                        <Key frame="191" value="-14.153" />
                                        <Key frame="209" value="-4.04543" />
                                        <Key frame="227" value="17.4002" />
                                        <Key frame="260" value="17.3123" />
                                        <Key frame="292" value="-18" />
                                        <Key frame="319" value="-15.2956" />
                                        <Key frame="332" value="21.5311" />
                                        <Key frame="341" value="42.4493" />
                                        <Key frame="360" value="44.7345" />
                                        <Key frame="378" value="44.2071" />
                                        <Key frame="400" value="38.9336" />
                                        <Key frame="417" value="19.3338" />
                                        <Key frame="432" value="7.46839" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="8.4352" />
                                        <Key frame="49" value="8.25942" />
                                        <Key frame="69" value="65.6527" />
                                        <Key frame="87" value="65.6527" />
                                        <Key frame="104" value="-101.342" />
                                        <Key frame="116" value="-101.342" />
                                        <Key frame="127" value="-101.254" />
                                        <Key frame="138" value="-44.5635" />
                                        <Key frame="148" value="-15.9108" />
                                        <Key frame="163" value="-17.7565" />
                                        <Key frame="178" value="-17.6686" />
                                        <Key frame="191" value="-17.6686" />
                                        <Key frame="209" value="-17.3171" />
                                        <Key frame="227" value="-48.5186" />
                                        <Key frame="260" value="-48.5186" />
                                        <Key frame="292" value="-26.4578" />
                                        <Key frame="319" value="-27.8641" />
                                        <Key frame="332" value="-41.9268" />
                                        <Key frame="341" value="-51.6827" />
                                        <Key frame="360" value="-52.7374" />
                                        <Key frame="378" value="-52.7374" />
                                        <Key frame="400" value="-22.1511" />
                                        <Key frame="417" value="5.2711" />
                                        <Key frame="432" value="5.09532" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="25" value="5.89115" />
                                        <Key frame="49" value="5.89115" />
                                        <Key frame="69" value="5.80326" />
                                        <Key frame="87" value="5.80326" />
                                        <Key frame="104" value="5.80326" />
                                        <Key frame="127" value="5.89115" />
                                        <Key frame="148" value="5.89115" />
                                        <Key frame="260" value="5.80326" />
                                        <Key frame="292" value="5.97904" />
                                        <Key frame="319" value="5.89115" />
                                        <Key frame="341" value="5.89115" />
                                        <Key frame="360" value="-5.44688" />
                                        <Key frame="378" value="-21.0037" />
                                        <Key frame="400" value="-37.4395" />
                                        <Key frame="432" value="6.06693" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="25" value="4.22121" />
                                        <Key frame="49" value="4.3091" />
                                        <Key frame="69" value="4.22121" />
                                        <Key frame="87" value="4.3091" />
                                        <Key frame="104" value="4.3091" />
                                        <Key frame="127" value="4.22121" />
                                        <Key frame="148" value="4.3091" />
                                        <Key frame="260" value="4.22121" />
                                        <Key frame="292" value="4.13332" />
                                        <Key frame="319" value="4.22121" />
                                        <Key frame="341" value="4.22121" />
                                        <Key frame="360" value="0.441859" />
                                        <Key frame="378" value="22.4148" />
                                        <Key frame="400" value="1.23289" />
                                        <Key frame="432" value="4.13332" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="22.3269" />
                                        <Key frame="49" value="23.03" />
                                        <Key frame="69" value="23.03" />
                                        <Key frame="87" value="23.9968" />
                                        <Key frame="104" value="23.9968" />
                                        <Key frame="116" value="70.14" />
                                        <Key frame="127" value="68.9974" />
                                        <Key frame="138" value="64.8665" />
                                        <Key frame="148" value="64.7786" />
                                        <Key frame="163" value="17.1413" />
                                        <Key frame="178" value="39.2021" />
                                        <Key frame="191" value="88.4215" />
                                        <Key frame="209" value="87.8941" />
                                        <Key frame="227" value="87.8062" />
                                        <Key frame="260" value="39.0263" />
                                        <Key frame="292" value="39.0263" />
                                        <Key frame="319" value="77.2592" />
                                        <Key frame="332" value="73.4799" />
                                        <Key frame="341" value="73.5678" />
                                        <Key frame="360" value="74.2709" />
                                        <Key frame="378" value="74.183" />
                                        <Key frame="400" value="72.7768" />
                                        <Key frame="417" value="23.909" />
                                        <Key frame="432" value="23.9968" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="67.4106" />
                                        <Key frame="49" value="66.1801" />
                                        <Key frame="69" value="66.1801" />
                                        <Key frame="87" value="105.028" />
                                        <Key frame="104" value="104.94" />
                                        <Key frame="116" value="72.4204" />
                                        <Key frame="127" value="8.08364" />
                                        <Key frame="138" value="-0.881327" />
                                        <Key frame="148" value="-0.881327" />
                                        <Key frame="163" value="-41.2236" />
                                        <Key frame="178" value="76.5513" />
                                        <Key frame="191" value="62.2249" />
                                        <Key frame="209" value="62.5765" />
                                        <Key frame="227" value="62.5765" />
                                        <Key frame="260" value="-5.27591" />
                                        <Key frame="292" value="-5.27591" />
                                        <Key frame="319" value="-16.4382" />
                                        <Key frame="332" value="-14.4166" />
                                        <Key frame="341" value="-13.7135" />
                                        <Key frame="360" value="-12.483" />
                                        <Key frame="378" value="-12.7467" />
                                        <Key frame="400" value="-11.0768" />
                                        <Key frame="417" value="67.4984" />
                                        <Key frame="432" value="66.6195" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="25" value="0.31" />
                                        <Key frame="49" value="0.9304" />
                                        <Key frame="69" value="0.9304" />
                                        <Key frame="87" value="0.9304" />
                                        <Key frame="104" value="0.9304" />
                                        <Key frame="116" value="0.9304" />
                                        <Key frame="127" value="0.02" />
                                        <Key frame="138" value="0.49" />
                                        <Key frame="148" value="0.9304" />
                                        <Key frame="163" value="0.9304" />
                                        <Key frame="178" value="0.9304" />
                                        <Key frame="191" value="0.9304" />
                                        <Key frame="209" value="0.9304" />
                                        <Key frame="227" value="0.9304" />
                                        <Key frame="260" value="0.9304" />
                                        <Key frame="292" value="0.9304" />
                                        <Key frame="319" value="0.9284" />
                                        <Key frame="332" value="0.9284" />
                                        <Key frame="341" value="0.9284" />
                                        <Key frame="360" value="0.9304" />
                                        <Key frame="378" value="0.9304" />
                                        <Key frame="400" value="0.9284" />
                                        <Key frame="417" value="0.3096" />
                                        <Key frame="432" value="0.3064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="25" value="7.55628" />
                                        <Key frame="49" value="7.55628" />
                                        <Key frame="69" value="7.46839" />
                                        <Key frame="87" value="7.55628" />
                                        <Key frame="104" value="7.55628" />
                                        <Key frame="127" value="7.55628" />
                                        <Key frame="148" value="7.3805" />
                                        <Key frame="260" value="7.46839" />
                                        <Key frame="292" value="7.55628" />
                                        <Key frame="319" value="7.55628" />
                                        <Key frame="341" value="7.55628" />
                                        <Key frame="360" value="7.64417" />
                                        <Key frame="378" value="7.55628" />
                                        <Key frame="400" value="-4.39699" />
                                        <Key frame="432" value="7.46839" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="25" value="-3.68905" />
                                        <Key frame="49" value="-3.68905" />
                                        <Key frame="69" value="-3.68905" />
                                        <Key frame="87" value="-3.68905" />
                                        <Key frame="104" value="-3.68905" />
                                        <Key frame="127" value="-3.68905" />
                                        <Key frame="148" value="-3.68905" />
                                        <Key frame="260" value="-3.68905" />
                                        <Key frame="292" value="-3.68905" />
                                        <Key frame="319" value="-3.68905" />
                                        <Key frame="341" value="-3.68905" />
                                        <Key frame="360" value="2.63916" />
                                        <Key frame="378" value="-38.4942" />
                                        <Key frame="400" value="4.39699" />
                                        <Key frame="432" value="-3.77694" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="25" value="-9.92936" />
                                        <Key frame="49" value="-9.92936" />
                                        <Key frame="69" value="-9.92936" />
                                        <Key frame="87" value="-10.0173" />
                                        <Key frame="104" value="-10.0173" />
                                        <Key frame="127" value="-9.92936" />
                                        <Key frame="148" value="-9.92936" />
                                        <Key frame="260" value="-9.92936" />
                                        <Key frame="292" value="-9.92936" />
                                        <Key frame="319" value="-9.92936" />
                                        <Key frame="341" value="-9.92936" />
                                        <Key frame="360" value="-9.84147" />
                                        <Key frame="378" value="-13.7966" />
                                        <Key frame="400" value="-33.0449" />
                                        <Key frame="432" value="-9.92936" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="25" value="-5.2711" />
                                        <Key frame="49" value="-5.2711" />
                                        <Key frame="69" value="-5.29" />
                                        <Key frame="87" value="-5.29" />
                                        <Key frame="104" value="-5.29" />
                                        <Key frame="127" value="-5.29" />
                                        <Key frame="148" value="-5.2711" />
                                        <Key frame="260" value="-5.2711" />
                                        <Key frame="292" value="-5.2711" />
                                        <Key frame="319" value="-5.2711" />
                                        <Key frame="341" value="-5.2711" />
                                        <Key frame="360" value="7.56109" />
                                        <Key frame="378" value="26.1063" />
                                        <Key frame="400" value="66.8001" />
                                        <Key frame="432" value="-5.29" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="85.6968" />
                                        <Key frame="49" value="26.6336" />
                                        <Key frame="69" value="26.7215" />
                                        <Key frame="87" value="26.5457" />
                                        <Key frame="104" value="26.5457" />
                                        <Key frame="116" value="25.6668" />
                                        <Key frame="127" value="19.8659" />
                                        <Key frame="138" value="29.7098" />
                                        <Key frame="148" value="31.9071" />
                                        <Key frame="163" value="37.6201" />
                                        <Key frame="178" value="28.2156" />
                                        <Key frame="191" value="-35.5937" />
                                        <Key frame="209" value="-32.8691" />
                                        <Key frame="227" value="-32.8691" />
                                        <Key frame="260" value="58.4504" />
                                        <Key frame="292" value="58.5383" />
                                        <Key frame="319" value="62.4055" />
                                        <Key frame="332" value="62.2297" />
                                        <Key frame="341" value="67.2396" />
                                        <Key frame="360" value="67.679" />
                                        <Key frame="378" value="67.679" />
                                        <Key frame="400" value="66.4486" />
                                        <Key frame="417" value="79.0171" />
                                        <Key frame="432" value="85.2574" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="-5.45169" />
                                        <Key frame="49" value="4.39218" />
                                        <Key frame="69" value="4.39218" />
                                        <Key frame="87" value="9.48991" />
                                        <Key frame="104" value="9.48991" />
                                        <Key frame="116" value="18" />
                                        <Key frame="127" value="18" />
                                        <Key frame="138" value="18" />
                                        <Key frame="148" value="18" />
                                        <Key frame="163" value="-9.23104" />
                                        <Key frame="178" value="-13.6256" />
                                        <Key frame="191" value="-14.944" />
                                        <Key frame="209" value="-14.5924" />
                                        <Key frame="227" value="-14.944" />
                                        <Key frame="260" value="17.5759" />
                                        <Key frame="292" value="17.4002" />
                                        <Key frame="319" value="-34.8954" />
                                        <Key frame="332" value="-34.9833" />
                                        <Key frame="341" value="-34.9833" />
                                        <Key frame="360" value="-36.5654" />
                                        <Key frame="378" value="-36.6533" />
                                        <Key frame="400" value="-36.1259" />
                                        <Key frame="417" value="-18.2839" />
                                        <Key frame="432" value="-5.89115" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="3.33748" />
                                        <Key frame="49" value="-66.3607" />
                                        <Key frame="69" value="-66.3607" />
                                        <Key frame="87" value="68.5531" />
                                        <Key frame="104" value="68.5531" />
                                        <Key frame="116" value="32.166" />
                                        <Key frame="127" value="4.48007" />
                                        <Key frame="138" value="1.49175" />
                                        <Key frame="148" value="1.57965" />
                                        <Key frame="163" value="36.0332" />
                                        <Key frame="178" value="-20.1296" />
                                        <Key frame="191" value="55.9846" />
                                        <Key frame="209" value="55.0178" />
                                        <Key frame="227" value="55.0178" />
                                        <Key frame="260" value="39.8125" />
                                        <Key frame="292" value="39.8125" />
                                        <Key frame="319" value="54.1389" />
                                        <Key frame="332" value="48.6017" />
                                        <Key frame="341" value="48.5138" />
                                        <Key frame="360" value="47.2834" />
                                        <Key frame="378" value="47.2834" />
                                        <Key frame="400" value="46.5802" />
                                        <Key frame="417" value="2.28279" />
                                        <Key frame="432" value="7.55628" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Thank you" id="5" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="855" y="245">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Pos: Bow" id="4" localization="8" tooltip="Bow" x="102" y="32">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="68">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe3" index="3">
                                                  <Diagram scale="100">
                                                    <Box name="Delay" id="2" localization="8" tooltip="Wait specified time" x="93" y="59">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="NumberEdit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                      <Output name="Wait_timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="3" />
                                                      <Timeline enable="0">
                                                        <BehaviorLayer name="behavior_layer1">
                                                          <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="100">
                                                              <Box name="NumberEdit" id="1" localization="8" tooltip="This Box just transmits the number you entered when its Input is stimulated." plugin="numberedit_plugin" x="95" y="457">
                                                                <script language="4">
                                                                  <content>
                                                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(2)]]>
                                                                  </content>
                                                                </script>
                                                                <pluginContent>
                                                                  <number>2</number>
                                                                </pluginContent>
                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                              </Box>
                                                              <Box name="Wait" id="2" localization="8" tooltip="Wait a given number of seconds, and then stimulate the output.&#x0A;The wait that can be stopped immediately and reset at any time." x="243" y="452">
                                                                <bitmap>media/images/box/wait.png</bitmap>
                                                                <script language="4">
                                                                  <content>
                                                                    <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;

  def onUnload(self):
    self.onInput_onStop();

  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything

  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self, p):
    self.startTimer( float(p) );

  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
                                                                  </content>
                                                                </script>
                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                                                <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                                              </Box>
                                                              <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                              <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                              <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                            </Diagram>
                                                          </BehaviorKeyframe>
                                                        </BehaviorLayer>
                                                      </Timeline>
                                                    </Box>
                                                    <Box name="Say" id="1" localization="8" tooltip="Say a predefined text (enter Box to see it)" x="267" y="45">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="TextEdit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                      <Input name="textEdit_onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the text synthesis." id="3" />
                                                      <Output name="say_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Timeline enable="0">
                                                        <BehaviorLayer name="behavior_layer1">
                                                          <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="100">
                                                              <Box name="toSay" id="1" localization="8" tooltip="This Box just transmit the text you entered when its Input is stimulated." plugin="textedit_plugin" x="350" y="30">
                                                                <script language="4">
                                                                  <content>
                                                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("danke schöne!danke schöne!")]]>
                                                                  </content>
                                                                </script>
                                                                <pluginContent>
                                                                  <text>
                                                                    <![CDATA[danke schöne!danke schöne!]]>
                                                                  </text>
                                                                </pluginContent>
                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                                              </Box>
                                                              <Box name="SayText" id="2" localization="8" tooltip="Say the sentence asked." x="428" y="261">
                                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                <script language="4">
                                                                  <content>
                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            self.ttsStop.stop(id)

    def onInput_onStart(self, p):
        id = self.tts.post.say(p)
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
                                                                  </content>
                                                                </script>
                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                              </Box>
                                                              <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                              <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                              <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                          </BehaviorKeyframe>
                                                        </BehaviorLayer>
                                                      </Timeline>
                                                    </Box>
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                                <BehaviorKeyframe name="keyframe72" index="72">
                                                  <Diagram scale="100">
                                                    <Box name="End pose" id="1" localization="8" tooltip="Add to end of all sequences&#x0A;" x="210" y="140">
                                                      <bitmap>media/images/box/movement/move.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="20">
                                                        <ActuatorList model="nao">
                                                          <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                                                            <Key frame="20" value="0.349163" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                                                            <Key frame="20" value="-1.40867" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                                                            <Key frame="20" value="89.8229" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                                                            <Key frame="20" value="18.8943" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                                                            <Key frame="20" value="-43.5088" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                                                            <Key frame="20" value="-18.7185" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                                                            <Key frame="20" value="-58.802" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                                                            <Key frame="20" value="0.918933" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                                                            <Key frame="20" value="89.8278" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                                                            <Key frame="20" value="-18.3718" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                                                            <Key frame="20" value="44.6466" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                                                            <Key frame="20" value="16.7018" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                                                            <Key frame="20" value="55.4573" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                                                            <Key frame="20" value="0.918205" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                                                            <Key frame="20" value="1.05221" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                                                            <Key frame="20" value="-1.85673" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                                                            <Key frame="20" value="3.41509" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                                                            <Key frame="20" value="4.02469" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                                                            <Key frame="20" value="-5.98657" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                                                            <Key frame="20" value="0.528519" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                                                            <Key frame="20" value="0.616411" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                                                            <Key frame="20" value="2.10614" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                                                            <Key frame="20" value="4.81032" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                                                            <Key frame="20" value="-5.45084" />
                                                          </ActuatorCurve>
                                                          <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                                                            <Key frame="20" value="-0.173507" />
                                                          </ActuatorCurve>
                                                        </ActuatorList>
                                                      </Timeline>
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                              <ActuatorList model="nao">
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                                                  <Key frame="14" value="116.981" />
                                                  <Key frame="45" value="118.212" />
                                                  <Key frame="68" value="116.981" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                                                  <Key frame="14" value="23.9041" />
                                                  <Key frame="45" value="14.1482" />
                                                  <Key frame="68" value="23.9041" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                                                  <Key frame="14" value="-7.20953" />
                                                  <Key frame="45" value="26.8925" />
                                                  <Key frame="68" value="-7.20953" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                                                  <Key frame="14" value="-17.5759" />
                                                  <Key frame="45" value="-74.7934" />
                                                  <Key frame="68" value="-17.5759" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                                                  <Key frame="14" value="-57.2199" />
                                                  <Key frame="45" value="-58.2746" />
                                                  <Key frame="68" value="-57.2199" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                                                  <Key frame="14" value="0.924024" />
                                                  <Key frame="45" value="0.924024" />
                                                  <Key frame="68" value="0.924024" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                                                  <Key frame="14" value="61.0872" />
                                                  <Key frame="45" value="54.0558" />
                                                  <Key frame="68" value="61.0872" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                                                  <Key frame="14" value="-22.8543" />
                                                  <Key frame="45" value="-2.46337" />
                                                  <Key frame="68" value="-22.8543" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                                                  <Key frame="14" value="12.7419" />
                                                  <Key frame="45" value="21.4432" />
                                                  <Key frame="68" value="12.7419" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                                                  <Key frame="14" value="24.9637" />
                                                  <Key frame="45" value="73.2162" />
                                                  <Key frame="68" value="24.9637" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                                                  <Key frame="14" value="54.4026" />
                                                  <Key frame="45" value="55.2815" />
                                                  <Key frame="68" value="54.4026" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                                                  <Key frame="14" value="0.917842" />
                                                  <Key frame="45" value="0.469091" />
                                                  <Key frame="68" value="0.917842" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                                                  <Key frame="14" value="1.66745" />
                                                  <Key frame="45" value="-18.284" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                                                  <Key frame="14" value="-2.73565" />
                                                  <Key frame="45" value="1.65894" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                                                  <Key frame="14" value="4.29401" />
                                                  <Key frame="45" value="-43.607" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                                                  <Key frame="14" value="4.90361" />
                                                  <Key frame="45" value="60.0117" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                                                  <Key frame="14" value="-6.95338" />
                                                  <Key frame="45" value="-23.477" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                                                  <Key frame="14" value="0.880086" />
                                                  <Key frame="45" value="-6.6786" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                                                  <Key frame="14" value="0.967978" />
                                                  <Key frame="45" value="-2.54769" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                                                  <Key frame="14" value="2.36981" />
                                                  <Key frame="45" value="-37.4451" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                                                  <Key frame="14" value="5.95291" />
                                                  <Key frame="45" value="59.3911" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                                                  <Key frame="14" value="-5.8903" />
                                                  <Key frame="45" value="-31.1152" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                                                  <Key frame="14" value="-0.261399" />
                                                  <Key frame="45" value="7.73675" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                          </Box>
                                          <Box name="END POSE" id="19" localization="8" tooltip="Add to end of all sequences 1_10&#x0A;" x="240" y="28">
                                            <bitmap>media/images/box/movement/move.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="20">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram />
                                                </BehaviorKeyframe>
                                                <BehaviorKeyframe name="keyframe17" index="17">
                                                  <Diagram>
                                                    <Box name="Eyes LEDs" id="1" localization="8" tooltip="Set the LED color of NAO&apos;s eyes. Note that you must open the box to enter the color." x="302" y="306">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                        <Choice value="Both" />
                                                        <Choice value="Left" />
                                                        <Choice value="Right" />
                                                      </Parameter>
                                                      <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                      <Timeline enable="0">
                                                        <BehaviorLayer name="behavior_layer1">
                                                          <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                              <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                <script language="4">
                                                                  <content>
                                                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = ALLeds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
                                                                  </content>
                                                                </script>
                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                  <Choice value="Both" />
                                                                  <Choice value="Left" />
                                                                  <Choice value="Right" />
                                                                </Parameter>
                                                                <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                              </Box>
                                                              <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                <script language="4">
                                                                  <content>
                                                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]>
                                                                  </content>
                                                                </script>
                                                                <pluginContent>
                                                                  <color>#ffffff</color>
                                                                </pluginContent>
                                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                                <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                              </Box>
                                                              <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                                              <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                              <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                                            </Diagram>
                                                          </BehaviorKeyframe>
                                                        </BehaviorLayer>
                                                      </Timeline>
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                              <ActuatorList model="nao">
                                                <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                                                  <Key frame="20" value="0.349163" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                                                  <Key frame="20" value="-1.40867" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                                                  <Key frame="20" value="89.8229" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                                                  <Key frame="20" value="18.8943" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                                                  <Key frame="20" value="-43.5088" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                                                  <Key frame="20" value="-18.7185" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                                                  <Key frame="20" value="-58.802" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                                                  <Key frame="20" value="0.918933" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                                                  <Key frame="20" value="89.8278" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                                                  <Key frame="20" value="-18.3718" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                                                  <Key frame="20" value="44.6466" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                                                  <Key frame="20" value="16.7018" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                                                  <Key frame="20" value="55.4573" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                                                  <Key frame="20" value="0.918205" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                                                  <Key frame="20" value="1.05221" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                                                  <Key frame="20" value="-1.85673" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                                                  <Key frame="20" value="3.41509" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                                                  <Key frame="20" value="4.02469" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                                                  <Key frame="20" value="-5.98657" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                                                  <Key frame="20" value="0.528519" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                                                  <Key frame="20" value="0.616411" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                                                  <Key frame="20" value="2.10614" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                                                  <Key frame="20" value="4.81032" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                                                  <Key frame="20" value="-5.45084" />
                                                </ActuatorCurve>
                                                <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                                                  <Key frame="20" value="-0.173507" />
                                                </ActuatorCurve>
                                              </ActuatorList>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="19" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="19" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Bored" id="19" localization="8" tooltip="ID : #02C 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Bored" x="81" y="186">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="145">
                                    <BehaviorLayer name="LED">
                                      <BehaviorKeyframe name="thinking" index="1">
                                        <Diagram>
                                          <Box name="blinks" id="1" localization="8" tooltip="blinks" x="151" y="48">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed5", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed6", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        time.sleep( 0.2 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed5", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed6", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        time.sleep( 0.5 );

        rDuration = 1;
        self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration );

        time.sleep( 2.5 );

        rDuration = 0.6;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );


        return;


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                                        <Key frame="32" value="1.49176" />
                                        <Key frame="62" value="8.08363" />
                                        <Key frame="106" value="14.3239" />
                                        <Key frame="145" value="-2.99072" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                                        <Key frame="32" value="1.49176" />
                                        <Key frame="62" value="30.5839" />
                                        <Key frame="106" value="30.5839" />
                                        <Key frame="145" value="3.33748" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                                        <Key frame="28" value="81.1217" />
                                        <Key frame="58" value="78.3091" />
                                        <Key frame="102" value="78.2212" />
                                        <Key frame="141" value="85.4284" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                                        <Key frame="28" value="7.11683" />
                                        <Key frame="58" value="7.64418" />
                                        <Key frame="102" value="12.0388" />
                                        <Key frame="141" value="9.92936" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                                        <Key frame="28" value="-44.2119" />
                                        <Key frame="58" value="-67.3275" />
                                        <Key frame="102" value="-73.1283" />
                                        <Key frame="141" value="-46.4971" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                                        <Key frame="28" value="-54.7541" />
                                        <Key frame="58" value="-23.2889" />
                                        <Key frame="102" value="-14.9392" />
                                        <Key frame="141" value="-33.6601" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                                        <Key frame="58" value="-41.3115" />
                                        <Key frame="102" value="-40.4326" />
                                        <Key frame="141" value="-40.3447" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                                        <Key frame="58" value="0.268389" />
                                        <Key frame="102" value="0.261844" />
                                        <Key frame="141" value="0.270207" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                                        <Key frame="24" value="76.8198" />
                                        <Key frame="54" value="72.0736" />
                                        <Key frame="98" value="73.5678" />
                                        <Key frame="137" value="84.5542" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                                        <Key frame="24" value="-6.85796" />
                                        <Key frame="54" value="-6.68218" />
                                        <Key frame="98" value="-8.26423" />
                                        <Key frame="137" value="-12.8346" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                                        <Key frame="24" value="40.9551" />
                                        <Key frame="54" value="47.547" />
                                        <Key frame="98" value="54.3147" />
                                        <Key frame="137" value="48.0744" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                                        <Key frame="24" value="46.6729" />
                                        <Key frame="54" value="17.3171" />
                                        <Key frame="98" value="7.4732" />
                                        <Key frame="137" value="35.3349" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                                        <Key frame="54" value="55.1057" />
                                        <Key frame="98" value="54.9299" />
                                        <Key frame="137" value="54.842" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                                        <Key frame="54" value="0.359298" />
                                        <Key frame="98" value="0.350207" />
                                        <Key frame="137" value="0.364025" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                                        <Key frame="56" value="-18.9718" />
                                        <Key frame="100" value="-21.1691" />
                                        <Key frame="139" value="-16.6866" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                                        <Key frame="56" value="0" />
                                        <Key frame="100" value="-1.6232" />
                                        <Key frame="139" value="6.81441" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                                        <Key frame="56" value="-22.1872" />
                                        <Key frame="100" value="-23.7693" />
                                        <Key frame="139" value="5.58656" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                                        <Key frame="56" value="19" />
                                        <Key frame="100" value="21.8249" />
                                        <Key frame="139" value="10.1353" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                                        <Key frame="56" value="3" />
                                        <Key frame="100" value="1.44574" />
                                        <Key frame="139" value="-2" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                                        <Key frame="56" value="-3" />
                                        <Key frame="100" value="-1.28216" />
                                        <Key frame="139" value="-5.50096" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                                        <Key frame="56" value="2.29103" />
                                        <Key frame="100" value="4.40043" />
                                        <Key frame="139" value="-2" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                                        <Key frame="56" value="-18.2768" />
                                        <Key frame="100" value="-20.5619" />
                                        <Key frame="139" value="3.95985" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                                        <Key frame="56" value="18.8154" />
                                        <Key frame="100" value="20.9248" />
                                        <Key frame="139" value="9.67464" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                                        <Key frame="56" value="-1" />
                                        <Key frame="100" value="-2.49492" />
                                        <Key frame="139" value="-2" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                                        <Key frame="56" value="2" />
                                        <Key frame="100" value="0.217547" />
                                        <Key frame="139" value="1" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="Left eye leds" type="Lock" timeout="1" />
                                  <Resource name="Right eye leds" type="Lock" timeout="1" />
                                  <Resource name="HeadYaw" type="Lock" timeout="1" />
                                  <Resource name="HeadPitch" type="Lock" timeout="1" />
                                  <Resource name="LShoulderPitch" type="Lock" timeout="1" />
                                  <Resource name="LShoulderRoll" type="Lock" timeout="1" />
                                  <Resource name="LElbowRoll" type="Lock" timeout="1" />
                                  <Resource name="LElbowYaw" type="Lock" timeout="1" />
                                  <Resource name="LWristYaw" type="Lock" timeout="1" />
                                  <Resource name="LHand" type="Lock" timeout="1" />
                                  <Resource name="RShoulderPitch" type="Lock" timeout="1" />
                                  <Resource name="RShoulderRoll" type="Lock" timeout="1" />
                                  <Resource name="RElbowRoll" type="Lock" timeout="1" />
                                  <Resource name="RElbowYaw" type="Lock" timeout="1" />
                                  <Resource name="RWristYaw" type="Lock" timeout="1" />
                                  <Resource name="RHand" type="Lock" timeout="1" />
                                  <Resource name="LHipYawPitch" type="Lock" timeout="1" />
                                  <Resource name="LHipRoll" type="Lock" timeout="1" />
                                  <Resource name="LHipPitch" type="Lock" timeout="1" />
                                  <Resource name="LKneePitch" type="Lock" timeout="1" />
                                  <Resource name="LAnklePitch" type="Lock" timeout="1" />
                                  <Resource name="LAnkleRoll" type="Lock" timeout="1" />
                                  <Resource name="RHipRoll" type="Lock" timeout="1" />
                                  <Resource name="RHipPitch" type="Lock" timeout="1" />
                                  <Resource name="RKneePitch" type="Lock" timeout="1" />
                                  <Resource name="RAnklePitch" type="Lock" timeout="1" />
                                  <Resource name="RAnkleRoll" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Text Edit" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="84" y="28">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Wisst ihr , mir ist ein bisschen langweilig! Vielleicht tanzen wir zusammen Macarena? \nBerührt  meine Hand, wenn ihr es machen möchtet am. ")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Wisst ihr , mir ist ein bisschen langweilig! Vielleicht tanzen wir zusammen Macarena? 
Berührt  meine Hand, wenn ihr es machen möchtet am. ]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Say Text" id="9" localization="8" tooltip="Say the text received on its input." x="341" y="28">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="86" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="431" y="488">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Say" id="6" localization="8" tooltip="Say some text. The text can be localized." x="302" y="480">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Strafe euch! Lass uns gehen! " default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Tactile R.Hand" id="11" localization="8" tooltip="Detect touch on right hand tactile sensor." x="708" y="36">
                                  <bitmap>media/images/box/movement/move_arm.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="HRLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightLeftTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                  <Input name="HRBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightBackTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                  <Input name="HRRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightRightTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                  <Output name="leftTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The left of the right hand was touched." id="8" />
                                  <Output name="backTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The back of the right hand was touched." id="9" />
                                  <Output name="rightTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The right of the right hand was touched." id="10" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="if &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="157" y="130">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                          </Box>
                                          <Box name="if &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="157" y="28">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                          </Box>
                                          <Box name="if &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="157" y="232">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="9" outputowner="1" indexofoutput="4" />
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="8" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                          <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Right arm-sequence" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Wait For Signals" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="561" y="36">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                  <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                  <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                </Box>
                                <Box name="Only Once" id="4" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="130" y="396">
                                  <bitmap>media/images/box/loop.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                  <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                </Box>
                                <Box name="Macarena (1)" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="705" y="269">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="432">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Twinkle" id="1" localization="8" tooltip="NAO&apos;s selected LEDs flash on and off during the time defined in parameters." x="97" y="18">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="LEDs group" inherits_from_parent="0" content_type="3" value="AllLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="5">
                                              <Choice value="AllLeds" />
                                              <Choice value="BrainLeds" />
                                              <Choice value="ChestLeds" />
                                              <Choice value="EarLeds" />
                                              <Choice value="FaceLeds" />
                                              <Choice value="FeetLeds" />
                                              <Choice value="LeftEarLeds" />
                                              <Choice value="LeftFaceLeds" />
                                              <Choice value="LeftFootLeds" />
                                              <Choice value="RightEarLeds" />
                                              <Choice value="RightFaceLeds" />
                                              <Choice value="RightFootLeds" />
                                            </Parameter>
                                            <Parameter name="Time to flash on (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                            <Parameter name="Time to flash off (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="7" />
                                            <Parameter name="Animation duration (s)" inherits_from_parent="0" content_type="2" value="10" default_value="10" min="0.1" max="5000" tooltip="Duration of the animation of LEDs." id="8" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Set LEDs" id="3" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="176" y="119">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., self.getParameter("Time to flash on (s)"))
        self.onReady() # activate output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                      <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                      <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                                        <Choice value="AllLeds" />
                                                        <Choice value="BrainLeds" />
                                                        <Choice value="ChestLeds" />
                                                        <Choice value="EarLeds" />
                                                        <Choice value="FaceLeds" />
                                                        <Choice value="FeetLeds" />
                                                        <Choice value="LeftEarLeds" />
                                                        <Choice value="LeftFaceLeds" />
                                                        <Choice value="LeftFootLeds" />
                                                        <Choice value="RightEarLeds" />
                                                        <Choice value="RightFaceLeds" />
                                                        <Choice value="RightFootLeds" />
                                                      </Parameter>
                                                      <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                                      <Parameter name="Time to flash on (s)" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                                    </Box>
                                                    <Box name="Set LEDs" id="1" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="180" y="262">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., self.getParameter("Time to flash off (s)"))
        self.onReady() # activate output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                      <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                      <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                                        <Choice value="AllLeds" />
                                                        <Choice value="BrainLeds" />
                                                        <Choice value="ChestLeds" />
                                                        <Choice value="EarLeds" />
                                                        <Choice value="FaceLeds" />
                                                        <Choice value="FeetLeds" />
                                                        <Choice value="LeftEarLeds" />
                                                        <Choice value="LeftFaceLeds" />
                                                        <Choice value="LeftFootLeds" />
                                                        <Choice value="RightEarLeds" />
                                                        <Choice value="RightFaceLeds" />
                                                        <Choice value="RightFootLeds" />
                                                      </Parameter>
                                                      <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                                      <Parameter name="Time to flash off (s)" inherits_from_parent="1" content_type="2" value="0.5" default_value="0.5" min="0.1" max="2" tooltip="How much time to go to the intensity in seconds." id="6" />
                                                    </Box>
                                                    <Box name="Wait" id="2" localization="8" tooltip="Wait a moment before sending a signal on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start again." x="172" y="16">
                                                      <bitmap>media/images/box/wait.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import threading

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.tb = False

    def onUnload(self):
        if( self.tb ):
            self.tb.cancel()
            self.tb = False

    def triggerOutput( self, rPeriod = 1 ):
        self.onUnload() # to clean everything
        self.timerOutput()

    def startTimer( self, rPeriod = 1 ):
        if( self.tb ):
            self.tb.cancel()
        self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] )
        self.tb.start()

    def onInput_onStart(self):
        self.startTimer( self.getParameter("Animation duration (s)") )

    def onInput_onStop(self):
        bRunning = self.tb
        self.onUnload()
        if( bRunning ):
            self.timerOutput()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                      <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped." id="4" />
                                                      <Parameter name="Animation duration (s)" inherits_from_parent="1" content_type="2" value="10" default_value="10" min="0.1" max="5000" tooltip="Duration of the animation of LEDs." id="5" />
                                                    </Box>
                                                    <Box name="Set LEDs" id="4" localization="8" tooltip="Set the intensity of the LEDs of a given group." x="308" y="12">
                                                      <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onSet(self):
        self.leds.fade(self.getParameter("LEDs group"), self.getParameter("Intensity (%)")/100., 0.1)
        self.onReady() # activate output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onSet" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is stimulated, the intensity of all the LEDs from the group is&#x0A;set to the intensity parameter value." id="2" />
                                                      <Output name="onReady" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when LEDs intensity has been set." id="3" />
                                                      <Parameter name="LEDs group" inherits_from_parent="1" content_type="3" value="FaceLeds" default_value="FaceLeds" custom_choice="1" tooltip="The group of LEDs which intensity is to set.&#x0A;&#x0A;Note: You can call the listGroups() method of ALMotion to get the name of LEDs&#x0A;groups which are not listed here." id="4">
                                                        <Choice value="AllLeds" />
                                                        <Choice value="BrainLeds" />
                                                        <Choice value="ChestLeds" />
                                                        <Choice value="EarLeds" />
                                                        <Choice value="FaceLeds" />
                                                        <Choice value="FeetLeds" />
                                                        <Choice value="LeftEarLeds" />
                                                        <Choice value="LeftFaceLeds" />
                                                        <Choice value="LeftFootLeds" />
                                                        <Choice value="RightEarLeds" />
                                                        <Choice value="RightFaceLeds" />
                                                        <Choice value="RightFootLeds" />
                                                      </Parameter>
                                                      <Parameter name="Intensity (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Intensity all the LEDs from the group is set to." id="5" />
                                                    </Box>
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Random Eyes" id="2" localization="8" tooltip="The color of the eyes changes randomly.&#x0A;&#x0A;Note: It is a never ending box. You have to call the onStop input to stop it." x="104" y="143">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #puts code for box cleanup here
        self.bMustStop = True

    def onInput_onStart(self):
        #self.onStopped() # activate output of the box
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        self.bMustStop = False
        while( not self.bMustStop ):
            rRandTime = random.uniform(0.0,2.0)
            self.leds.fadeRGB("FaceLeds", 256*random.randint(0,255) + 256*256*random.randint(0,255) + random.randint(0,255), rRandTime)
            time.sleep(random.uniform(0.0,3.0))
        self.bIsRunning = False
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="4" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="25" value="-13.6256" />
                                        <Key frame="49" value="-0.353968" />
                                        <Key frame="69" value="3.68905" />
                                        <Key frame="87" value="3.68905" />
                                        <Key frame="104" value="3.68905" />
                                        <Key frame="127" value="3.68905" />
                                        <Key frame="148" value="3.68905" />
                                        <Key frame="163" value="8.78677" />
                                        <Key frame="178" value="8.78677" />
                                        <Key frame="191" value="-10.901" />
                                        <Key frame="209" value="-5.97904" />
                                        <Key frame="227" value="-16.3503" />
                                        <Key frame="260" value="0.349159" />
                                        <Key frame="292" value="7.90786" />
                                        <Key frame="319" value="12.7419" />
                                        <Key frame="341" value="12.7419" />
                                        <Key frame="360" value="4.2164" />
                                        <Key frame="378" value="16.8728" />
                                        <Key frame="400" value="-13.0104" />
                                        <Key frame="432" value="-13.6256" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="25" value="-0.00240423" />
                                        <Key frame="49" value="-17.9323" />
                                        <Key frame="69" value="17.9275" />
                                        <Key frame="87" value="-13.362" />
                                        <Key frame="104" value="18.1033" />
                                        <Key frame="127" value="18.1033" />
                                        <Key frame="148" value="-10.3736" />
                                        <Key frame="163" value="-20.2175" />
                                        <Key frame="178" value="-20.2175" />
                                        <Key frame="191" value="-13.4498" />
                                        <Key frame="209" value="12.1267" />
                                        <Key frame="227" value="30.6718" />
                                        <Key frame="260" value="17.6638" />
                                        <Key frame="292" value="1.40386" />
                                        <Key frame="319" value="-15.2956" />
                                        <Key frame="341" value="31.5507" />
                                        <Key frame="360" value="-6.85796" />
                                        <Key frame="378" value="28.7382" />
                                        <Key frame="400" value="-27.0731" />
                                        <Key frame="432" value="-0.00240423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="25" value="5.53478" />
                                        <Key frame="49" value="5.53478" />
                                        <Key frame="69" value="5.44688" />
                                        <Key frame="87" value="5.44688" />
                                        <Key frame="104" value="5.53478" />
                                        <Key frame="127" value="5.53478" />
                                        <Key frame="148" value="5.44688" />
                                        <Key frame="260" value="5.53478" />
                                        <Key frame="292" value="5.62267" />
                                        <Key frame="319" value="5.53478" />
                                        <Key frame="341" value="5.53478" />
                                        <Key frame="360" value="5.53478" />
                                        <Key frame="378" value="-10.901" />
                                        <Key frame="400" value="-28.0399" />
                                        <Key frame="432" value="5.62267" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="25" value="-6.67737" />
                                        <Key frame="49" value="-6.67737" />
                                        <Key frame="69" value="-6.67737" />
                                        <Key frame="87" value="-6.67737" />
                                        <Key frame="104" value="-6.67737" />
                                        <Key frame="127" value="-6.67737" />
                                        <Key frame="148" value="-6.67737" />
                                        <Key frame="260" value="-6.67737" />
                                        <Key frame="292" value="-6.58948" />
                                        <Key frame="319" value="-6.67737" />
                                        <Key frame="341" value="-6.67737" />
                                        <Key frame="360" value="-14.4118" />
                                        <Key frame="378" value="3.34228" />
                                        <Key frame="400" value="-12.1267" />
                                        <Key frame="432" value="-6.58948" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="-22.41" />
                                        <Key frame="49" value="-22.41" />
                                        <Key frame="69" value="-23.2889" />
                                        <Key frame="87" value="-23.2889" />
                                        <Key frame="104" value="-23.2889" />
                                        <Key frame="116" value="-23.2889" />
                                        <Key frame="127" value="-23.2889" />
                                        <Key frame="138" value="-58.094" />
                                        <Key frame="148" value="-53.1721" />
                                        <Key frame="163" value="-53.5237" />
                                        <Key frame="178" value="-53.5237" />
                                        <Key frame="191" value="-53.5237" />
                                        <Key frame="209" value="-44.8224" />
                                        <Key frame="227" value="-82.7037" />
                                        <Key frame="260" value="-82.7037" />
                                        <Key frame="292" value="-24.6073" />
                                        <Key frame="319" value="-24.9589" />
                                        <Key frame="332" value="-58.2698" />
                                        <Key frame="341" value="-80.1549" />
                                        <Key frame="360" value="-81.4732" />
                                        <Key frame="378" value="-81.4732" />
                                        <Key frame="400" value="-87.6256" />
                                        <Key frame="417" value="-23.7284" />
                                        <Key frame="432" value="-23.9041" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="-69.8763" />
                                        <Key frame="49" value="-69.8763" />
                                        <Key frame="69" value="-69.0853" />
                                        <Key frame="87" value="-69.0853" />
                                        <Key frame="104" value="-82.2691" />
                                        <Key frame="116" value="-82.2691" />
                                        <Key frame="127" value="-82.2691" />
                                        <Key frame="138" value="-71.0189" />
                                        <Key frame="148" value="-0.705531" />
                                        <Key frame="163" value="-0.353968" />
                                        <Key frame="178" value="-0.353968" />
                                        <Key frame="191" value="-0.61764" />
                                        <Key frame="209" value="-77.1713" />
                                        <Key frame="227" value="-56.341" />
                                        <Key frame="260" value="-56.341" />
                                        <Key frame="292" value="12.3024" />
                                        <Key frame="319" value="11.7751" />
                                        <Key frame="332" value="4.30429" />
                                        <Key frame="341" value="-0.00240423" />
                                        <Key frame="360" value="-0.969218" />
                                        <Key frame="378" value="-0.969218" />
                                        <Key frame="400" value="-13.6256" />
                                        <Key frame="417" value="-73.4799" />
                                        <Key frame="432" value="-67.9427" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="25" value="0.3056" />
                                        <Key frame="49" value="0.3056" />
                                        <Key frame="69" value="0.8488" />
                                        <Key frame="87" value="0.8484" />
                                        <Key frame="104" value="0.8484" />
                                        <Key frame="116" value="0.8484" />
                                        <Key frame="127" value="0.8488" />
                                        <Key frame="138" value="0.8484" />
                                        <Key frame="148" value="0.8488" />
                                        <Key frame="163" value="0.8488" />
                                        <Key frame="178" value="0.8488" />
                                        <Key frame="191" value="0.8488" />
                                        <Key frame="209" value="0.8484" />
                                        <Key frame="227" value="0.8484" />
                                        <Key frame="260" value="0.8488" />
                                        <Key frame="292" value="0.8484" />
                                        <Key frame="319" value="0.8468" />
                                        <Key frame="332" value="0.8468" />
                                        <Key frame="341" value="0.8468" />
                                        <Key frame="360" value="0.8484" />
                                        <Key frame="378" value="0.8484" />
                                        <Key frame="400" value="0.8472" />
                                        <Key frame="417" value="0.3056" />
                                        <Key frame="432" value="0.3056" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="25" value="7.82477" />
                                        <Key frame="49" value="7.73688" />
                                        <Key frame="69" value="7.64898" />
                                        <Key frame="87" value="7.82477" />
                                        <Key frame="104" value="7.73688" />
                                        <Key frame="127" value="7.73688" />
                                        <Key frame="148" value="7.73688" />
                                        <Key frame="260" value="7.73688" />
                                        <Key frame="292" value="7.73688" />
                                        <Key frame="319" value="7.82477" />
                                        <Key frame="341" value="7.82477" />
                                        <Key frame="360" value="9.31893" />
                                        <Key frame="378" value="2.46338" />
                                        <Key frame="400" value="-30.6718" />
                                        <Key frame="432" value="8.08845" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="25" value="6.59429" />
                                        <Key frame="49" value="6.59429" />
                                        <Key frame="69" value="6.59429" />
                                        <Key frame="87" value="6.59429" />
                                        <Key frame="104" value="6.59429" />
                                        <Key frame="127" value="6.59429" />
                                        <Key frame="148" value="6.59429" />
                                        <Key frame="260" value="6.59429" />
                                        <Key frame="292" value="6.59429" />
                                        <Key frame="319" value="6.59429" />
                                        <Key frame="341" value="6.59429" />
                                        <Key frame="360" value="17.9323" />
                                        <Key frame="378" value="-14.9392" />
                                        <Key frame="400" value="24.7" />
                                        <Key frame="432" value="6.5064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="25" value="-9.92936" />
                                        <Key frame="49" value="-9.92936" />
                                        <Key frame="69" value="-9.92936" />
                                        <Key frame="87" value="-10.0173" />
                                        <Key frame="104" value="-10.0173" />
                                        <Key frame="127" value="-9.92936" />
                                        <Key frame="148" value="-9.92936" />
                                        <Key frame="260" value="-9.92936" />
                                        <Key frame="292" value="-9.92936" />
                                        <Key frame="319" value="-9.92936" />
                                        <Key frame="341" value="-9.92936" />
                                        <Key frame="360" value="-9.84147" />
                                        <Key frame="378" value="-13.7966" />
                                        <Key frame="400" value="-33.0449" />
                                        <Key frame="432" value="-9.92936" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="25" value="-5.18802" />
                                        <Key frame="49" value="-5.18802" />
                                        <Key frame="69" value="-5.27591" />
                                        <Key frame="87" value="-5.29" />
                                        <Key frame="104" value="-5.27591" />
                                        <Key frame="127" value="-5.27591" />
                                        <Key frame="148" value="-5.27591" />
                                        <Key frame="260" value="-5.18802" />
                                        <Key frame="292" value="-5.18802" />
                                        <Key frame="319" value="-5.10013" />
                                        <Key frame="341" value="-5.18802" />
                                        <Key frame="360" value="-5.27591" />
                                        <Key frame="378" value="24.2557" />
                                        <Key frame="400" value="76.5513" />
                                        <Key frame="432" value="-5.27591" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="85.5163" />
                                        <Key frame="49" value="85.5163" />
                                        <Key frame="69" value="22.7616" />
                                        <Key frame="87" value="22.7616" />
                                        <Key frame="104" value="24.7831" />
                                        <Key frame="116" value="24.7831" />
                                        <Key frame="127" value="24.871" />
                                        <Key frame="138" value="13.7087" />
                                        <Key frame="148" value="4.12851" />
                                        <Key frame="163" value="7.46839" />
                                        <Key frame="178" value="9.05044" />
                                        <Key frame="191" value="5.44688" />
                                        <Key frame="209" value="12.8298" />
                                        <Key frame="227" value="-39.5537" />
                                        <Key frame="260" value="-39.5537" />
                                        <Key frame="292" value="35.6816" />
                                        <Key frame="319" value="37.9668" />
                                        <Key frame="332" value="52.7326" />
                                        <Key frame="341" value="81.9127" />
                                        <Key frame="360" value="81.2974" />
                                        <Key frame="378" value="81.3853" />
                                        <Key frame="400" value="65.4769" />
                                        <Key frame="417" value="82.0885" />
                                        <Key frame="432" value="86.2194" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="7.46839" />
                                        <Key frame="49" value="7.46839" />
                                        <Key frame="69" value="0.788627" />
                                        <Key frame="87" value="0.788627" />
                                        <Key frame="104" value="0.612832" />
                                        <Key frame="116" value="0.612832" />
                                        <Key frame="127" value="0.612832" />
                                        <Key frame="138" value="-8.44001" />
                                        <Key frame="148" value="-15.9987" />
                                        <Key frame="163" value="-14.153" />
                                        <Key frame="178" value="-14.2409" />
                                        <Key frame="191" value="-14.153" />
                                        <Key frame="209" value="-4.04543" />
                                        <Key frame="227" value="17.4002" />
                                        <Key frame="260" value="17.3123" />
                                        <Key frame="292" value="-18" />
                                        <Key frame="319" value="-15.2956" />
                                        <Key frame="332" value="21.5311" />
                                        <Key frame="341" value="42.4493" />
                                        <Key frame="360" value="44.7345" />
                                        <Key frame="378" value="44.2071" />
                                        <Key frame="400" value="38.9336" />
                                        <Key frame="417" value="19.3338" />
                                        <Key frame="432" value="7.46839" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="8.4352" />
                                        <Key frame="49" value="8.25942" />
                                        <Key frame="69" value="65.6527" />
                                        <Key frame="87" value="65.6527" />
                                        <Key frame="104" value="-101.342" />
                                        <Key frame="116" value="-101.342" />
                                        <Key frame="127" value="-101.254" />
                                        <Key frame="138" value="-44.5635" />
                                        <Key frame="148" value="-15.9108" />
                                        <Key frame="163" value="-17.7565" />
                                        <Key frame="178" value="-17.6686" />
                                        <Key frame="191" value="-17.6686" />
                                        <Key frame="209" value="-17.3171" />
                                        <Key frame="227" value="-48.5186" />
                                        <Key frame="260" value="-48.5186" />
                                        <Key frame="292" value="-26.4578" />
                                        <Key frame="319" value="-27.8641" />
                                        <Key frame="332" value="-41.9268" />
                                        <Key frame="341" value="-51.6827" />
                                        <Key frame="360" value="-52.7374" />
                                        <Key frame="378" value="-52.7374" />
                                        <Key frame="400" value="-22.1511" />
                                        <Key frame="417" value="5.2711" />
                                        <Key frame="432" value="5.09532" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="25" value="5.89115" />
                                        <Key frame="49" value="5.89115" />
                                        <Key frame="69" value="5.80326" />
                                        <Key frame="87" value="5.80326" />
                                        <Key frame="104" value="5.80326" />
                                        <Key frame="127" value="5.89115" />
                                        <Key frame="148" value="5.89115" />
                                        <Key frame="260" value="5.80326" />
                                        <Key frame="292" value="5.97904" />
                                        <Key frame="319" value="5.89115" />
                                        <Key frame="341" value="5.89115" />
                                        <Key frame="360" value="-5.44688" />
                                        <Key frame="378" value="-21.0037" />
                                        <Key frame="400" value="-37.4395" />
                                        <Key frame="432" value="6.06693" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="25" value="4.22121" />
                                        <Key frame="49" value="4.3091" />
                                        <Key frame="69" value="4.22121" />
                                        <Key frame="87" value="4.3091" />
                                        <Key frame="104" value="4.3091" />
                                        <Key frame="127" value="4.22121" />
                                        <Key frame="148" value="4.3091" />
                                        <Key frame="260" value="4.22121" />
                                        <Key frame="292" value="4.13332" />
                                        <Key frame="319" value="4.22121" />
                                        <Key frame="341" value="4.22121" />
                                        <Key frame="360" value="0.441859" />
                                        <Key frame="378" value="22.4148" />
                                        <Key frame="400" value="1.23289" />
                                        <Key frame="432" value="4.13332" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="22.3269" />
                                        <Key frame="49" value="23.03" />
                                        <Key frame="69" value="23.03" />
                                        <Key frame="87" value="23.9968" />
                                        <Key frame="104" value="23.9968" />
                                        <Key frame="116" value="70.14" />
                                        <Key frame="127" value="68.9974" />
                                        <Key frame="138" value="64.8665" />
                                        <Key frame="148" value="64.7786" />
                                        <Key frame="163" value="17.1413" />
                                        <Key frame="178" value="39.2021" />
                                        <Key frame="191" value="88.4215" />
                                        <Key frame="209" value="87.8941" />
                                        <Key frame="227" value="87.8062" />
                                        <Key frame="260" value="39.0263" />
                                        <Key frame="292" value="39.0263" />
                                        <Key frame="319" value="77.2592" />
                                        <Key frame="332" value="73.4799" />
                                        <Key frame="341" value="73.5678" />
                                        <Key frame="360" value="74.2709" />
                                        <Key frame="378" value="74.183" />
                                        <Key frame="400" value="72.7768" />
                                        <Key frame="417" value="23.909" />
                                        <Key frame="432" value="23.9968" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="67.4106" />
                                        <Key frame="49" value="66.1801" />
                                        <Key frame="69" value="66.1801" />
                                        <Key frame="87" value="105.028" />
                                        <Key frame="104" value="104.94" />
                                        <Key frame="116" value="72.4204" />
                                        <Key frame="127" value="8.08364" />
                                        <Key frame="138" value="-0.881327" />
                                        <Key frame="148" value="-0.881327" />
                                        <Key frame="163" value="-41.2236" />
                                        <Key frame="178" value="76.5513" />
                                        <Key frame="191" value="62.2249" />
                                        <Key frame="209" value="62.5765" />
                                        <Key frame="227" value="62.5765" />
                                        <Key frame="260" value="-5.27591" />
                                        <Key frame="292" value="-5.27591" />
                                        <Key frame="319" value="-16.4382" />
                                        <Key frame="332" value="-14.4166" />
                                        <Key frame="341" value="-13.7135" />
                                        <Key frame="360" value="-12.483" />
                                        <Key frame="378" value="-12.7467" />
                                        <Key frame="400" value="-11.0768" />
                                        <Key frame="417" value="67.4984" />
                                        <Key frame="432" value="66.6195" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="25" value="0.31" />
                                        <Key frame="49" value="0.9304" />
                                        <Key frame="69" value="0.9304" />
                                        <Key frame="87" value="0.9304" />
                                        <Key frame="104" value="0.9304" />
                                        <Key frame="116" value="0.9304" />
                                        <Key frame="127" value="0.02" />
                                        <Key frame="138" value="0.49" />
                                        <Key frame="148" value="0.9304" />
                                        <Key frame="163" value="0.9304" />
                                        <Key frame="178" value="0.9304" />
                                        <Key frame="191" value="0.9304" />
                                        <Key frame="209" value="0.9304" />
                                        <Key frame="227" value="0.9304" />
                                        <Key frame="260" value="0.9304" />
                                        <Key frame="292" value="0.9304" />
                                        <Key frame="319" value="0.9284" />
                                        <Key frame="332" value="0.9284" />
                                        <Key frame="341" value="0.9284" />
                                        <Key frame="360" value="0.9304" />
                                        <Key frame="378" value="0.9304" />
                                        <Key frame="400" value="0.9284" />
                                        <Key frame="417" value="0.3096" />
                                        <Key frame="432" value="0.3064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="25" value="7.55628" />
                                        <Key frame="49" value="7.55628" />
                                        <Key frame="69" value="7.46839" />
                                        <Key frame="87" value="7.55628" />
                                        <Key frame="104" value="7.55628" />
                                        <Key frame="127" value="7.55628" />
                                        <Key frame="148" value="7.3805" />
                                        <Key frame="260" value="7.46839" />
                                        <Key frame="292" value="7.55628" />
                                        <Key frame="319" value="7.55628" />
                                        <Key frame="341" value="7.55628" />
                                        <Key frame="360" value="7.64417" />
                                        <Key frame="378" value="7.55628" />
                                        <Key frame="400" value="-4.39699" />
                                        <Key frame="432" value="7.46839" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="25" value="-3.68905" />
                                        <Key frame="49" value="-3.68905" />
                                        <Key frame="69" value="-3.68905" />
                                        <Key frame="87" value="-3.68905" />
                                        <Key frame="104" value="-3.68905" />
                                        <Key frame="127" value="-3.68905" />
                                        <Key frame="148" value="-3.68905" />
                                        <Key frame="260" value="-3.68905" />
                                        <Key frame="292" value="-3.68905" />
                                        <Key frame="319" value="-3.68905" />
                                        <Key frame="341" value="-3.68905" />
                                        <Key frame="360" value="2.63916" />
                                        <Key frame="378" value="-38.4942" />
                                        <Key frame="400" value="4.39699" />
                                        <Key frame="432" value="-3.77694" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="25" value="-9.92936" />
                                        <Key frame="49" value="-9.92936" />
                                        <Key frame="69" value="-9.92936" />
                                        <Key frame="87" value="-10.0173" />
                                        <Key frame="104" value="-10.0173" />
                                        <Key frame="127" value="-9.92936" />
                                        <Key frame="148" value="-9.92936" />
                                        <Key frame="260" value="-9.92936" />
                                        <Key frame="292" value="-9.92936" />
                                        <Key frame="319" value="-9.92936" />
                                        <Key frame="341" value="-9.92936" />
                                        <Key frame="360" value="-9.84147" />
                                        <Key frame="378" value="-13.7966" />
                                        <Key frame="400" value="-33.0449" />
                                        <Key frame="432" value="-9.92936" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="25" value="-5.2711" />
                                        <Key frame="49" value="-5.2711" />
                                        <Key frame="69" value="-5.29" />
                                        <Key frame="87" value="-5.29" />
                                        <Key frame="104" value="-5.29" />
                                        <Key frame="127" value="-5.29" />
                                        <Key frame="148" value="-5.2711" />
                                        <Key frame="260" value="-5.2711" />
                                        <Key frame="292" value="-5.2711" />
                                        <Key frame="319" value="-5.2711" />
                                        <Key frame="341" value="-5.2711" />
                                        <Key frame="360" value="7.56109" />
                                        <Key frame="378" value="26.1063" />
                                        <Key frame="400" value="66.8001" />
                                        <Key frame="432" value="-5.29" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="85.6968" />
                                        <Key frame="49" value="26.6336" />
                                        <Key frame="69" value="26.7215" />
                                        <Key frame="87" value="26.5457" />
                                        <Key frame="104" value="26.5457" />
                                        <Key frame="116" value="25.6668" />
                                        <Key frame="127" value="19.8659" />
                                        <Key frame="138" value="29.7098" />
                                        <Key frame="148" value="31.9071" />
                                        <Key frame="163" value="37.6201" />
                                        <Key frame="178" value="28.2156" />
                                        <Key frame="191" value="-35.5937" />
                                        <Key frame="209" value="-32.8691" />
                                        <Key frame="227" value="-32.8691" />
                                        <Key frame="260" value="58.4504" />
                                        <Key frame="292" value="58.5383" />
                                        <Key frame="319" value="62.4055" />
                                        <Key frame="332" value="62.2297" />
                                        <Key frame="341" value="67.2396" />
                                        <Key frame="360" value="67.679" />
                                        <Key frame="378" value="67.679" />
                                        <Key frame="400" value="66.4486" />
                                        <Key frame="417" value="79.0171" />
                                        <Key frame="432" value="85.2574" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="-5.45169" />
                                        <Key frame="49" value="4.39218" />
                                        <Key frame="69" value="4.39218" />
                                        <Key frame="87" value="9.48991" />
                                        <Key frame="104" value="9.48991" />
                                        <Key frame="116" value="18" />
                                        <Key frame="127" value="18" />
                                        <Key frame="138" value="18" />
                                        <Key frame="148" value="18" />
                                        <Key frame="163" value="-9.23104" />
                                        <Key frame="178" value="-13.6256" />
                                        <Key frame="191" value="-14.944" />
                                        <Key frame="209" value="-14.5924" />
                                        <Key frame="227" value="-14.944" />
                                        <Key frame="260" value="17.5759" />
                                        <Key frame="292" value="17.4002" />
                                        <Key frame="319" value="-34.8954" />
                                        <Key frame="332" value="-34.9833" />
                                        <Key frame="341" value="-34.9833" />
                                        <Key frame="360" value="-36.5654" />
                                        <Key frame="378" value="-36.6533" />
                                        <Key frame="400" value="-36.1259" />
                                        <Key frame="417" value="-18.2839" />
                                        <Key frame="432" value="-5.89115" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="3.33748" />
                                        <Key frame="49" value="-66.3607" />
                                        <Key frame="69" value="-66.3607" />
                                        <Key frame="87" value="68.5531" />
                                        <Key frame="104" value="68.5531" />
                                        <Key frame="116" value="32.166" />
                                        <Key frame="127" value="4.48007" />
                                        <Key frame="138" value="1.49175" />
                                        <Key frame="148" value="1.57965" />
                                        <Key frame="163" value="36.0332" />
                                        <Key frame="178" value="-20.1296" />
                                        <Key frame="191" value="55.9846" />
                                        <Key frame="209" value="55.0178" />
                                        <Key frame="227" value="55.0178" />
                                        <Key frame="260" value="39.8125" />
                                        <Key frame="292" value="39.8125" />
                                        <Key frame="319" value="54.1389" />
                                        <Key frame="332" value="48.6017" />
                                        <Key frame="341" value="48.5138" />
                                        <Key frame="360" value="47.2834" />
                                        <Key frame="378" value="47.2834" />
                                        <Key frame="400" value="46.5802" />
                                        <Key frame="417" value="2.28279" />
                                        <Key frame="432" value="7.55628" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                                <Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="3" />
                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="4" />
                                <Link inputowner="7" indexofinput="2" outputowner="9" indexofoutput="4" />
                                <Link inputowner="7" indexofinput="3" outputowner="19" indexofoutput="4" />
                                <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="3" />
                                <Link inputowner="11" indexofinput="2" outputowner="7" indexofoutput="4" />
                                <Link inputowner="4" indexofinput="2" outputowner="11" indexofoutput="9" />
                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="4" />
                                <Link inputowner="11" indexofinput="3" outputowner="11" indexofoutput="9" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="5" />
                      <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="6" />
                      <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                      <Link inputowner="14" indexofinput="2" outputowner="9" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="14" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                      <Link inputowner="11" indexofinput="2" outputowner="7" indexofoutput="4" />
                      <Link inputowner="8" indexofinput="2" outputowner="11" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Thank you" id="4" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="728" y="100">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="70.7107">
                      <Box name="toSay" id="1" localization="8" tooltip="This Box just transmit the text you entered when its Input is stimulated." plugin="textedit_plugin" x="285" y="16">
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Dies ist das Ende unseres Trainings! Wir haben es hervorragend gemacht! \nJetzt sind wir stark wie Elefanten! ")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Dies ist das Ende unseres Trainings! Wir haben es hervorragend gemacht! 
Jetzt sind wir stark wie Elefanten! ]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                      </Box>
                      <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="551" y="23">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Play Sound" id="5" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="695" y="135">
                        <bitmap>media/images/box/interaction/play_music.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                        <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Gorilla Sounds Gorilla Pictures The Sound A Gorilla Makes.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                        <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                        <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                        <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                        <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                  <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                  <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                  <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                </Box>
                                <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                  <bitmap>media/images/box/folder.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                  <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                </Box>
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="Audio player" type="Lock" timeout="0" />
                      </Box>
                      <Box name="toSay (1)" id="8" localization="8" tooltip="This Box just transmit the text you entered when its Input is stimulated." plugin="textedit_plugin" x="275" y="202">
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Jetzt möchte ich ein Foto von euch machen, bitte berührt meine Beinsensoren, ")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Jetzt möchte ich ein Foto von euch machen, bitte berührt meine Beinsensoren, ]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                      </Box>
                      <Box name="Say Text (1)" id="9" localization="8" tooltip="Say the text received on its input." x="538" y="203">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Bumpers" id="10" localization="8" tooltip="Listen to bumpers sensors. Stimulate onLeft or onRight output depending on&#x0A;which bumper is stimulated." x="113" y="396">
                        <bitmap>media/images/box/movement/move_foot.png</bitmap>
                        <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                        <Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="6" />
                        <Output name="onLeft" type="1" type_size="1" nature="2" inner="0" tooltip="When left bumper is stimulated." id="7" />
                        <Output name="onRight" type="1" type_size="1" nature="2" inner="0" tooltip="When right bumper is stimulated." id="8" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="196" y="61">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                </Box>
                                <Box name="If &gt; 0" id="4" localization="8" tooltip="Transmit only if value is &gt; 0." x="197" y="165">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="3" />
                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="8" outputowner="4" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="120" y="202">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Wait For Signals" id="11" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="259" y="400">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                        <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                        <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                      </Box>
                      <Box name="Pos: Bow" id="4" localization="8" tooltip="Bow" x="482" y="514">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Timeline enable="1" fps="15" start_frame="1" end_frame="-1" size="68">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe3" index="3">
                              <Diagram scale="100">
                                <Box name="Delay" id="2" localization="8" tooltip="Wait specified time" x="93" y="59">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="NumberEdit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                  <Output name="Wait_timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="3" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="100">
                                          <Box name="NumberEdit" id="1" localization="8" tooltip="This Box just transmits the number you entered when its Input is stimulated." plugin="numberedit_plugin" x="95" y="457">
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(2)]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <number>2</number>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits number." id="2" />
                                            <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                          </Box>
                                          <Box name="Wait" id="2" localization="8" tooltip="Wait a given number of seconds, and then stimulate the output.&#x0A;The wait that can be stopped immediately and reset at any time." x="243" y="452">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import threading # opkg install python-threading
class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self)
    self.tb = False;

  def onUnload(self):
    self.onInput_onStop();

  def triggerOutput( self, rPeriod = 1 ):
    self.timerOutput();
    self.onInput_onStop(); # to clean everything

  def startTimer( self, rPeriod = 1 ):
    if( self.tb ):
      self.tb.cancel();
    self.tb = threading.Timer( rPeriod, self.triggerOutput, [rPeriod] );
    self.tb.start();

  def onInput_onStart(self, p):
    self.startTimer( float(p) );

  def onInput_onStop(self):
    if( self.tb ):
      self.tb.cancel();
      self.tb = False;]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Start the timer with a specified period value (in seconds)" id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer" id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="send a bang after a certain amount of time.&#x0A;Warning: not outputted if stopped before time lapse." id="4" />
                                          </Box>
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Say" id="1" localization="8" tooltip="Say a predefined text (enter Box to see it)" x="267" y="45">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="TextEdit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                  <Input name="textEdit_onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the text synthesis." id="3" />
                                  <Output name="say_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="100">
                                          <Box name="toSay" id="1" localization="8" tooltip="This Box just transmit the text you entered when its Input is stimulated." plugin="textedit_plugin" x="350" y="30">
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("danke schöne!danke schöne!")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[danke schöne!danke schöne!]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                                          </Box>
                                          <Box name="SayText" id="2" localization="8" tooltip="Say the sentence asked." x="428" y="261">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        #puts code for box cleanup here
        self.ids = []

    def onUnload(self):
        #puts code for box cleanup here
        for id in self.ids:
            self.ttsStop.stop(id)

    def onInput_onStart(self, p):
        id = self.tts.post.say(p)
        self.ids.append(id)
        self.tts.wait(id, 0)
        self.ids.remove(id)
        self.onStopped() # activate output of the box

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                          </Box>
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                            <BehaviorKeyframe name="keyframe72" index="72">
                              <Diagram scale="100">
                                <Box name="End pose" id="1" localization="8" tooltip="Add to end of all sequences&#x0A;" x="210" y="140">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="20">
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                                        <Key frame="20" value="0.349163" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                                        <Key frame="20" value="-1.40867" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                                        <Key frame="20" value="89.8229" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                                        <Key frame="20" value="18.8943" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                                        <Key frame="20" value="-43.5088" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                                        <Key frame="20" value="-18.7185" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                                        <Key frame="20" value="-58.802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                                        <Key frame="20" value="0.918933" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                                        <Key frame="20" value="89.8278" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                                        <Key frame="20" value="-18.3718" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                                        <Key frame="20" value="44.6466" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                                        <Key frame="20" value="16.7018" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                                        <Key frame="20" value="55.4573" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                                        <Key frame="20" value="0.918205" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                                        <Key frame="20" value="1.05221" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                                        <Key frame="20" value="-1.85673" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                                        <Key frame="20" value="3.41509" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                                        <Key frame="20" value="4.02469" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                                        <Key frame="20" value="-5.98657" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                                        <Key frame="20" value="0.528519" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                                        <Key frame="20" value="0.616411" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                                        <Key frame="20" value="2.10614" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                                        <Key frame="20" value="4.81032" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                                        <Key frame="20" value="-5.45084" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                                        <Key frame="20" value="-0.173507" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                              <Key frame="14" value="116.981" />
                              <Key frame="45" value="118.212" />
                              <Key frame="68" value="116.981" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                              <Key frame="14" value="23.9041" />
                              <Key frame="45" value="14.1482" />
                              <Key frame="68" value="23.9041" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                              <Key frame="14" value="-7.20953" />
                              <Key frame="45" value="26.8925" />
                              <Key frame="68" value="-7.20953" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                              <Key frame="14" value="-17.5759" />
                              <Key frame="45" value="-74.7934" />
                              <Key frame="68" value="-17.5759" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                              <Key frame="14" value="-57.2199" />
                              <Key frame="45" value="-58.2746" />
                              <Key frame="68" value="-57.2199" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                              <Key frame="14" value="0.924024" />
                              <Key frame="45" value="0.924024" />
                              <Key frame="68" value="0.924024" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                              <Key frame="14" value="61.0872" />
                              <Key frame="45" value="54.0558" />
                              <Key frame="68" value="61.0872" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                              <Key frame="14" value="-22.8543" />
                              <Key frame="45" value="-2.46337" />
                              <Key frame="68" value="-22.8543" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                              <Key frame="14" value="12.7419" />
                              <Key frame="45" value="21.4432" />
                              <Key frame="68" value="12.7419" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                              <Key frame="14" value="24.9637" />
                              <Key frame="45" value="73.2162" />
                              <Key frame="68" value="24.9637" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                              <Key frame="14" value="54.4026" />
                              <Key frame="45" value="55.2815" />
                              <Key frame="68" value="54.4026" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                              <Key frame="14" value="0.917842" />
                              <Key frame="45" value="0.469091" />
                              <Key frame="68" value="0.917842" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                              <Key frame="14" value="1.66745" />
                              <Key frame="45" value="-18.284" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                              <Key frame="14" value="-2.73565" />
                              <Key frame="45" value="1.65894" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                              <Key frame="14" value="4.29401" />
                              <Key frame="45" value="-43.607" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                              <Key frame="14" value="4.90361" />
                              <Key frame="45" value="60.0117" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                              <Key frame="14" value="-6.95338" />
                              <Key frame="45" value="-23.477" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                              <Key frame="14" value="0.880086" />
                              <Key frame="45" value="-6.6786" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                              <Key frame="14" value="0.967978" />
                              <Key frame="45" value="-2.54769" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                              <Key frame="14" value="2.36981" />
                              <Key frame="45" value="-37.4451" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                              <Key frame="14" value="5.95291" />
                              <Key frame="45" value="59.3911" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                              <Key frame="14" value="-5.8903" />
                              <Key frame="45" value="-31.1152" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                              <Key frame="14" value="-0.261399" />
                              <Key frame="45" value="7.73675" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="END POSE" id="19" localization="8" tooltip="Add to end of all sequences 1_10&#x0A;" x="620" y="510">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="20">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                            <BehaviorKeyframe name="keyframe17" index="17">
                              <Diagram>
                                <Box name="Eyes LEDs" id="1" localization="8" tooltip="Set the LED color of NAO&apos;s eyes. Note that you must open the box to enter the color." x="302" y="306">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.ids = []

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = ALLeds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        ALLeds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                              <Choice value="Both" />
                                              <Choice value="Left" />
                                              <Choice value="Right" />
                                            </Parameter>
                                            <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                          </Box>
                                          <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <color>#ffffff</color>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                            <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                          </Box>
                                          <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                          <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                              <Key frame="20" value="0.349163" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                              <Key frame="20" value="-1.40867" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                              <Key frame="20" value="89.8229" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                              <Key frame="20" value="18.8943" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                              <Key frame="20" value="-43.5088" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                              <Key frame="20" value="-18.7185" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                              <Key frame="20" value="-58.802" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                              <Key frame="20" value="0.918933" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                              <Key frame="20" value="89.8278" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                              <Key frame="20" value="-18.3718" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                              <Key frame="20" value="44.6466" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                              <Key frame="20" value="16.7018" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                              <Key frame="20" value="55.4573" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                              <Key frame="20" value="0.918205" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                              <Key frame="20" value="1.05221" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                              <Key frame="20" value="-1.85673" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                              <Key frame="20" value="3.41509" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                              <Key frame="20" value="4.02469" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                              <Key frame="20" value="-5.98657" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                              <Key frame="20" value="0.528519" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                              <Key frame="20" value="0.616411" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                              <Key frame="20" value="2.10614" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                              <Key frame="20" value="4.81032" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                              <Key frame="20" value="-5.45084" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                              <Key frame="20" value="-0.173507" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="toSay (2)" id="12" localization="8" tooltip="This Box just transmit the text you entered when its Input is stimulated." plugin="textedit_plugin" x="95" y="556">
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("ach, noch einmal! Sag cheese!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[ach, noch einmal! Sag cheese!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Transmits text." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
                      </Box>
                      <Box name="Say Text (2)" id="13" localization="8" tooltip="Say the text received on its input." x="374" y="615">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay (1)" id="15" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="643" y="352">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Delay (3)" id="20" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="559" y="710">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="104" y="24">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="TakePicture (2)" id="17" localization="8" tooltip="ID : #04C 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags :&#x0A;- Picture" x="529" y="365">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="97">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe14" index="14">
                              <Diagram>
                                <Box name="Blink" id="2" localization="8" tooltip="tags:&#x0A;LED" x="108" y="35">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed5", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed6", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="EyesOnOff" id="6" localization="8" tooltip="tags:&#x0A;LED" x="248" y="36">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = self.getParameter('Timing')

        self.log(self.getParameter('Eyes'))

        if(self.getParameter('Eyes') == 'On'):
            nColor = 0xFFFFFF
        else:
            nColor = 0x000000

        self.leds.fadeRGB( "FaceLeds", nColor, rDuration );

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="Eyes" inherits_from_parent="0" content_type="3" value="Off" default_value="On" custom_choice="0" tooltip="" id="5">
                                    <Choice value="On" />
                                    <Choice value="Off" />
                                  </Parameter>
                                  <Parameter name="Timing" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.05" max="10.05" tooltip="" id="6" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                            <BehaviorKeyframe name="keyframe59" index="59">
                              <Diagram>
                                <Box name="Flash" id="4" localization="8" tooltip="tags:&#x0A;LED" x="84" y="32">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.1;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        time.sleep( 0.05 );

        rDuration = 1;
        self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration );

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="Blink" id="6" localization="8" tooltip="tags:&#x0A;LED" x="247" y="28">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed5", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed6", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <BehaviorLayer name="behavior_layer2">
                            <BehaviorKeyframe name="keyframe57" index="57">
                              <Diagram>
                                <Box name="Play Sound" id="3" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be&#x0A;wav, mp3, or ogg.&#x0A;&#x0A;Note: There can be some delay to play mp3 files. We advise you to use wav if&#x0A;you want a fast play of the file." x="91" y="19">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/camera1.ogg" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on NAO&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on NAO&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                            <Resource name="Audio player" type="Stop on demand" timeout="0" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="14" value="6.8" />
                              <Key frame="26" value="-3.2544" />
                              <Key frame="46" value="-7.8" />
                              <Key frame="61" value="-5.62747" />
                              <Key frame="80" value="5.1" />
                              <Key frame="96" value="-10.0221" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="26" value="-2.46337" />
                              <Key frame="46" value="-2.81494" />
                              <Key frame="61" value="-2.99072" />
                              <Key frame="96" value="-1.145" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="12" value="4.91954" />
                              <Key frame="24" value="3.95273" />
                              <Key frame="60" value="4.2" />
                              <Key frame="69" value="4.2" />
                              <Key frame="81" value="4.91954" />
                              <Key frame="97" value="5.62267" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="12" value="-7.3805" />
                              <Key frame="24" value="-8.69887" />
                              <Key frame="60" value="-6.67737" />
                              <Key frame="69" value="-6.67737" />
                              <Key frame="81" value="-7.3805" />
                              <Key frame="97" value="-6.58948" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="12" value="-53.9" />
                              <Key frame="24" value="-88.5" />
                              <Key frame="44" value="-88.5" />
                              <Key frame="55" value="-88.5" />
                              <Key frame="65" value="-87.8014" />
                              <Key frame="79" value="-81.4" />
                              <Key frame="94" value="-25.4862" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="24" value="-38.9384" />
                              <Key frame="44" value="-27.2488" />
                              <Key frame="55" value="-26.7215" />
                              <Key frame="65" value="-26.4578" />
                              <Key frame="94" value="-66.888" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="12" value="1" />
                              <Key frame="24" value="1" />
                              <Key frame="44" value="1" />
                              <Key frame="55" value="0.9096" />
                              <Key frame="58" value="0.45" />
                              <Key frame="61" value="0.91" />
                              <Key frame="65" value="0.9092" />
                              <Key frame="94" value="0.3024" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="12" value="-17.4002" />
                              <Key frame="24" value="10.11" />
                              <Key frame="60" value="10.2857" />
                              <Key frame="69" value="10.2857" />
                              <Key frame="81" value="-17.4002" />
                              <Key frame="97" value="7.82477" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="12" value="5.53958" />
                              <Key frame="24" value="9.14314" />
                              <Key frame="60" value="6.94585" />
                              <Key frame="69" value="6.94585" />
                              <Key frame="81" value="5.53958" />
                              <Key frame="97" value="6.59428" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="12" value="-13.7087" />
                              <Key frame="24" value="-10.0173" />
                              <Key frame="60" value="-9.84147" />
                              <Key frame="69" value="-9.84147" />
                              <Key frame="81" value="-13.7087" />
                              <Key frame="97" value="-9.84147" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="12" value="14.1482" />
                              <Key frame="24" value="-4.74855" />
                              <Key frame="60" value="-5.29" />
                              <Key frame="69" value="-5.29" />
                              <Key frame="81" value="14.1482" />
                              <Key frame="97" value="-5.18802" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="24" value="-15.0319" />
                              <Key frame="44" value="-20.4812" />
                              <Key frame="55" value="-16.3503" />
                              <Key frame="65" value="-15.9987" />
                              <Key frame="94" value="86.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="12" value="37.5" />
                              <Key frame="24" value="16.697" />
                              <Key frame="44" value="40.0762" />
                              <Key frame="55" value="42.8009" />
                              <Key frame="65" value="41.7462" />
                              <Key frame="94" value="6.67737" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="12" value="-66.5" />
                              <Key frame="24" value="-29.8856" />
                              <Key frame="44" value="-40.2568" />
                              <Key frame="55" value="-39.2021" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="94" value="7.46839" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="12" value="8.5279" />
                              <Key frame="24" value="4.22121" />
                              <Key frame="60" value="4.2" />
                              <Key frame="69" value="4.2" />
                              <Key frame="81" value="8.5279" />
                              <Key frame="97" value="5.71537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="12" value="6.3306" />
                              <Key frame="24" value="5.01224" />
                              <Key frame="60" value="4.66067" />
                              <Key frame="69" value="4.66067" />
                              <Key frame="81" value="6.3306" />
                              <Key frame="97" value="4.39699" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="10" value="59.4" />
                              <Key frame="22" value="88.5" />
                              <Key frame="42" value="88.5" />
                              <Key frame="55" value="88.5" />
                              <Key frame="65" value="87.8062" />
                              <Key frame="79" value="82.2" />
                              <Key frame="92" value="23.9968" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="22" value="37.6153" />
                              <Key frame="42" value="26.8046" />
                              <Key frame="55" value="28.5624" />
                              <Key frame="65" value="27.244" />
                              <Key frame="92" value="66.0922" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="10" value="1" />
                              <Key frame="22" value="0.9004" />
                              <Key frame="42" value="0.9012" />
                              <Key frame="55" value="0.8996" />
                              <Key frame="58" value="0.37" />
                              <Key frame="61" value="0.9" />
                              <Key frame="65" value="0.9004" />
                              <Key frame="92" value="0.3052" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="12" value="-15.2077" />
                              <Key frame="24" value="10.0173" />
                              <Key frame="60" value="10.2809" />
                              <Key frame="69" value="10.2809" />
                              <Key frame="81" value="-15.2077" />
                              <Key frame="97" value="7.64418" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="12" value="-3.51326" />
                              <Key frame="24" value="-2.89802" />
                              <Key frame="60" value="-4.30429" />
                              <Key frame="69" value="-4.30429" />
                              <Key frame="81" value="-3.51326" />
                              <Key frame="97" value="-3.77694" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="12" value="-13.7087" />
                              <Key frame="24" value="-10.0173" />
                              <Key frame="81" value="-13.7087" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="12" value="8.17634" />
                              <Key frame="24" value="-5.18321" />
                              <Key frame="60" value="-5.18321" />
                              <Key frame="69" value="-5.18321" />
                              <Key frame="81" value="8.17634" />
                              <Key frame="97" value="-5.2711" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="22" value="-14.4118" />
                              <Key frame="42" value="-20.5643" />
                              <Key frame="55" value="-16.697" />
                              <Key frame="65" value="-16.3455" />
                              <Key frame="92" value="86.2242" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="10" value="-36.7" />
                              <Key frame="22" value="-24.0847" />
                              <Key frame="42" value="-45.003" />
                              <Key frame="55" value="-43.9483" />
                              <Key frame="65" value="-43.7725" />
                              <Key frame="92" value="-7.29742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="10" value="57" />
                              <Key frame="22" value="31.3749" />
                              <Key frame="42" value="43.0645" />
                              <Key frame="55" value="42.1856" />
                              <Key frame="65" value="42.1856" />
                              <Key frame="92" value="10.193" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                        <Resource name="Standing" type="Lock" timeout="1" />
                        <Resource name="All motors" type="Lock" timeout="1" />
                        <Resource name="Left eye leds" type="Lock" timeout="1" />
                        <Resource name="Right eye leds" type="Lock" timeout="1" />
                        <Resource name="Speakers" type="Lock" timeout="1" />
                      </Box>
                      <Box name="TakePicture" id="7" localization="8" tooltip="ID : #04C 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags :&#x0A;- Picture" x="779" y="317">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="97">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe14" index="14">
                              <Diagram>
                                <Box name="Blink" id="2" localization="8" tooltip="tags:&#x0A;LED" x="108" y="35">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed5", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed6", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="EyesOnOff" id="6" localization="8" tooltip="tags:&#x0A;LED" x="248" y="36">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = self.getParameter('Timing')

        self.log(self.getParameter('Eyes'))

        if(self.getParameter('Eyes') == 'On'):
            nColor = 0xFFFFFF
        else:
            nColor = 0x000000

        self.leds.fadeRGB( "FaceLeds", nColor, rDuration );

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="Eyes" inherits_from_parent="0" content_type="3" value="Off" default_value="On" custom_choice="0" tooltip="" id="5">
                                    <Choice value="On" />
                                    <Choice value="Off" />
                                  </Parameter>
                                  <Parameter name="Timing" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.5" min="0.05" max="10.05" tooltip="" id="6" />
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                            <BehaviorKeyframe name="keyframe59" index="59">
                              <Diagram>
                                <Box name="Flash" id="4" localization="8" tooltip="tags:&#x0A;LED" x="84" y="32">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.1;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        time.sleep( 0.05 );

        rDuration = 1;
        self.leds.fadeRGB( "FaceLeds", 0x000000, rDuration );

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="Blink" id="6" localization="8" tooltip="tags:&#x0A;LED" x="247" y="28">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed5", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed6", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <BehaviorLayer name="behavior_layer2">
                            <BehaviorKeyframe name="keyframe57" index="57">
                              <Diagram>
                                <Box name="Play Sound" id="3" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be&#x0A;wav, mp3, or ogg.&#x0A;&#x0A;Note: There can be some delay to play mp3 files. We advise you to use wav if&#x0A;you want a fast play of the file." x="91" y="19">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/camera1.ogg" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on NAO&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on NAO&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                            <Resource name="Audio player" type="Stop on demand" timeout="0" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="14" value="6.8" />
                              <Key frame="26" value="-3.2544" />
                              <Key frame="46" value="-7.8" />
                              <Key frame="61" value="-5.62747" />
                              <Key frame="80" value="5.1" />
                              <Key frame="96" value="-10.0221" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="26" value="-2.46337" />
                              <Key frame="46" value="-2.81494" />
                              <Key frame="61" value="-2.99072" />
                              <Key frame="96" value="-1.145" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="12" value="4.91954" />
                              <Key frame="24" value="3.95273" />
                              <Key frame="60" value="4.2" />
                              <Key frame="69" value="4.2" />
                              <Key frame="81" value="4.91954" />
                              <Key frame="97" value="5.62267" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="12" value="-7.3805" />
                              <Key frame="24" value="-8.69887" />
                              <Key frame="60" value="-6.67737" />
                              <Key frame="69" value="-6.67737" />
                              <Key frame="81" value="-7.3805" />
                              <Key frame="97" value="-6.58948" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="12" value="-53.9" />
                              <Key frame="24" value="-88.5" />
                              <Key frame="44" value="-88.5" />
                              <Key frame="55" value="-88.5" />
                              <Key frame="65" value="-87.8014" />
                              <Key frame="79" value="-81.4" />
                              <Key frame="94" value="-25.4862" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="24" value="-38.9384" />
                              <Key frame="44" value="-27.2488" />
                              <Key frame="55" value="-26.7215" />
                              <Key frame="65" value="-26.4578" />
                              <Key frame="94" value="-66.888" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="12" value="1" />
                              <Key frame="24" value="1" />
                              <Key frame="44" value="1" />
                              <Key frame="55" value="0.9096" />
                              <Key frame="58" value="0.45" />
                              <Key frame="61" value="0.91" />
                              <Key frame="65" value="0.9092" />
                              <Key frame="94" value="0.3024" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="12" value="-17.4002" />
                              <Key frame="24" value="10.11" />
                              <Key frame="60" value="10.2857" />
                              <Key frame="69" value="10.2857" />
                              <Key frame="81" value="-17.4002" />
                              <Key frame="97" value="7.82477" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="12" value="5.53958" />
                              <Key frame="24" value="9.14314" />
                              <Key frame="60" value="6.94585" />
                              <Key frame="69" value="6.94585" />
                              <Key frame="81" value="5.53958" />
                              <Key frame="97" value="6.59428" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="12" value="-13.7087" />
                              <Key frame="24" value="-10.0173" />
                              <Key frame="60" value="-9.84147" />
                              <Key frame="69" value="-9.84147" />
                              <Key frame="81" value="-13.7087" />
                              <Key frame="97" value="-9.84147" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="12" value="14.1482" />
                              <Key frame="24" value="-4.74855" />
                              <Key frame="60" value="-5.29" />
                              <Key frame="69" value="-5.29" />
                              <Key frame="81" value="14.1482" />
                              <Key frame="97" value="-5.18802" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="24" value="-15.0319" />
                              <Key frame="44" value="-20.4812" />
                              <Key frame="55" value="-16.3503" />
                              <Key frame="65" value="-15.9987" />
                              <Key frame="94" value="86.3073" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="12" value="37.5" />
                              <Key frame="24" value="16.697" />
                              <Key frame="44" value="40.0762" />
                              <Key frame="55" value="42.8009" />
                              <Key frame="65" value="41.7462" />
                              <Key frame="94" value="6.67737" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="12" value="-66.5" />
                              <Key frame="24" value="-29.8856" />
                              <Key frame="44" value="-40.2568" />
                              <Key frame="55" value="-39.2021" />
                              <Key frame="65" value="-39.5537" />
                              <Key frame="94" value="7.46839" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="12" value="8.5279" />
                              <Key frame="24" value="4.22121" />
                              <Key frame="60" value="4.2" />
                              <Key frame="69" value="4.2" />
                              <Key frame="81" value="8.5279" />
                              <Key frame="97" value="5.71537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="12" value="6.3306" />
                              <Key frame="24" value="5.01224" />
                              <Key frame="60" value="4.66067" />
                              <Key frame="69" value="4.66067" />
                              <Key frame="81" value="6.3306" />
                              <Key frame="97" value="4.39699" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="10" value="59.4" />
                              <Key frame="22" value="88.5" />
                              <Key frame="42" value="88.5" />
                              <Key frame="55" value="88.5" />
                              <Key frame="65" value="87.8062" />
                              <Key frame="79" value="82.2" />
                              <Key frame="92" value="23.9968" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="22" value="37.6153" />
                              <Key frame="42" value="26.8046" />
                              <Key frame="55" value="28.5624" />
                              <Key frame="65" value="27.244" />
                              <Key frame="92" value="66.0922" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="10" value="1" />
                              <Key frame="22" value="0.9004" />
                              <Key frame="42" value="0.9012" />
                              <Key frame="55" value="0.8996" />
                              <Key frame="58" value="0.37" />
                              <Key frame="61" value="0.9" />
                              <Key frame="65" value="0.9004" />
                              <Key frame="92" value="0.3052" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="12" value="-15.2077" />
                              <Key frame="24" value="10.0173" />
                              <Key frame="60" value="10.2809" />
                              <Key frame="69" value="10.2809" />
                              <Key frame="81" value="-15.2077" />
                              <Key frame="97" value="7.64418" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="12" value="-3.51326" />
                              <Key frame="24" value="-2.89802" />
                              <Key frame="60" value="-4.30429" />
                              <Key frame="69" value="-4.30429" />
                              <Key frame="81" value="-3.51326" />
                              <Key frame="97" value="-3.77694" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="12" value="-13.7087" />
                              <Key frame="24" value="-10.0173" />
                              <Key frame="81" value="-13.7087" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="12" value="8.17634" />
                              <Key frame="24" value="-5.18321" />
                              <Key frame="60" value="-5.18321" />
                              <Key frame="69" value="-5.18321" />
                              <Key frame="81" value="8.17634" />
                              <Key frame="97" value="-5.2711" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="22" value="-14.4118" />
                              <Key frame="42" value="-20.5643" />
                              <Key frame="55" value="-16.697" />
                              <Key frame="65" value="-16.3455" />
                              <Key frame="92" value="86.2242" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="10" value="-36.7" />
                              <Key frame="22" value="-24.0847" />
                              <Key frame="42" value="-45.003" />
                              <Key frame="55" value="-43.9483" />
                              <Key frame="65" value="-43.7725" />
                              <Key frame="92" value="-7.29742" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="10" value="57" />
                              <Key frame="22" value="31.3749" />
                              <Key frame="42" value="43.0645" />
                              <Key frame="55" value="42.1856" />
                              <Key frame="65" value="42.1856" />
                              <Key frame="92" value="10.193" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                        <Resource name="Standing" type="Lock" timeout="1" />
                        <Resource name="All motors" type="Lock" timeout="1" />
                        <Resource name="Left eye leds" type="Lock" timeout="1" />
                        <Resource name="Right eye leds" type="Lock" timeout="1" />
                        <Resource name="Speakers" type="Lock" timeout="1" />
                      </Box>
                      <Box name="Gorilla (1)" id="16" localization="8" tooltip="ID : #04A 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Gorilla&#x0A;" x="684" y="29">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="268">
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="8" value="-9.84929" />
                              <Key frame="26" value="-21.9" />
                              <Key frame="42" value="-38.5" />
                              <Key frame="54" value="-20.4812" />
                              <Key frame="71" value="-12.8346" />
                              <Key frame="82" value="-11.4283" />
                              <Key frame="93" value="-16.6" />
                              <Key frame="103" value="-13.3263" />
                              <Key frame="109" value="-16.6" />
                              <Key frame="115" value="-13.3263" />
                              <Key frame="120" value="-16.6" />
                              <Key frame="125" value="-13.3263" />
                              <Key frame="130" value="-16.6" />
                              <Key frame="135" value="-13.3263" />
                              <Key frame="140" value="-16.6" />
                              <Key frame="145" value="-13.3263" />
                              <Key frame="150" value="-16.6" />
                              <Key frame="157" value="-31.7712" />
                              <Key frame="172" value="-28.1" />
                              <Key frame="188" value="-38.5" />
                              <Key frame="198" value="-13.8893" />
                              <Key frame="211" value="-12.8346" />
                              <Key frame="229" value="4.7" />
                              <Key frame="250" value="-8.51502" />
                              <Key frame="268" value="-10.2843" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="8" value="0.524544" />
                              <Key frame="42" value="-0.266077" />
                              <Key frame="54" value="-0.266077" />
                              <Key frame="71" value="0.700723" />
                              <Key frame="82" value="0.700723" />
                              <Key frame="93" value="-0.0140832" />
                              <Key frame="103" value="0.626383" />
                              <Key frame="109" value="-0.0140832" />
                              <Key frame="115" value="0.626383" />
                              <Key frame="120" value="-0.0140832" />
                              <Key frame="125" value="0.626383" />
                              <Key frame="130" value="-0.0140832" />
                              <Key frame="135" value="0.626383" />
                              <Key frame="140" value="-0.0140832" />
                              <Key frame="145" value="0.626383" />
                              <Key frame="150" value="-0.0140832" />
                              <Key frame="157" value="0" />
                              <Key frame="172" value="-0.266077" />
                              <Key frame="188" value="-0.266077" />
                              <Key frame="198" value="-0.00240423" />
                              <Key frame="211" value="0.700723" />
                              <Key frame="250" value="-0.567633" />
                              <Key frame="268" value="-0.480661" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="8" value="5.15662" />
                              <Key frame="42" value="-47.6346" />
                              <Key frame="54" value="-50.5723" />
                              <Key frame="71" value="-15.9987" />
                              <Key frame="93" value="-5.80326" />
                              <Key frame="118" value="-17.3171" />
                              <Key frame="148" value="-17.3171" />
                              <Key frame="157" value="-21.5359" />
                              <Key frame="172" value="-50.7159" />
                              <Key frame="188" value="-50.7159" />
                              <Key frame="198" value="-15.9987" />
                              <Key frame="211" value="-11.1647" />
                              <Key frame="229" value="-2.63916" />
                              <Key frame="250" value="4.80387" />
                              <Key frame="268" value="5.11475" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="8" value="-7.82207" />
                              <Key frame="42" value="-1.33228" />
                              <Key frame="54" value="-0.295102" />
                              <Key frame="71" value="-4.30429" />
                              <Key frame="93" value="14.3288" />
                              <Key frame="118" value="13.6256" />
                              <Key frame="148" value="13.6256" />
                              <Key frame="157" value="12.1315" />
                              <Key frame="172" value="0" />
                              <Key frame="188" value="0" />
                              <Key frame="198" value="-4.30429" />
                              <Key frame="211" value="12.6588" />
                              <Key frame="229" value="-0.261268" />
                              <Key frame="250" value="-8.23111" />
                              <Key frame="268" value="-7.76345" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="8" value="-23.8756" />
                              <Key frame="26" value="-81.1" />
                              <Key frame="42" value="-12" />
                              <Key frame="54" value="-12.8091" />
                              <Key frame="71" value="-30.3" />
                              <Key frame="84" value="-52.5" />
                              <Key frame="95" value="-58.8535" />
                              <Key frame="103" value="-88.4547" />
                              <Key frame="109" value="-61.6441" />
                              <Key frame="115" value="-88.4406" />
                              <Key frame="120" value="-61.6441" />
                              <Key frame="125" value="-87.9664" />
                              <Key frame="130" value="-61.504" />
                              <Key frame="135" value="-88.322" />
                              <Key frame="140" value="-62.0779" />
                              <Key frame="145" value="-88.4406" />
                              <Key frame="150" value="-66.8289" />
                              <Key frame="159" value="-2.52888" />
                              <Key frame="172" value="-17.3" />
                              <Key frame="188" value="-10.5446" />
                              <Key frame="198" value="-10.4567" />
                              <Key frame="211" value="-36.4" />
                              <Key frame="229" value="-38.4321" />
                              <Key frame="250" value="-25.4784" />
                              <Key frame="268" value="-23.9847" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="8" value="-68.4559" />
                              <Key frame="26" value="-39.1" />
                              <Key frame="42" value="-88.2" />
                              <Key frame="54" value="-65.1716" />
                              <Key frame="71" value="-60.384" />
                              <Key frame="84" value="-60.0324" />
                              <Key frame="95" value="-33.0148" />
                              <Key frame="103" value="-15.8961" />
                              <Key frame="109" value="-15.8961" />
                              <Key frame="115" value="-15.8961" />
                              <Key frame="120" value="-15.8961" />
                              <Key frame="125" value="-15.8961" />
                              <Key frame="130" value="-15.8961" />
                              <Key frame="135" value="-15.8961" />
                              <Key frame="140" value="-15.8961" />
                              <Key frame="145" value="-15.8961" />
                              <Key frame="150" value="-15.8961" />
                              <Key frame="159" value="-36.2478" />
                              <Key frame="172" value="-60.2082" />
                              <Key frame="188" value="-60.2082" />
                              <Key frame="198" value="-61.0872" />
                              <Key frame="211" value="-32.4" />
                              <Key frame="229" value="-49.7814" />
                              <Key frame="250" value="-67.7115" />
                              <Key frame="268" value="-68.2723" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="8" value="0.2918" />
                              <Key frame="26" value="0" />
                              <Key frame="42" value="0.57" />
                              <Key frame="54" value="0" />
                              <Key frame="71" value="0.054" />
                              <Key frame="82" value="0.0552" />
                              <Key frame="93" value="0.01456" />
                              <Key frame="101" value="0.00396501" />
                              <Key frame="107" value="0.510166" />
                              <Key frame="113" value="0" />
                              <Key frame="118" value="0.510166" />
                              <Key frame="123" value="0.00607498" />
                              <Key frame="128" value="0.510166" />
                              <Key frame="133" value="0.00391997" />
                              <Key frame="138" value="0.510166" />
                              <Key frame="143" value="0.00728999" />
                              <Key frame="148" value="0.114844" />
                              <Key frame="157" value="0.304851" />
                              <Key frame="172" value="0.0492001" />
                              <Key frame="188" value="0.0492001" />
                              <Key frame="198" value="0.054" />
                              <Key frame="211" value="0.054" />
                              <Key frame="229" value="0.67" />
                              <Key frame="250" value="0.33889" />
                              <Key frame="268" value="0.294559" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="8" value="7.07452" />
                              <Key frame="42" value="-69.1403" />
                              <Key frame="54" value="-69.892" />
                              <Key frame="71" value="-88" />
                              <Key frame="93" value="-87.7135" />
                              <Key frame="118" value="-73.563" />
                              <Key frame="148" value="-73.563" />
                              <Key frame="157" value="-80.9459" />
                              <Key frame="172" value="-70.3989" />
                              <Key frame="188" value="-70.3989" />
                              <Key frame="198" value="-88" />
                              <Key frame="211" value="-87.4499" />
                              <Key frame="229" value="-32.2539" />
                              <Key frame="250" value="5.9767" />
                              <Key frame="268" value="7.39015" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="8" value="5.63552" />
                              <Key frame="42" value="-18.7117" />
                              <Key frame="54" value="-21.5989" />
                              <Key frame="71" value="-18.4549" />
                              <Key frame="93" value="-15.906" />
                              <Key frame="118" value="-14.4997" />
                              <Key frame="148" value="-14.4997" />
                              <Key frame="157" value="-16.0818" />
                              <Key frame="172" value="-21.74" />
                              <Key frame="188" value="-21.74" />
                              <Key frame="198" value="-18.4549" />
                              <Key frame="211" value="-18.367" />
                              <Key frame="229" value="-2.81013" />
                              <Key frame="250" value="6.20275" />
                              <Key frame="268" value="6.20348" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="8" value="-9.84409" />
                              <Key frame="42" value="-59.6158" />
                              <Key frame="54" value="-62.8575" />
                              <Key frame="71" value="-60.2913" />
                              <Key frame="93" value="-60.3792" />
                              <Key frame="118" value="-55.8967" />
                              <Key frame="148" value="-55.8967" />
                              <Key frame="157" value="-54.4026" />
                              <Key frame="172" value="-63.016" />
                              <Key frame="188" value="-63.016" />
                              <Key frame="198" value="-60.2913" />
                              <Key frame="211" value="-61.7855" />
                              <Key frame="229" value="-29.1777" />
                              <Key frame="250" value="-10.429" />
                              <Key frame="268" value="-10.1725" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="8" value="-4.79482" />
                              <Key frame="42" value="115.981" />
                              <Key frame="54" value="120.804" />
                              <Key frame="71" value="108.104" />
                              <Key frame="93" value="112.851" />
                              <Key frame="118" value="104.765" />
                              <Key frame="148" value="104.765" />
                              <Key frame="157" value="110.214" />
                              <Key frame="172" value="121.04" />
                              <Key frame="188" value="121.04" />
                              <Key frame="198" value="108.104" />
                              <Key frame="211" value="111.708" />
                              <Key frame="229" value="40.4278" />
                              <Key frame="250" value="-3.34525" />
                              <Key frame="268" value="-5.06757" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="8" value="84.3432" />
                              <Key frame="42" value="20.4571" />
                              <Key frame="54" value="15.7209" />
                              <Key frame="71" value="17.8986" />
                              <Key frame="82" value="18.3381" />
                              <Key frame="93" value="18.7871" />
                              <Key frame="101" value="-1.06845" />
                              <Key frame="107" value="19.3434" />
                              <Key frame="113" value="-1.05474" />
                              <Key frame="118" value="19.3434" />
                              <Key frame="123" value="-0.912421" />
                              <Key frame="128" value="19.2027" />
                              <Key frame="133" value="-1.24519" />
                              <Key frame="138" value="19.156" />
                              <Key frame="143" value="-0.993287" />
                              <Key frame="148" value="14.5825" />
                              <Key frame="157" value="30.3155" />
                              <Key frame="172" value="15.5255" />
                              <Key frame="188" value="15.5255" />
                              <Key frame="198" value="16.1408" />
                              <Key frame="211" value="17.8986" />
                              <Key frame="229" value="50.8976" />
                              <Key frame="250" value="80.0169" />
                              <Key frame="268" value="83.7803" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="8" value="10.4273" />
                              <Key frame="26" value="29.4" />
                              <Key frame="42" value="-1.93602" />
                              <Key frame="54" value="-1.48766" />
                              <Key frame="71" value="-3.34228" />
                              <Key frame="82" value="-4.39699" />
                              <Key frame="93" value="40.0449" />
                              <Key frame="101" value="26.1544" />
                              <Key frame="107" value="49.3442" />
                              <Key frame="113" value="26.6014" />
                              <Key frame="118" value="49.3442" />
                              <Key frame="123" value="26.4811" />
                              <Key frame="128" value="48.8986" />
                              <Key frame="133" value="26.1558" />
                              <Key frame="138" value="48.8986" />
                              <Key frame="143" value="26.6014" />
                              <Key frame="148" value="45.1993" />
                              <Key frame="157" value="5.45398" />
                              <Key frame="172" value="-1.93602" />
                              <Key frame="188" value="-1.93602" />
                              <Key frame="198" value="-3.1665" />
                              <Key frame="211" value="-3.34228" />
                              <Key frame="229" value="23.2414" />
                              <Key frame="250" value="12.7664" />
                              <Key frame="268" value="10.3043" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="8" value="5.88233" />
                              <Key frame="26" value="6.8" />
                              <Key frame="42" value="14.6" />
                              <Key frame="54" value="39.0438" />
                              <Key frame="71" value="43.0645" />
                              <Key frame="82" value="42.0098" />
                              <Key frame="93" value="-7.37445" />
                              <Key frame="101" value="-37.3321" />
                              <Key frame="107" value="-37.3321" />
                              <Key frame="113" value="-37.3321" />
                              <Key frame="118" value="-37.3321" />
                              <Key frame="123" value="-37.3321" />
                              <Key frame="128" value="-37.3321" />
                              <Key frame="133" value="-37.3321" />
                              <Key frame="138" value="-37.3321" />
                              <Key frame="143" value="-37.3321" />
                              <Key frame="148" value="-37.3321" />
                              <Key frame="157" value="14.7929" />
                              <Key frame="172" value="43.3282" />
                              <Key frame="188" value="43.3282" />
                              <Key frame="198" value="43.0645" />
                              <Key frame="211" value="43.0645" />
                              <Key frame="229" value="-77.2" />
                              <Key frame="250" value="-4.16376" />
                              <Key frame="268" value="5.4059" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="8" value="4.95848" />
                              <Key frame="42" value="-44.1003" />
                              <Key frame="54" value="-46.9675" />
                              <Key frame="71" value="-35.9453" />
                              <Key frame="93" value="-25.3983" />
                              <Key frame="118" value="-28.1229" />
                              <Key frame="148" value="-28.1229" />
                              <Key frame="157" value="-39.1973" />
                              <Key frame="172" value="-47.1076" />
                              <Key frame="188" value="-47.1076" />
                              <Key frame="198" value="-35.9453" />
                              <Key frame="211" value="-29.705" />
                              <Key frame="229" value="-8.61098" />
                              <Key frame="250" value="4.39472" />
                              <Key frame="268" value="4.73901" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="8" value="7.02546" />
                              <Key frame="42" value="0.244606" />
                              <Key frame="54" value="-0.740477" />
                              <Key frame="71" value="-1.57965" />
                              <Key frame="93" value="-5.53478" />
                              <Key frame="118" value="-5.00743" />
                              <Key frame="148" value="-5.00743" />
                              <Key frame="157" value="-4.65585" />
                              <Key frame="172" value="-0.788627" />
                              <Key frame="188" value="-0.788627" />
                              <Key frame="198" value="-1.57965" />
                              <Key frame="211" value="-3.95273" />
                              <Key frame="229" value="0.793436" />
                              <Key frame="250" value="6.959" />
                              <Key frame="268" value="7.34719" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="8" value="23.6032" />
                              <Key frame="26" value="81.1" />
                              <Key frame="42" value="12" />
                              <Key frame="54" value="5.20832" />
                              <Key frame="71" value="11.4283" />
                              <Key frame="84" value="2" />
                              <Key frame="95" value="47.0903" />
                              <Key frame="103" value="69.1978" />
                              <Key frame="109" value="88.4826" />
                              <Key frame="115" value="69.5741" />
                              <Key frame="120" value="88.4771" />
                              <Key frame="125" value="69.7061" />
                              <Key frame="130" value="88.0315" />
                              <Key frame="135" value="69.9346" />
                              <Key frame="140" value="88.0315" />
                              <Key frame="145" value="69.6311" />
                              <Key frame="150" value="75.7053" />
                              <Key frame="159" value="2.56215" />
                              <Key frame="172" value="7.9" />
                              <Key frame="188" value="2" />
                              <Key frame="198" value="2" />
                              <Key frame="211" value="11.4283" />
                              <Key frame="229" value="37.0093" />
                              <Key frame="250" value="24.119" />
                              <Key frame="268" value="23.7862" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="8" value="68.9325" />
                              <Key frame="26" value="39.1" />
                              <Key frame="42" value="88.2" />
                              <Key frame="54" value="87.0433" />
                              <Key frame="71" value="85.1647" />
                              <Key frame="84" value="84.11" />
                              <Key frame="95" value="16.2825" />
                              <Key frame="103" value="16.2825" />
                              <Key frame="109" value="16.2825" />
                              <Key frame="115" value="16.2825" />
                              <Key frame="120" value="16.2825" />
                              <Key frame="125" value="16.2825" />
                              <Key frame="130" value="16.2825" />
                              <Key frame="135" value="16.2825" />
                              <Key frame="140" value="16.2825" />
                              <Key frame="145" value="16.2825" />
                              <Key frame="150" value="16.2825" />
                              <Key frame="159" value="33.6513" />
                              <Key frame="172" value="85.2526" />
                              <Key frame="188" value="85.2526" />
                              <Key frame="198" value="84.2858" />
                              <Key frame="211" value="85.1647" />
                              <Key frame="229" value="49.7814" />
                              <Key frame="250" value="67.3553" />
                              <Key frame="268" value="68.2695" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="8" value="0.304283" />
                              <Key frame="26" value="0" />
                              <Key frame="42" value="0.57" />
                              <Key frame="54" value="0" />
                              <Key frame="71" value="0.07" />
                              <Key frame="82" value="0.3724" />
                              <Key frame="93" value="0.00387714" />
                              <Key frame="101" value="0.410699" />
                              <Key frame="107" value="0.00173999" />
                              <Key frame="113" value="0.410699" />
                              <Key frame="118" value="0.00101498" />
                              <Key frame="123" value="0.410699" />
                              <Key frame="128" value="0.00850497" />
                              <Key frame="133" value="0.410699" />
                              <Key frame="138" value="0" />
                              <Key frame="143" value="0.410699" />
                              <Key frame="148" value="0.0103306" />
                              <Key frame="157" value="0.157731" />
                              <Key frame="172" value="0.3744" />
                              <Key frame="188" value="0.3744" />
                              <Key frame="198" value="0.3644" />
                              <Key frame="211" value="0.826" />
                              <Key frame="229" value="0.67" />
                              <Key frame="250" value="0.349675" />
                              <Key frame="268" value="0.306788" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="8" value="7.0775" />
                              <Key frame="42" value="-74.0462" />
                              <Key frame="54" value="-74.8103" />
                              <Key frame="71" value="-87.3668" />
                              <Key frame="93" value="-73.8315" />
                              <Key frame="118" value="-57.8352" />
                              <Key frame="148" value="-57.8352" />
                              <Key frame="157" value="-63.2844" />
                              <Key frame="172" value="-75.3256" />
                              <Key frame="188" value="-75.3256" />
                              <Key frame="198" value="-87.3668" />
                              <Key frame="211" value="-76.9956" />
                              <Key frame="229" value="-32.4345" />
                              <Key frame="250" value="5.88244" />
                              <Key frame="268" value="7.36624" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="8" value="-5.72958" />
                              <Key frame="42" value="17.907" />
                              <Key frame="54" value="19.911" />
                              <Key frame="71" value="15.735" />
                              <Key frame="93" value="14.7682" />
                              <Key frame="118" value="15.735" />
                              <Key frame="148" value="15.735" />
                              <Key frame="157" value="15.3835" />
                              <Key frame="172" value="20.4812" />
                              <Key frame="188" value="20.4812" />
                              <Key frame="198" value="15.735" />
                              <Key frame="211" value="15.1198" />
                              <Key frame="229" value="2.72705" />
                              <Key frame="250" value="-5.47326" />
                              <Key frame="268" value="-5.72363" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="8" value="-9.84409" />
                              <Key frame="42" value="-59.6158" />
                              <Key frame="54" value="-62.8575" />
                              <Key frame="71" value="-60.2913" />
                              <Key frame="93" value="-60.3792" />
                              <Key frame="118" value="-55.8967" />
                              <Key frame="148" value="-55.8967" />
                              <Key frame="157" value="-54.4026" />
                              <Key frame="172" value="-63.016" />
                              <Key frame="188" value="-63.016" />
                              <Key frame="198" value="-60.2913" />
                              <Key frame="211" value="-61.7855" />
                              <Key frame="229" value="-29.1777" />
                              <Key frame="250" value="-10.429" />
                              <Key frame="268" value="-10.1725" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="8" value="-4.69973" />
                              <Key frame="42" value="116.022" />
                              <Key frame="54" value="120.806" />
                              <Key frame="71" value="120.59" />
                              <Key frame="93" value="120.502" />
                              <Key frame="118" value="104.945" />
                              <Key frame="148" value="104.945" />
                              <Key frame="157" value="111.976" />
                              <Key frame="172" value="121.04" />
                              <Key frame="188" value="121.04" />
                              <Key frame="198" value="120.59" />
                              <Key frame="211" value="116.635" />
                              <Key frame="229" value="44.6514" />
                              <Key frame="250" value="-3.23065" />
                              <Key frame="268" value="-5.06046" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="8" value="84.1835" />
                              <Key frame="42" value="22.2417" />
                              <Key frame="54" value="22.3605" />
                              <Key frame="71" value="41.6631" />
                              <Key frame="82" value="36.829" />
                              <Key frame="93" value="15.1635" />
                              <Key frame="101" value="35.0191" />
                              <Key frame="107" value="14.6072" />
                              <Key frame="113" value="35.0054" />
                              <Key frame="118" value="14.6072" />
                              <Key frame="123" value="34.8631" />
                              <Key frame="128" value="14.7479" />
                              <Key frame="133" value="35.1958" />
                              <Key frame="138" value="14.7946" />
                              <Key frame="143" value="34.9439" />
                              <Key frame="148" value="18.314" />
                              <Key frame="157" value="29.4286" />
                              <Key frame="172" value="22.5027" />
                              <Key frame="188" value="22.5027" />
                              <Key frame="198" value="23.9968" />
                              <Key frame="211" value="41.6631" />
                              <Key frame="229" value="75.9202" />
                              <Key frame="250" value="82.2838" />
                              <Key frame="268" value="83.8255" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="8" value="-10.4935" />
                              <Key frame="26" value="-29.4" />
                              <Key frame="42" value="2.98591" />
                              <Key frame="54" value="2.83221" />
                              <Key frame="71" value="14.1482" />
                              <Key frame="82" value="-0.793436" />
                              <Key frame="93" value="-24.2349" />
                              <Key frame="101" value="-48.8999" />
                              <Key frame="107" value="-26.1558" />
                              <Key frame="113" value="-48.8986" />
                              <Key frame="118" value="-26.1558" />
                              <Key frame="123" value="-49.0189" />
                              <Key frame="128" value="-26.6014" />
                              <Key frame="133" value="-49.3442" />
                              <Key frame="138" value="-26.6014" />
                              <Key frame="143" value="-48.8986" />
                              <Key frame="148" value="-30.3007" />
                              <Key frame="157" value="3.86583" />
                              <Key frame="172" value="2.98591" />
                              <Key frame="188" value="2.98591" />
                              <Key frame="198" value="3.68905" />
                              <Key frame="211" value="14.1482" />
                              <Key frame="229" value="-37.6671" />
                              <Key frame="250" value="-14.6104" />
                              <Key frame="268" value="-10.6301" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="8" value="5.67181" />
                              <Key frame="26" value="-6.8" />
                              <Key frame="42" value="-14.6" />
                              <Key frame="54" value="-52.918" />
                              <Key frame="71" value="-59.593" />
                              <Key frame="82" value="-67.5033" />
                              <Key frame="93" value="37.1888" />
                              <Key frame="101" value="37.1888" />
                              <Key frame="107" value="37.1888" />
                              <Key frame="113" value="37.1888" />
                              <Key frame="118" value="37.1888" />
                              <Key frame="123" value="37.1888" />
                              <Key frame="128" value="37.1888" />
                              <Key frame="133" value="37.1888" />
                              <Key frame="138" value="37.1888" />
                              <Key frame="143" value="37.1888" />
                              <Key frame="148" value="37.1888" />
                              <Key frame="157" value="-20.1526" />
                              <Key frame="172" value="-59.593" />
                              <Key frame="188" value="-59.593" />
                              <Key frame="198" value="-59.7688" />
                              <Key frame="211" value="-59.593" />
                              <Key frame="229" value="77.2" />
                              <Key frame="250" value="13.6644" />
                              <Key frame="268" value="5.33957" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                        <Resource name="Standing" type="Lock" timeout="1" />
                        <Resource name="All motors" type="Lock" timeout="1" />
                      </Box>
                      <Box name="Only Once" id="6" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="379" y="389">
                        <bitmap>media/images/box/loop.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                        <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                      </Box>
                      <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                      <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="3" />
                      <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                      <Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="7" />
                      <Link inputowner="11" indexofinput="3" outputowner="10" indexofoutput="8" />
                      <Link inputowner="19" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="3" />
                      <Link inputowner="0" indexofinput="4" outputowner="19" indexofoutput="4" />
                      <Link inputowner="20" indexofinput="2" outputowner="13" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="20" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="17" indexofoutput="4" />
                      <Link inputowner="7" indexofinput="2" outputowner="15" indexofoutput="4" />
                      <Link inputowner="12" indexofinput="2" outputowner="15" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="3" outputowner="16" indexofoutput="4" />
                      <Link inputowner="14" indexofinput="2" outputowner="16" indexofoutput="4" />
                      <Link inputowner="16" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="11" indexofoutput="4" />
                      <Link inputowner="17" indexofinput="2" outputowner="6" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Intro (1)" id="1" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="93" y="24">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="no" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
              <Output name="yes" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="70.7107">
                      <Box name="Tactile Head" id="15" localization="8" tooltip="Detect touch on head tactile sensor." x="636" y="122">
                        <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                        <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                        <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                        <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                        <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="Head-sequence" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say Text" id="18" localization="8" tooltip="Say the text received on its input." x="506" y="107">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="96" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (1)" id="20" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="828" y="84">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Heute werdet ihr von mir, dem majestätischen, humanoiden Roboter Nao 6 trainiert! ")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Heute werdet ihr von mir, dem majestätischen, humanoiden Roboter Nao 6 trainiert! ]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (1)" id="21" localization="8" tooltip="Say the text received on its input." x="1447" y="72">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="94" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (2)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1102" y="184">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Okay, wir werden eine Reihe von Übungen für unseren Körper machen und werden \nstärker und gesünder. Ich zeige euch Übungen, und ihr solltet mir folgen. \nZuerst drehen wir unsere Köpfe. Legt eure Hände auf die Schulter und wiederholt mit mir!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Okay, wir werden eine Reihe von Übungen für unseren Körper machen und werden 
stärker und gesünder. Ich zeige euch Übungen, und ihr solltet mir folgen. 
Zuerst drehen wir unsere Köpfe. Legt eure Hände auf die Schulter und wiederholt mit mir!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text (2)" id="23" localization="8" tooltip="Say the text received on its input." x="1398" y="200">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="108" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay" id="24" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="949" y="199">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Text Edit" id="12" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="250" y="66">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Wunderbar! Freue mich mit euch zu trainieren! \nBringt euch  zuerst in die richtige Körperlage, \nund berührt dann meinen Kopf, wenn ihr bereit seid! ")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Wunderbar! Freue mich mit euch zu trainieren! 
Bringt euch  zuerst in die richtige Körperlage, 
und berührt dann meinen Kopf, wenn ihr bereit seid! ]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Workout offer" id="6" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="89" y="17">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="NO" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                        <Output name="YES" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="70.7107">
                                <Box name="Switch Case" id="11" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="493" y="250">
                                  <bitmap>media/images/box/interaction/choice.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("nein")):
			self.output_1(p)
		elif(p == self.typeConversion("ja")):
			self.output_2(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <keywords>
                                      <keyword>&quot;nein&quot;</keyword>
                                      <keyword>&quot;ja&quot;</keyword>
                                      <keyword></keyword>
                                    </keywords>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                  <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                  <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                  <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                </Box>
                                <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="549" y="35">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Parameter name="Text" inherits_from_parent="0" content_type="5" value="okay!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Choice" id="16" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. The recognized answer is sent to the answer output.&#x0A;&#x0A;Note that you must open this box to enter the question text and the&#x0A;available answers." x="324" y="182">
                                  <bitmap>media/images/box/interaction/choice.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Output name="answer" type="3" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Choice" id="1" localization="8" tooltip="The Choice box is based on the dialog engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. Each recognized answer stimulate its&#x0A;corresponding output.&#x0A;Setting the choices in the box table:&#x0A;- Edit a choice by left double-clicking on its line.&#x0A;- Add a choice by right clicking on a line and selecting &apos;Insert a row&apos;.&#x0A;- Delete a choice by right clicking on its line and selecting &apos;Remove a row&apos;.&#x0A;- Write alternative answers for one choice by separating the phrases with &apos;/&apos; in the same line (e.g.: apple pie / pie / apple)." plugin="ui_choice_plugin" x="333" y="51">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v9
# @author Desktop Application team
# (c) 2014 Aldebaran Robotics

import os
import tempfile
import shutil
import uuid
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.dialogIsRunning = False
        self.dialogIsLoaded = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.langDict = {
            "Arabic":"arw",
            "Czech":"czc",
            "Danish":"dad",
            "German":"ged",
            "Greek":"grg",
            "English":"enu",
            "Spanish":"spe",
            "Finnish":"fif",
            "French":"frf",
            "Italian":"iti",
            "Japanese":"jpj",
            "Korean":"kok",
            "Dutch":"dun",
            "Norwegian":"nor",
            "Polish":"plp",
            "Brazilian":"ptb",
            "Portuguese":"ptp",
            "Russian":"rur",
            "Swedish":"sws",
            "Turkish":"trt",
            "Chinese":"mnc",
            "MandarinTaiwan":"mnt"
        }
        # end - choices

        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aDialogChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 10
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")

# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # SERVICE INITIALIZATIONS
        self.animSpeech = self.session().service("ALAnimatedSpeech")
        self.tts = self.session().service("ALTextToSpeech")
        self.memory = self.session().service("ALMemory")
        self.motion = self.session().service("ALMotion")

        try:
            self.dcm = self.session().service( "DCM" )
        except:
            self.dcm = None

        try:
            self.dialog = self.session().service("ALDialog")
        except:
            self.dialog = None
            raise RuntimeError("Choice box cannot be launched, as Dialog is not available.")

        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True
        self.generateTopicFile()

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", ""], "Brazilian": ["sim", "não", ""], "Chinese": ["是", "不是", ""], "Czech": ["ano", "ne", ""], "Danish": ["ja", "nej", ""], "Dutch": ["ja", "nee", ""], "English": ["ja", "nein", ""], "Finnish": ["kyllä", "ei", ""], "French": ["oui", "non", ""], "German": ["ja", "nein", ""], "Greek": ["", ""], "Italian": ["sì", "no", ""], "Japanese": ["はい", "いいえ", ""], "Korean": ["예", "아니", ""], "MandarinTaiwan": ["是", "不是", ""], "Norwegian": ["", ""], "Polish": ["tak", "nie", ""], "Portuguese": ["sim", "não", ""], "Russian": ["да", "нет", ""], "Spanish": ["si", "no", ""], "Swedish": ["ja", "ingen", ""], "Turkish": ["evet", "hayır", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        language = self.tts.getLanguage()
        try:
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.getLocalizedStringList("TTS confirmation")
            self.getLocalizedStringList("TTS enumMarks")
            self.getLocalizedStringList("TTS helpEnumChoices")
            self.getLocalizedStringList("TTS helpEnumDefault")
            self.getLocalizedStringList("TTS helpTactile")
            self.getLocalizedStringList("TTS notUnderstood")
            self.getLocalizedStringList("TTS noQuestion")
            self.getLocalizedStringList("TTS notUnderstoodAnims")
        except Exception as e:
            raise Exception( "The current language is not supported by this Choice box. Internal sentences are missing for this language. (%s)" % e)
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.guid = ""
        self.lastHeadPos = None
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 10 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateBrainLight =  True
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.bodyLanguageMode = self.tryGetParameter( "Body language mode", "contextual" )
        self.dialog.setASRConfidenceThreshold(self.rUnderstoodThreshold )
        self.animSpeech.setBodyLanguageModeFromStr(self.bodyLanguageMode)
        self.aDefaultChoices = []
        self.aDialogDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.asHelpWords = self.removeUnauthorizedCharacters(self.asHelpWords)
            self.aDefaultChoices.append( self.asHelpWords )
            self.aDialogDefaultChoices += self.asHelpWords
        if (self.bActivateDefaultChoiceRepeat):
            self.asRepeatWords = self.removeUnauthorizedCharacters(self.asRepeatWords)
            self.aDefaultChoices.append( self.asRepeatWords )
            self.aDialogDefaultChoices += self.asRepeatWords
        if (self.bActivateDefaultChoiceExit):
            self.asExitWords = self.removeUnauthorizedCharacters(self.asExitWords)
            self.aDefaultChoices.append( self.asExitWords )
            self.aDialogDefaultChoices += self.asExitWords
        if( question == None ):
            question = ""
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        self.initQuestionAndChoices( question )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        if( not self.bGoOut ):
            self.questionRecognitionReaction()

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = self.tts.getLanguage()
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            self.aDialogDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
                self.aDialogDefaultChoices += self.asHelpWords
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
                self.aDialogDefaultChoices += self.asRepeatWords
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
                self.aDialogDefaultChoices += self.asExitWords
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aDialogChoices += choice
                    self.aChoiceIndexes.append( index )
                index += 1
            self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.animSpeech.stop(idtts)
            except:
                try:
                    self.tts.stop(idtts)
                except:
                    self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def removeIdTTS(self):
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

    def getLocalizedStringList(self, parameterName):
        return self.getParameter(parameterName).split("/")

    def removeUnauthorizedCharacters(self, wordList):
        wordList = [x.replace("'","") for x in wordList]
        return wordList

    def getLanguage(self):
        try:
            language = self.langDict[self.tts.getLanguage()]
        except:
            raise RuntimeError("Language " + self.tts.getLanguage() + " is not available for Choice box!")
        return language

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        language = self.getLanguage()
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aDialogChoices += aChoice
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )
        self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)
        self.sQuestion = [self.sQuestion]
# DIALOG ----------------------------------------------------------------------------------------------------

    def startDialog(self, activate = True):
        if self.bIsRunning:
            self.dialogIsRunning = True
            language = self.getLanguage()
            if not self.dialogIsLoaded:
                self.topics = []
                try:
                    for top in self.allTopicPaths:
                        topic = self.dialog._addDialogFromTopicBox(top, self.behaviorAbsolutePath())
                        self.topics.append(topic)
                        self.dialogIsLoaded = True
                except Exception as e:
                    print "Could not load topic " + str(e)
            if activate:
                try:
                    for top in self.topics:
                        if language in top.split("_")[-1]:
                            self.topic = top
                            self.guid = self.topic.split("_")[2]
                    self.dialog.setConcept("choices" + self.guid, language, self.aDialogChoices)
                    self.dialog.setConcept("question" + self.guid, language, self.sQuestion)
                    self.dialog.activateTopic(self.topic)
                    self.dialog.subscribe(self.getName())
                    thread.start_new_thread( self.loopLedsBrainTwinkle, () )
                except Exception as e:
                    print "Could not activate topic " + str(e)
                try:
                    self.memory.subscribeToEvent("Dialog/LastInput", self.getName(),"onDialogLastInput")
                    self.memory.subscribeToEvent("Dialog/NotSpeaking", self.getName(),"onDialogNotSpeaking")
                    self.memory.subscribeToEvent("Dialog/NotUnderstood", self.getName(),"onDialogNotUnderstood")
                except Exception as e:
                    print "Could not subscribe to event " + str(e)

    def stopDialog(self, unload=True):
        try:
            if unload:
                self.dialog.deactivateTopic(self.topic)
                for top in self.topics:
                    self.dialog.unloadTopic(top)
                self.dialogIsLoaded = False
            else:
                self.dialogIsRunning = False
            self.dialog.unsubscribe(self.getName())
        except Exception as e:
            print "Could not deactivate/unload topic " + str(e)
        try:
            self.memory.unsubscribeToEvent("Dialog/LastInput", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotSpeaking", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotUnderstood", self.getName())
        except Exception as e:
            print "Could not unsubscribe from Event " + str(e)

# DIALOG GENERATING --------------------------------------------------------------------------------------

    def generateTopicFile(self):
        self.directory = tempfile.mkdtemp()
        try:
            os.stat(self.directory)
        except:
            os.mkdir(self.directory)
        self.allTopicPaths = []
        for lang,dLang in self.langDict.iteritems():
            guid = str(uuid.uuid4())
            topicName = "dlg_choice_%s_%s.top" % (guid, dLang)
            topicPath = os.path.join(self.directory, topicName)
            self.allTopicPaths.append(topicPath)
            dialog = self.generateTopicContent(guid, dLang)
            with open(topicPath, 'w') as topic:
                topic.write(dialog)

    def generateTopicContent(self, guid, language):
        dialog = """topic: ~dlg_choice_%s_%s () \nlanguage: %s \ndynamic: question%s\ndynamic: choices%s\nu:(in:onActivation)  ~question%s \n\tu1:(~choices%s) $test=0 """ % (guid, language, language, guid, guid, guid, guid)
        return dialog

    def removeTopicFileDir(self):
        shutil.rmtree(self.directory)

# DIALOG OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onDialogLastInput(self, pDataName, pValue, pMessage):
        try:
            confidence = self.memory.getData("Dialog/Confidence")
        except:
            confidence = 0
        if pValue != "" and pValue in self.aDialogChoices:
            if confidence >= self.rConfirmationThreshold:
                self.sPreviousAnswer = pValue
                self.reactionWordUnderstood(pValue)
            else:
                self.stopDialog()
                self.sPreviousAnswer = pValue
                self.askConfirmation()
        else:
            if not self.bGoOut:
                if self.dialogIsRunning:
                    self.stopDialog(False)
                self.reactionNothingUnderstood()

    def onDialogNotSpeaking(self, pDataName, pValue, pMessage):
        if int(pValue) >= self.nTimeoutReco:
            if self.dialogIsRunning:
                self.stopDialog(False)
            self.sRecoInterruption = "timeout"

    def onDialogNotUnderstood(self, pDataName, pValue, pMessage):
        if self.dialogIsRunning:
            self.stopDialog(False)
        self.reactionNothingUnderstood()

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        if not self.dialogIsRunning:
            self.startDialog(True)
        self.processRecoInterruption()

    def askConfirmation(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        self.bInConfirmation = True
        sentence = self.getLocalizedStringList("TTS confirmation")[0]
        idTTS = -1
        sentenceToSay = sentence % self.sPreviousAnswer
        if( sentenceToSay != ""):
            idTTS = self.animSpeech.pCall("say", sentenceToSay )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentenceToSay) )
        # prepare speech recognition
        aWordsRecognised = []
        aWordsRecognised.extend( self.asNegativeWords )
        aWordsRecognised.extend( self.asPositiveWords )
        sWordsRecognised = "You can say: "
        if( len( aWordsRecognised ) > 1 ):
            for i in range( len( aWordsRecognised ) - 1 ):
                sWordsRecognised += "'" + aWordsRecognised[i] + "', "
        if( len( aWordsRecognised ) > 0 ):
            sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
        sWordsRecognised += "."
        self.logger.debug( sWordsRecognised )
        self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the animSpeech." )
        self.startDialog()

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.stopDialog()
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    self.startDialog()
                    self.sRecoInterruption = ""
                    self.processRecoInterruption()
        else:
            self.nCountNoReply = 0
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.getLocalizedStringList("TTS noQuestion")[0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.animSpeech.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )
        if not self.dialogIsRunning:
            self.bInTactileSensorMenu = False
            self.startDialog()

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        self.headDefault()
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word
            if( self.sPreviousAnswer in self.asHelpWords ):
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ):
                self.repeatWhenNoQuestion()
                # repeat the question
            else:
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
            self.sPreviousAnswer = ""

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.getLocalizedStringList("TTS notUnderstood")[0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.getLocalizedStringList("TTS notUnderstoodAnims")
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumDefault = self.getLocalizedStringList("TTS helpEnumDefault")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.getLocalizedStringList("TTS helpTactile")
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.animSpeech.pCall("say", sentence + "\\Pau=300\\" )
                self.bInTactileSensorMenu = False
            else:
                idTTS = self.animSpeech.pCall("say", sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question
        if not self.dialogIsRunning:
            self.startDialog()

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.animSpeech.pCall("say", sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.animSpeech.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
            if not self.dialogIsRunning:
                self.startDialog()
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDs ----------------------------------------------------------------------------------------------------

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLedsBrain( 0., 500 )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLedsBrain( 0.5, 500 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# ANIMATIONS ----------------------------------------------------------------------------------------------

    def headDown(self):
        names = []
        times = []
        keys = []
        names.append("HeadPitch")
        times.append([1.24])
        keys.append([[0.392662, [3, -0.413333, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.24])
        keys.append([[-0.027654, [3, -0.413333, 0], [3, 0, 0]]])
        try:
            self.motion.angleInterpolationBezier(names, times, keys)
            self.lastHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        except BaseException, err:
          print err

    def headDefault(self):
        currentHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        if currentHeadPos != self.lastHeadPos:
            return
        names = []
        times = []
        keys = []

        names.append("HeadPitch")
        times.append([1.2])
        keys.append([[-0.194861, [3, -0.4, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.2])
        keys.append([[-0.00771196, [3, -0.4, 0], [3, 0, 0]]])

        try:
            self.motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                self.headDown()
                thread.start_new_thread(self.loopLedsBrainTurn, ())
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) or self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    self.reactionWordUnderstood( self.aChoices[self.nIndexChoice][0] )
                    self.rTimeWhenActionMadeInTactileMenu = -1
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        self.headDown()
        sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
        idTTS = self.tts.pCall("say", sentence )
        self.aIdsTTS.append( idTTS )
        self.logger.debug( "Robot says: " + str(sentence) )
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.animSpeech.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.stopDialog(False)
        self.nCountNoReply = 0
        self.lastTimeoutVal = 0
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bInTactileSensorMenu = False
        self.bIsRunning = False
        self.goOutOfQuestionRecoReaction()

        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        if self.dialogIsRunning:
            self.stopDialog(False)
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.stopDialog()
        language = self.getLanguage()
        #reset concepts to reduce loading time
        try:
            self.dialog.setConcept("choices" + self.guid, language, [])
            self.dialog.setConcept("question" + self.guid, language, [])
        except Exception as e:
            print "Could not empty concept " + str(e)
        try:
            self.removeTopicFileDir()
        except Exception as e:
            print "Could not remove temporary topic file directory " + str(e)
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic" nuanceCode="arw">
                                                <keyword>نعم</keyword>
                                                <keyword>لا</keyword>
                                                <keyword></keyword>
                                              </arabic>
                                              <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian" nuanceCode="ptb">
                                                <keyword>sim</keyword>
                                                <keyword>não</keyword>
                                                <keyword></keyword>
                                              </brazilian>
                                              <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese" nuanceCode="mnc">
                                                <keyword>是</keyword>
                                                <keyword>不是</keyword>
                                                <keyword></keyword>
                                              </chinese>
                                              <czech uiName="‎Český Jazyk (Czech)" languageName="Czech" nuanceCode="czc">
                                                <keyword>ano</keyword>
                                                <keyword>ne</keyword>
                                                <keyword></keyword>
                                              </czech>
                                              <danish uiName="‎Dansk (Danish)" languageName="Danish" nuanceCode="dad">
                                                <keyword>ja</keyword>
                                                <keyword>nej</keyword>
                                                <keyword></keyword>
                                              </danish>
                                              <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch" nuanceCode="dun">
                                                <keyword>ja</keyword>
                                                <keyword>nee</keyword>
                                                <keyword></keyword>
                                              </dutch>
                                              <english uiName="‎American English (American English)" languageName="English" nuanceCode="enu">
                                                <keyword>ja</keyword>
                                                <keyword>nein</keyword>
                                                <keyword></keyword>
                                              </english>
                                              <finnish uiName="‎Suomi (Finnish)" languageName="Finnish" nuanceCode="fif">
                                                <keyword>kyllä</keyword>
                                                <keyword>ei</keyword>
                                                <keyword></keyword>
                                              </finnish>
                                              <french uiName="‎Français (French)" languageName="French" nuanceCode="frf">
                                                <keyword>oui</keyword>
                                                <keyword>non</keyword>
                                                <keyword></keyword>
                                              </french>
                                              <german uiName="‎Deutsch (German)" languageName="German" nuanceCode="ged">
                                                <keyword>ja</keyword>
                                                <keyword>nein</keyword>
                                                <keyword></keyword>
                                              </german>
                                              <greek uiName="‎Ελληνικά (Greek)" languageName="Greek" nuanceCode="grg">
                                                <keyword></keyword>
                                                <keyword></keyword>
                                              </greek>
                                              <italian uiName="‎Italiano (Italian)" languageName="Italian" nuanceCode="iti">
                                                <keyword>sì</keyword>
                                                <keyword>no</keyword>
                                                <keyword></keyword>
                                              </italian>
                                              <japanese uiName="‎日本語 (Japanese)" languageName="Japanese" nuanceCode="jpj">
                                                <keyword>はい</keyword>
                                                <keyword>いいえ</keyword>
                                                <keyword></keyword>
                                              </japanese>
                                              <korean uiName="‎한국어 (Korean)" languageName="Korean" nuanceCode="kok">
                                                <keyword>예</keyword>
                                                <keyword>아니</keyword>
                                                <keyword></keyword>
                                              </korean>
                                              <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan" nuanceCode="mnt">
                                                <keyword>是</keyword>
                                                <keyword>不是</keyword>
                                                <keyword></keyword>
                                              </mandarintaiwan>
                                              <norwegian uiName="‎Norsk (Norwegian)" languageName="Norwegian" nuanceCode="nor">
                                                <keyword></keyword>
                                                <keyword></keyword>
                                              </norwegian>
                                              <polish uiName="‎Język polski (Polish)" languageName="Polish" nuanceCode="plp">
                                                <keyword>tak</keyword>
                                                <keyword>nie</keyword>
                                                <keyword></keyword>
                                              </polish>
                                              <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese" nuanceCode="ptp">
                                                <keyword>sim</keyword>
                                                <keyword>não</keyword>
                                                <keyword></keyword>
                                              </portuguese>
                                              <russian uiName="‎Русский (Russian)" languageName="Russian" nuanceCode="rur">
                                                <keyword>да</keyword>
                                                <keyword>нет</keyword>
                                                <keyword></keyword>
                                              </russian>
                                              <spanish uiName="‎Español (Spanish)" languageName="Spanish" nuanceCode="spe">
                                                <keyword>si</keyword>
                                                <keyword>no</keyword>
                                                <keyword></keyword>
                                              </spanish>
                                              <swedish uiName="‎Svenska (Swedish)" languageName="Swedish" nuanceCode="sws">
                                                <keyword>ja</keyword>
                                                <keyword>ingen</keyword>
                                                <keyword></keyword>
                                              </swedish>
                                              <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish" nuanceCode="trt">
                                                <keyword>evet</keyword>
                                                <keyword>hayır</keyword>
                                                <keyword></keyword>
                                              </turkish>
                                              <language>german</language>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                            <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip='To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;eg [[&quot;yes&quot;,&quot;ok&quot;],&quot;no&quot;,&quot;maybe&quot;]&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected.' id="3" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                            <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                            <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="8" />
                                            <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="9" />
                                            <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="10" />
                                            <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="11" />
                                            <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="12" />
                                            <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="13" />
                                            <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="6" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="14" />
                                            <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="15" />
                                            <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="16" />
                                            <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="17" />
                                            <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="18" />
                                            <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="19" />
                                            <Parameter name="Body language mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="" id="20">
                                              <Choice value="contextual" />
                                              <Choice value="random" />
                                              <Choice value="disabled" />
                                            </Parameter>
                                            <Parameter name="SpeechReco negative" inherits_from_parent="0" content_type="5" value="no/no nao/disagree/I disagree" default_value="no/no nao/disagree/I disagree" tooltip="" id="21" />
                                            <Parameter name="SpeechReco positive" inherits_from_parent="0" content_type="5" value="yes/yes nao/agree/I agree/of course" default_value="yes/yes nao/agree/I agree/of course" tooltip="" id="22" />
                                            <Parameter name="SpeechReco help" inherits_from_parent="0" content_type="5" value="help/help me/i don&apos;t know" default_value="help/help me/i don&apos;t know" tooltip="" id="23" />
                                            <Parameter name="SpeechReco exit" inherits_from_parent="0" content_type="5" value="exit/stop/quit" default_value="exit/stop/quit" tooltip="" id="24" />
                                            <Parameter name="SpeechReco repeat" inherits_from_parent="0" content_type="5" value="repeat/pardon/what/excuse me" default_value="repeat/pardon/what/excuse me" tooltip="" id="25" />
                                            <Parameter name="TTS confirmation" inherits_from_parent="0" content_type="5" value="I understood %s. Is that correct?" default_value="I understood %s. Is that correct?" tooltip="" id="26" />
                                            <Parameter name="TTS enumMarks" inherits_from_parent="0" content_type="5" value=", / or " default_value=", / or " tooltip="" id="27" />
                                            <Parameter name="TTS helpEnumChoices" inherits_from_parent="0" content_type="5" value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" default_value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" tooltip="" id="28" />
                                            <Parameter name="TTS helpEnumDefault" inherits_from_parent="0" content_type="5" value=" you can ask me: %s. " default_value=" you can ask me: %s. " tooltip="" id="29" />
                                            <Parameter name="TTS helpTactile" inherits_from_parent="0" content_type="5" value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." default_value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." tooltip="" id="30" />
                                            <Parameter name="TTS notUnderstood" inherits_from_parent="0" content_type="5" value="I did not understand. " default_value="I did not understand. " tooltip="" id="31" />
                                            <Parameter name="TTS noQuestion" inherits_from_parent="0" content_type="5" value="No question has been defined, so I cannot repeat it. " default_value="No question has been defined, so I cannot repeat it. " tooltip="" id="32" />
                                            <Parameter name="TTS notUnderstoodAnims" inherits_from_parent="0" content_type="5" value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " default_value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " tooltip="" id="33" />
                                          </Box>
                                          <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.sentences = {
			"Chinese" : " 你喜欢吃巧克力吗？ ",
			"English" : " Beginnen wir mal mit dem Training?  ",
			"French" : " Aimes-tu le chocolat ? ",
			"German" : " Beginnen wir mal mit dem Training?  ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Arabic" : " هل تحب الشوكولاته؟ ",
			"Polish" : " Lubisz czekoladę? ",
			"Czech" : " Máš rád čokoládu? ",
			"Dutch" : " Hou je van chocolade? ",
			"Danish" : " Kan du lide chokolade? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"Swedish" : " Gillar du choklad? ",
			"Russian" : " Вы любите шоколад? ",
			"Turkish" : " Çikolata sever misin? ",
			"MandarinTaiwan" : " 你喜歡吃巧克力嗎？ ",
		}

	def onLoad(self):
		self.tts = self.session().service("ALTextToSpeech")

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese">
                                                <![CDATA[你喜欢吃巧克力吗？]]>
                                              </chinese>
                                              <english uiName="‎American English (American English)" languageName="English">
                                                <![CDATA[Beginnen wir mal mit dem Training? ]]>
                                              </english>
                                              <french uiName="‎Français (French)" languageName="French">
                                                <![CDATA[Aimes-tu le chocolat ?]]>
                                              </french>
                                              <german uiName="‎Deutsch (German)" languageName="German">
                                                <![CDATA[Beginnen wir mal mit dem Training? ]]>
                                              </german>
                                              <italian uiName="‎Italiano (Italian)" languageName="Italian">
                                                <![CDATA[Ti piace il cioccolato?]]>
                                              </italian>
                                              <japanese uiName="‎日本語 (Japanese)" languageName="Japanese">
                                                <![CDATA[チョコレートが好きですか]]>
                                              </japanese>
                                              <korean uiName="‎한국어 (Korean)" languageName="Korean">
                                                <![CDATA[당신은 초콜렛을 좋아합니까?]]>
                                              </korean>
                                              <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese">
                                                <![CDATA[Gostas de chocolate?]]>
                                              </portuguese>
                                              <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian">
                                                <![CDATA[Você gosta de chocolate?]]>
                                              </brazilian>
                                              <spanish uiName="‎Español (Spanish)" languageName="Spanish">
                                                <![CDATA[¿Te gusta el chocolate?]]>
                                              </spanish>
                                              <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic">
                                                <![CDATA[هل تحب الشوكولاته؟]]>
                                              </arabic>
                                              <polish uiName="‎Język polski (Polish)" languageName="Polish">
                                                <![CDATA[Lubisz czekoladę?]]>
                                              </polish>
                                              <czech uiName="‎Český Jazyk (Czech)" languageName="Czech">
                                                <![CDATA[Máš rád čokoládu?]]>
                                              </czech>
                                              <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch">
                                                <![CDATA[Hou je van chocolade?]]>
                                              </dutch>
                                              <danish uiName="‎Dansk (Danish)" languageName="Danish">
                                                <![CDATA[Kan du lide chokolade?]]>
                                              </danish>
                                              <finnish uiName="‎Suomi (Finnish)" languageName="Finnish">
                                                <![CDATA[Pidätkö suklaasta?]]>
                                              </finnish>
                                              <swedish uiName="‎Svenska (Swedish)" languageName="Swedish">
                                                <![CDATA[Gillar du choklad?]]>
                                              </swedish>
                                              <russian uiName="‎Русский (Russian)" languageName="Russian">
                                                <![CDATA[Вы любите шоколад?]]>
                                              </russian>
                                              <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish">
                                                <![CDATA[Çikolata sever misin?]]>
                                              </turkish>
                                              <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan">
                                                <![CDATA[你喜歡吃巧克力嗎？]]>
                                              </mandarintaiwan>
                                              <language>german</language>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                          <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="7" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Goto Posture" id="5" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="154" y="43">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Set Speech Lang." id="1" localization="8" tooltip="Select the language you would like the robot to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." plugin="setlanguage_plugin" x="88" y="296">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.setTTS = True
        self.setASR = False
        self.setDialog = False
        self.language = "German"

    def getService(self, serviceName, humainName):
        service = None
        try:
            service = self.session().service(serviceName)
        except:
            self.logger.warn("%s is not available, language setting cannot be applied to %s." % (serviceName, humainName))
        return service

    def onLoad(self):
        if self.setTTS:
            self.tts = self.getService("ALTextToSpeech", "speech")
        if self.setASR:
            self.asr = self.getService("ALSpeechRecognition", "recognition")
        if self.setDialog:
            self.dialog = self.getService("ALDialog", "dialog")

    def setLanguage(self, service, serviceName):
        try:
            if service is None:
                return False
            service.setLanguage(self.language)
            return True
        except Exception as e:
            self.logger.error("Could not set language %s for %s: %s" % (self.language, serviceName, e))
            return False

    def onInput_onSet(self):
        res = True
        if self.setTTS:
            res = self.setLanguage(self.tts, "ALTextToSpeech") and res
        if self.setASR:
            res = self.setLanguage(self.asr, "ALSpeechRecognition") and res
        if self.setDialog:
            res = self.setLanguage(self.dialog, "ALDialog") and res

        if res:
            self.onReady()
        else:
            self.logger.error("Language %s could not be set for one or more services." % self.language)
            self.onError()]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <language>German</language>
                                    <asr use="0" />
                                    <dialog use="0" />
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                  <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Autonomous Abilities" id="3" localization="8" tooltip="Autonomous Abilities exists to keep the robot alive at all times. But this box allows you to disable all or parts of the Autonomous Abilities (Autonomous Blinking, Background Movement, Basic Awareness, Listening Movement, Speaking Movement)." x="106" y="167">
                                  <bitmap>media/images/box/auto-abilities.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.autonomouslife = self.session().service("ALAutonomousLife")

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.enableAnAbility("AutonomousBlinking")
        self.enableAnAbility("BackgroundMovement")
        self.enableAnAbility("BasicAwareness")
        self.enableAnAbility("ListeningMovement")
        self.enableAnAbility("SpeakingMovement")
        self.onDone() # activate output of the box

    def enableAnAbility(self, name):
        self.autonomouslife.setAutonomousAbilityEnabled(name, self.getParameter(name))]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="AutonomousBlinking" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables the robot to make its eye leds blink when it sees someone and when it is interacting." id="4" />
                                  <Parameter name="BackgroundMovement" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Defines which slight movements the robot does autonomously when its limbs are not moving." id="5" />
                                  <Parameter name="BasicAwareness" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Allow to make the robot establish and keep eye contact with people." id="6" />
                                  <Parameter name="ListeningMovement" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables some slight movements showing that the robot is listening." id="7" />
                                  <Parameter name="SpeakingMovement" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Enables to start autonomously movements during the speech of the robot." id="8" />
                                </Box>
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="6" outputowner="11" indexofoutput="5" />
                                <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="4" />
                                <Link inputowner="11" indexofinput="2" outputowner="16" indexofoutput="5" />
                                <Link inputowner="16" indexofinput="2" outputowner="1" indexofoutput="3" />
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="3" />
                                <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="animation" id="4" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="159" y="258">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="170" y="172">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Delay (1)" id="1" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="404" y="174">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="SlowBowWithArms_01" id="42" localization="8" tooltip="ID : #01C 0026&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Go&#x0A;- Affirmative&#x0A;- Can&#x0A;- Indicate&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="69" y="24">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="51">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="15" value="-11.4275" />
                                        <Key frame="24" value="-14.3096" />
                                        <Key frame="29" value="2.2" />
                                        <Key frame="37" value="-13.4" />
                                        <Key frame="42" value="-2.1" />
                                        <Key frame="49" value="-7.39858" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="13" value="4.39427" />
                                        <Key frame="22" value="5.2615" />
                                        <Key frame="27" value="5.83927" />
                                        <Key frame="35" value="5.83927" />
                                        <Key frame="40" value="5.83927" />
                                        <Key frame="47" value="5.24849" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="13" value="-4.26134" />
                                        <Key frame="22" value="-5.15548" />
                                        <Key frame="27" value="-5.73068" />
                                        <Key frame="35" value="-6.35319" />
                                        <Key frame="40" value="-6.35319" />
                                        <Key frame="47" value="-6.35319" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="17" value="-88.3224" />
                                        <Key frame="26" value="-88.3224" />
                                        <Key frame="31" value="-88.3224" />
                                        <Key frame="39" value="-82.721" />
                                        <Key frame="44" value="-73.9596" />
                                        <Key frame="51" value="-65.862" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="17" value="-68.1519" />
                                        <Key frame="26" value="-57.8875" />
                                        <Key frame="31" value="-55.3138" />
                                        <Key frame="39" value="-59.9818" />
                                        <Key frame="44" value="-59.9818" />
                                        <Key frame="51" value="-59.9818" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="17" value="0.865834" />
                                        <Key frame="26" value="0.854073" />
                                        <Key frame="31" value="0.843551" />
                                        <Key frame="39" value="0.8" />
                                        <Key frame="44" value="0.592788" />
                                        <Key frame="51" value="0.376586" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="13" value="7.57681" />
                                        <Key frame="22" value="2.42793" />
                                        <Key frame="27" value="-0.236286" />
                                        <Key frame="35" value="-2.28279" />
                                        <Key frame="40" value="1.9805" />
                                        <Key frame="47" value="7.5858" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="13" value="1.79606" />
                                        <Key frame="22" value="2.56746" />
                                        <Key frame="27" value="2.56746" />
                                        <Key frame="35" value="3.18885" />
                                        <Key frame="40" value="4.03031" />
                                        <Key frame="47" value="4.80285" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="13" value="-9.8646" />
                                        <Key frame="22" value="-9.8646" />
                                        <Key frame="27" value="-10.4376" />
                                        <Key frame="35" value="-11.0883" />
                                        <Key frame="40" value="-11.0883" />
                                        <Key frame="47" value="-10.3535" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="13" value="-4.74636" />
                                        <Key frame="22" value="-4.74636" />
                                        <Key frame="27" value="-4.74636" />
                                        <Key frame="35" value="-4.74636" />
                                        <Key frame="40" value="-4.74636" />
                                        <Key frame="47" value="-4.74636" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="17" value="79.8052" />
                                        <Key frame="26" value="70.8914" />
                                        <Key frame="31" value="69.3222" />
                                        <Key frame="39" value="72.1598" />
                                        <Key frame="44" value="72.7714" />
                                        <Key frame="51" value="74.0205" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="17" value="7.36612" />
                                        <Key frame="26" value="6.06407" />
                                        <Key frame="31" value="5.26006" />
                                        <Key frame="39" value="2.60293" />
                                        <Key frame="44" value="7.72673" />
                                        <Key frame="51" value="12.163" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="17" value="-21.016" />
                                        <Key frame="26" value="-43.9666" />
                                        <Key frame="31" value="-54.9769" />
                                        <Key frame="39" value="-64.7665" />
                                        <Key frame="44" value="-39.1675" />
                                        <Key frame="51" value="-5.66774" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="13" value="4.8023" />
                                        <Key frame="22" value="5.59974" />
                                        <Key frame="27" value="6.28749" />
                                        <Key frame="35" value="6.28749" />
                                        <Key frame="40" value="5.63887" />
                                        <Key frame="47" value="4.91933" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="13" value="9.00774" />
                                        <Key frame="22" value="7.48585" />
                                        <Key frame="27" value="6.81659" />
                                        <Key frame="35" value="6.81659" />
                                        <Key frame="40" value="6.81659" />
                                        <Key frame="47" value="6.81659" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="86.1549" />
                                        <Key frame="24" value="87.7583" />
                                        <Key frame="29" value="87.7583" />
                                        <Key frame="37" value="64.9846" />
                                        <Key frame="42" value="60.2937" />
                                        <Key frame="49" value="58.6416" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="68.2695" />
                                        <Key frame="24" value="57.0892" />
                                        <Key frame="29" value="55.0117" />
                                        <Key frame="37" value="58.8014" />
                                        <Key frame="42" value="59.628" />
                                        <Key frame="49" value="60.2413" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="0.618988" />
                                        <Key frame="24" value="0.456782" />
                                        <Key frame="29" value="0.367645" />
                                        <Key frame="37" value="0.304126" />
                                        <Key frame="42" value="0.304126" />
                                        <Key frame="49" value="0.304126" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="13" value="6.81969" />
                                        <Key frame="22" value="2.52902" />
                                        <Key frame="27" value="0.345477" />
                                        <Key frame="35" value="-1.16591" />
                                        <Key frame="40" value="2.57098" />
                                        <Key frame="47" value="7.48417" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="13" value="-8.72964" />
                                        <Key frame="22" value="-6.30757" />
                                        <Key frame="27" value="-5.50677" />
                                        <Key frame="35" value="-4.82732" />
                                        <Key frame="40" value="-4.82732" />
                                        <Key frame="47" value="-4.82732" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="13" value="-9.8646" />
                                        <Key frame="22" value="-9.8646" />
                                        <Key frame="27" value="-10.4376" />
                                        <Key frame="35" value="-11.0883" />
                                        <Key frame="40" value="-11.0883" />
                                        <Key frame="47" value="-10.3535" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="13" value="-4.52137" />
                                        <Key frame="22" value="-4.52137" />
                                        <Key frame="27" value="-4.52137" />
                                        <Key frame="35" value="-4.52137" />
                                        <Key frame="40" value="-4.52137" />
                                        <Key frame="47" value="-4.52137" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="72.7806" />
                                        <Key frame="24" value="70.0927" />
                                        <Key frame="29" value="69.5119" />
                                        <Key frame="37" value="74.1141" />
                                        <Key frame="42" value="77.0457" />
                                        <Key frame="49" value="79.665" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="-8.72776" />
                                        <Key frame="24" value="-10.8365" />
                                        <Key frame="29" value="-11.6998" />
                                        <Key frame="37" value="-11.6998" />
                                        <Key frame="42" value="-12.3151" />
                                        <Key frame="49" value="-12.3151" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-21.8077" />
                                        <Key frame="24" value="20.7802" />
                                        <Key frame="29" value="42.9035" />
                                        <Key frame="37" value="64.4107" />
                                        <Key frame="42" value="39.9616" />
                                        <Key frame="49" value="6.68441" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="WideHorizontalRightArm_LeanLeft_HeadShake_01" id="10" localization="8" tooltip="ID : #01D 0015&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Nope&#x0A;- Never&#x0A;- Negative&#x0A;- Forbiden&#x0A;- Oppose&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : RightArmOnHip&#x0A;End stance : LeanLeft" x="269" y="259">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="69">
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="14" value="-4.74855" />
                                        <Key frame="57" value="5.97423" />
                                        <Key frame="65" value="-4.22121" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="14" value="12.3903" />
                                        <Key frame="18" value="-13.1" />
                                        <Key frame="22" value="20.1" />
                                        <Key frame="27" value="-13.1" />
                                        <Key frame="34" value="20.1" />
                                        <Key frame="41" value="-13.1" />
                                        <Key frame="50" value="20.1" />
                                        <Key frame="57" value="8.4352" />
                                        <Key frame="65" value="11.072" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="16" value="0.261268" />
                                        <Key frame="45" value="-7.29742" />
                                        <Key frame="56" value="-6.59429" />
                                        <Key frame="67" value="-0.178186" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="16" value="-2.54646" />
                                        <Key frame="45" value="-19.158" />
                                        <Key frame="67" value="0.0902951" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="18" value="-82.7037" />
                                        <Key frame="33" value="-82.7037" />
                                        <Key frame="49" value="-87.2741" />
                                        <Key frame="58" value="-77.1946" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-2.83595" ordinateParam="-3.80419" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="3.46616" ordinateParam="4.64955" />
                                        </Key>
                                        <Key frame="69" value="-35.2422" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="18" value="-30.5008" />
                                        <Key frame="33" value="-30.5008" />
                                        <Key frame="49" value="-30.9403" />
                                        <Key frame="58" value="-83.5874" />
                                        <Key frame="69" value="-78.6655" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="18" value="0.0224" />
                                        <Key frame="33" value="0.0224" />
                                        <Key frame="49" value="0.034" />
                                        <Key frame="58" value="0.1008" />
                                        <Key frame="69" value="0.4" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="16" value="10.9889" />
                                        <Key frame="45" value="-0.261268" />
                                        <Key frame="56" value="-3.33748" />
                                        <Key frame="67" value="19.3386" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="16" value="1.32078" />
                                        <Key frame="45" value="25.491" />
                                        <Key frame="67" value="-1.0523" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="16" value="-13.8845" />
                                        <Key frame="45" value="-14.9392" />
                                        <Key frame="56" value="-16.9607" />
                                        <Key frame="67" value="-15.115" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="16" value="0.700723" />
                                        <Key frame="45" value="17.9275" />
                                        <Key frame="56" value="18.4549" />
                                        <Key frame="67" value="-5.29" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="18" value="118.651" />
                                        <Key frame="33" value="118.651" />
                                        <Key frame="49" value="119.179" />
                                        <Key frame="58" value="100.546" />
                                        <Key frame="69" value="98.7879" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="18" value="43.6798" />
                                        <Key frame="33" value="43.6798" />
                                        <Key frame="49" value="47.1076" />
                                        <Key frame="69" value="7.29261" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="18" value="50.6232" />
                                        <Key frame="33" value="50.6232" />
                                        <Key frame="49" value="64.9496" />
                                        <Key frame="58" value="-38.4111" />
                                        <Key frame="69" value="-6.06693" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="16" value="-0.964409" />
                                        <Key frame="45" value="-2.37068" />
                                        <Key frame="56" value="-6.50159" />
                                        <Key frame="67" value="-1.57965" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="16" value="7.4732" />
                                        <Key frame="45" value="-7.73207" />
                                        <Key frame="67" value="10.6373" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="16" value="77.4" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-6.03465" ordinateParam="8.78744" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="5.65748" ordinateParam="-8.23822" />
                                        </Key>
                                        <Key frame="31" value="18.3" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-5.70131" ordinateParam="14.2542" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="6.0814" ordinateParam="-15.2045" />
                                        </Key>
                                        <Key frame="47" value="2.55127" />
                                        <Key frame="56" value="55.1984" />
                                        <Key frame="67" value="33.7528" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="16" value="39.1" />
                                        <Key frame="47" value="37.791" />
                                        <Key frame="56" value="63.5433" />
                                        <Key frame="67" value="69.7836" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="16" value="0.86" />
                                        <Key frame="31" value="0.862" />
                                        <Key frame="47" value="0.8492" />
                                        <Key frame="56" value="0.0968" />
                                        <Key frame="67" value="0.4" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="16" value="8.4352" />
                                        <Key frame="45" value="9.22623" />
                                        <Key frame="56" value="-2.63916" />
                                        <Key frame="67" value="10.1051" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="16" value="-6.94104" />
                                        <Key frame="45" value="15.735" />
                                        <Key frame="67" value="-10.2809" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="16" value="-13.8845" />
                                        <Key frame="45" value="-14.9392" />
                                        <Key frame="56" value="-16.9607" />
                                        <Key frame="67" value="-15.115" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="16" value="4.13332" />
                                        <Key frame="45" value="4.3091" />
                                        <Key frame="56" value="18.1081" />
                                        <Key frame="67" value="4.13332" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="16" value="37" />
                                        <Key frame="31" value="30.1" />
                                        <Key frame="67" value="91.1461" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="16" value="14.7" />
                                        <Key frame="47" value="-22.4148" />
                                        <Key frame="56" value="-12.2194" />
                                        <Key frame="67" value="-8.17634" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="16" value="-26.4" />
                                        <Key frame="31" value="-25.4031" />
                                        <Key frame="47" value="7.02893" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-5.03277" ordinateParam="-15.5454" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="2.83093" ordinateParam="8.7443" />
                                        </Key>
                                        <Key frame="56" value="32.6933" />
                                        <Key frame="67" value="14.3239" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="LittleSpreadRightArm_HeadShake_01" id="2" localization="8" tooltip="ID : #01D 0005&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- No&#x0A;- Not&#x0A;- Never&#x0A;- Negative&#x0A;- Can&apos;t&#x0A;- False&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="572" y="76">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="25" value="4.14983" />
                                        <Key frame="36" value="-5.27293" />
                                        <Key frame="40" value="-0.884312" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="6" value="-0.704539" />
                                        <Key frame="15" value="-0.584837" />
                                        <Key frame="21" value="-5.64614">
                                          <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                          <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                        </Key>
                                        <Key frame="25" value="5.11666">
                                          <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                          <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                        </Key>
                                        <Key frame="29" value="-5.64614">
                                          <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                          <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                        </Key>
                                        <Key frame="34" value="5.11666">
                                          <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                          <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                        </Key>
                                        <Key frame="40" value="-0.803639" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="19" value="-1.58445" />
                                        <Key frame="40" value="5.48707" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="19" value="-10.5446" />
                                        <Key frame="40" value="-10.6188" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="-24.3672" />
                                        <Key frame="40" value="-23.844" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="-69.0739" />
                                        <Key frame="40" value="-68.6623" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="25" value="0.314203" />
                                        <Key frame="40" value="0.306419" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="19" value="-5.18321" />
                                        <Key frame="40" value="6.88663" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="19" value="10.7252" />
                                        <Key frame="40" value="10.7714" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="19" value="-10.3688" />
                                        <Key frame="40" value="-10.3054" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="19" value="10.8962" />
                                        <Key frame="40" value="-5.03106" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="80.5715" />
                                        <Key frame="40" value="83.8536" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="14.1482" />
                                        <Key frame="40" value="10.814" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="-6.19439" />
                                        <Key frame="40" value="5.59801" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="19" value="-1.14019" />
                                        <Key frame="40" value="5.16609" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="19" value="3.78175" />
                                        <Key frame="40" value="4.49468" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="24.5468" />
                                        <Key frame="40" value="23.6641" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="109.944" />
                                        <Key frame="40" value="68.4009" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="25" value="0.53724" />
                                        <Key frame="40" value="0.3" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="19" value="-7.29742" />
                                        <Key frame="40" value="7.92846" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="19" value="-1.66754" />
                                        <Key frame="40" value="-1.41998" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="19" value="-10.3688" />
                                        <Key frame="40" value="-10.3054" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="19" value="13.0104" />
                                        <Key frame="40" value="-5.10977" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="83.3423" />
                                        <Key frame="40" value="84.0387" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="-13.1627" />
                                        <Key frame="40" value="-10.6192" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="44.8951" />
                                        <Key frame="40" value="6.22854" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="646" y="216">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Link inputowner="42" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="14" indexofinput="2" outputowner="42" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="10" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="4" />
                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="animation (1)" id="2" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="1087" y="420">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="LittleArmsUpAndDownWithBump_01" id="7" localization="8" tooltip='ID : #01F 0014&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- &quot;!&quot;&#x0A;- Awesome&#x0A;- Great&#x0A;- Terrible&#x0A;- Impressive&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center' x="454" y="21">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="53">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="11" value="-10.6373" />
                                        <Key frame="16" value="11.5" />
                                        <Key frame="21" value="-5.45169" />
                                        <Key frame="36" value="-5.45169" />
                                        <Key frame="42" value="11.5" />
                                        <Key frame="47" value="-10.6373" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="11" value="-1.05711" />
                                        <Key frame="21" value="0" />
                                        <Key frame="36" value="0" />
                                        <Key frame="47" value="-1.05711" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="22" value="5.35899" />
                                        <Key frame="31" value="-1.67234" />
                                        <Key frame="38" value="5.35899" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="22" value="-7.3805" />
                                        <Key frame="31" value="-6.76526" />
                                        <Key frame="38" value="-7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="9" value="-19.949" />
                                        <Key frame="18" value="-84.0221" />
                                        <Key frame="26" value="-7.90786" />
                                        <Key frame="34" value="-5" />
                                        <Key frame="42" value="-31.9023" />
                                        <Key frame="51" value="-20.1248" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="9" value="-56.5168" />
                                        <Key frame="26" value="-88.1578" />
                                        <Key frame="34" value="-88.1578" />
                                        <Key frame="42" value="-50.5401" />
                                        <Key frame="51" value="-56.1652" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="9" value="0.3756" />
                                        <Key frame="18" value="0.13" />
                                        <Key frame="26" value="1" />
                                        <Key frame="34" value="1" />
                                        <Key frame="42" value="0.45" />
                                        <Key frame="51" value="0.3872" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="22" value="7.12163" />
                                        <Key frame="31" value="0.00240423" />
                                        <Key frame="38" value="7.12163" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="22" value="5.89115" />
                                        <Key frame="31" value="6.5064" />
                                        <Key frame="38" value="5.89115" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="22" value="-9.75358" />
                                        <Key frame="31" value="-9.75358" />
                                        <Key frame="38" value="-9.75358" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="22" value="-5.29" />
                                        <Key frame="31" value="8.25942" />
                                        <Key frame="38" value="-5.29" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="9" value="77.0786" />
                                        <Key frame="18" value="67.9379" />
                                        <Key frame="26" value="76.2876" />
                                        <Key frame="34" value="76.2876" />
                                        <Key frame="42" value="68.2895" />
                                        <Key frame="51" value="78.2212" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="9" value="7.73207" />
                                        <Key frame="18" value="-1.67234" />
                                        <Key frame="34" value="12.8" />
                                        <Key frame="42" value="4.83163" />
                                        <Key frame="51" value="4.74374" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="9" value="-14.5924" />
                                        <Key frame="18" value="-75.853" />
                                        <Key frame="26" value="-87.8062" />
                                        <Key frame="34" value="-82.7837" />
                                        <Key frame="42" value="-63.1965" />
                                        <Key frame="51" value="-15.5001" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="22" value="5.10013" />
                                        <Key frame="31" value="-2.1949" />
                                        <Key frame="38" value="5.10013" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="22" value="7.82477" />
                                        <Key frame="31" value="6.41851" />
                                        <Key frame="38" value="7.82477" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="11" value="23.7332" />
                                        <Key frame="20" value="83.6753" />
                                        <Key frame="28" value="14.7682" />
                                        <Key frame="36" value="5" />
                                        <Key frame="44" value="37.5322" />
                                        <Key frame="53" value="23.03" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="11" value="67.059" />
                                        <Key frame="20" value="74.1782" />
                                        <Key frame="28" value="95.0086" />
                                        <Key frame="36" value="95.0086" />
                                        <Key frame="44" value="58.2698" />
                                        <Key frame="53" value="67.3227" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="11" value="0.372" />
                                        <Key frame="20" value="0.13" />
                                        <Key frame="28" value="1" />
                                        <Key frame="36" value="1" />
                                        <Key frame="44" value="0.45" />
                                        <Key frame="53" value="0.3788" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="22" value="7.55628" />
                                        <Key frame="31" value="-1.49656" />
                                        <Key frame="38" value="7.55628" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="22" value="-5.97423" />
                                        <Key frame="31" value="-4.39218" />
                                        <Key frame="38" value="-5.97423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="22" value="-9.75358" />
                                        <Key frame="31" value="-9.75358" />
                                        <Key frame="38" value="-9.75358" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="22" value="-5.00743" />
                                        <Key frame="31" value="10.4615" />
                                        <Key frame="38" value="-5.00743" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="11" value="81.2144" />
                                        <Key frame="20" value="67.8548" />
                                        <Key frame="28" value="82.9722" />
                                        <Key frame="36" value="82.9722" />
                                        <Key frame="44" value="77.435" />
                                        <Key frame="53" value="81.478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="11" value="-7.38531" />
                                        <Key frame="20" value="2.1949" />
                                        <Key frame="36" value="-12.8" />
                                        <Key frame="44" value="-2.72705" />
                                        <Key frame="53" value="-5.10013" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="11" value="19.6853" />
                                        <Key frame="20" value="80.9459" />
                                        <Key frame="28" value="96.3269" />
                                        <Key frame="36" value="79.1" />
                                        <Key frame="44" value="72.4204" />
                                        <Key frame="53" value="19.5975" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="119" y="193">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Goto Posture" id="6" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="700" y="207">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                  <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                    <Choice value="Crouch" />
                                    <Choice value="LyingBack" />
                                    <Choice value="LyingBelly" />
                                    <Choice value="Sit" />
                                    <Choice value="SitRelax" />
                                    <Choice value="StandInit" />
                                    <Choice value="Stand" />
                                    <Choice value="StandZero" />
                                  </Parameter>
                                  <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="74" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                  <Resource name="Stiffness" type="Lock" timeout="0" />
                                </Box>
                                <Box name="LittleSpreadRightArm_HeadShake_01" id="4" localization="8" tooltip="ID : #01D 0005&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- No&#x0A;- Not&#x0A;- Never&#x0A;- Negative&#x0A;- Can&apos;t&#x0A;- False&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="66" y="14">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="25" value="4.14983" />
                                        <Key frame="36" value="-5.27293" />
                                        <Key frame="40" value="-0.884312" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="6" value="-0.704539" />
                                        <Key frame="15" value="-0.584837" />
                                        <Key frame="21" value="-5.64614">
                                          <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                          <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                        </Key>
                                        <Key frame="25" value="5.11666">
                                          <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                          <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                        </Key>
                                        <Key frame="29" value="-5.64614">
                                          <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                          <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                        </Key>
                                        <Key frame="34" value="5.11666">
                                          <Tangent side="left" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                          <Tangent side="right" interpType="linear" abscissaParam="0" ordinateParam="0" />
                                        </Key>
                                        <Key frame="40" value="-0.803639" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="19" value="-1.58445" />
                                        <Key frame="40" value="5.48707" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="19" value="-10.5446" />
                                        <Key frame="40" value="-10.6188" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="-24.3672" />
                                        <Key frame="40" value="-23.844" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="-69.0739" />
                                        <Key frame="40" value="-68.6623" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="25" value="0.314203" />
                                        <Key frame="40" value="0.306419" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="19" value="-5.18321" />
                                        <Key frame="40" value="6.88663" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="19" value="10.7252" />
                                        <Key frame="40" value="10.7714" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="19" value="-10.3688" />
                                        <Key frame="40" value="-10.3054" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="19" value="10.8962" />
                                        <Key frame="40" value="-5.03106" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="80.5715" />
                                        <Key frame="40" value="83.8536" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="14.1482" />
                                        <Key frame="40" value="10.814" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="-6.19439" />
                                        <Key frame="40" value="5.59801" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="19" value="-1.14019" />
                                        <Key frame="40" value="5.16609" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="19" value="3.78175" />
                                        <Key frame="40" value="4.49468" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="25" value="24.5468" />
                                        <Key frame="40" value="23.6641" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="25" value="109.944" />
                                        <Key frame="40" value="68.4009" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="25" value="0.53724" />
                                        <Key frame="40" value="0.3" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="19" value="-7.29742" />
                                        <Key frame="40" value="7.92846" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="19" value="-1.66754" />
                                        <Key frame="40" value="-1.41998" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="19" value="-10.3688" />
                                        <Key frame="40" value="-10.3054" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="19" value="13.0104" />
                                        <Key frame="40" value="-5.10977" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="25" value="83.3423" />
                                        <Key frame="40" value="84.0387" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="25" value="-13.1627" />
                                        <Key frame="40" value="-10.6192" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="25" value="44.8951" />
                                        <Key frame="40" value="6.22854" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="LittleBothArmsBump_DuckEnd_01" id="117" localization="8" tooltip='ID : #01C 0013&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Yes&#x0A;- Affirmative&#x0A;- &quot;.&quot;&#x0A;- Indicate&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Flex' x="203" y="16">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="35">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="11" value="2.5" />
                                        <Key frame="34" value="2.63435" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="11" value="5.12269" />
                                        <Key frame="34" value="5.47908" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="10" value="4.30429" />
                                        <Key frame="16" value="2.81013" />
                                        <Key frame="25" value="2.81013" />
                                        <Key frame="32" value="4.30429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="10" value="-3.77694" />
                                        <Key frame="16" value="-4.30429" />
                                        <Key frame="25" value="-4.30429" />
                                        <Key frame="32" value="-3.77694" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="10" value="-51.9416" />
                                        <Key frame="17" value="-49.9201" />
                                        <Key frame="24" value="-49.9201" />
                                        <Key frame="35" value="-49.7491" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="10" value="-55.1105" />
                                        <Key frame="17" value="-77.1" />
                                        <Key frame="24" value="-53.88" />
                                        <Key frame="35" value="-46.0529" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="10" value="0.1836" />
                                        <Key frame="17" value="0.59" />
                                        <Key frame="24" value="0.1956" />
                                        <Key frame="35" value="0.2224" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="10" value="13.274" />
                                        <Key frame="16" value="18.1081" />
                                        <Key frame="25" value="18.1081" />
                                        <Key frame="32" value="13.274" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="10" value="3.34228" />
                                        <Key frame="16" value="5.10013" />
                                        <Key frame="25" value="5.10013" />
                                        <Key frame="32" value="3.34228" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="10" value="-18.8064" />
                                        <Key frame="16" value="-18.8064" />
                                        <Key frame="25" value="-18.8064" />
                                        <Key frame="32" value="-18.8064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="10" value="-3.43018" />
                                        <Key frame="16" value="-2.81494" />
                                        <Key frame="25" value="-2.81494" />
                                        <Key frame="32" value="-3.43018" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="10" value="80.1549" />
                                        <Key frame="17" value="80.1549" />
                                        <Key frame="24" value="80.1549" />
                                        <Key frame="35" value="76.2924" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="10" value="-4.48488" />
                                        <Key frame="17" value="1.67426" />
                                        <Key frame="24" value="-0.793436" />
                                        <Key frame="35" value="-2.37068" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="10" value="5.35899" />
                                        <Key frame="17" value="0.261268" />
                                        <Key frame="24" value="2.63435" />
                                        <Key frame="35" value="0.705531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="10" value="2.1997" />
                                        <Key frame="16" value="-0.700723" />
                                        <Key frame="25" value="-0.700723" />
                                        <Key frame="32" value="2.1997" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="10" value="10.1978" />
                                        <Key frame="16" value="10.1978" />
                                        <Key frame="25" value="10.1978" />
                                        <Key frame="32" value="10.1978" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="9" value="56.8683" />
                                        <Key frame="15" value="55.4621" />
                                        <Key frame="24" value="56.8683" />
                                        <Key frame="33" value="60.9066" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="9" value="54.3147" />
                                        <Key frame="15" value="77.1" />
                                        <Key frame="24" value="53.6994" />
                                        <Key frame="33" value="45.6182" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="9" value="0.1648" />
                                        <Key frame="15" value="0.59" />
                                        <Key frame="24" value="0.1648" />
                                        <Key frame="33" value="0.1888" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="10" value="10.4567" />
                                        <Key frame="16" value="16.3455" />
                                        <Key frame="25" value="16.3455" />
                                        <Key frame="32" value="10.4567" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="10" value="-10.8962" />
                                        <Key frame="16" value="-11.5114" />
                                        <Key frame="25" value="-11.5114" />
                                        <Key frame="32" value="-10.8962" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="10" value="-18.8064" />
                                        <Key frame="16" value="-18.8064" />
                                        <Key frame="25" value="-18.8064" />
                                        <Key frame="32" value="-18.8064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="10" value="1.23289" />
                                        <Key frame="16" value="1.84813" />
                                        <Key frame="25" value="1.84813" />
                                        <Key frame="32" value="1.23289" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="9" value="83.6753" />
                                        <Key frame="15" value="83.6753" />
                                        <Key frame="24" value="83.6753" />
                                        <Key frame="33" value="85.7799" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="9" value="3.60116" />
                                        <Key frame="15" value="-2.97715" />
                                        <Key frame="24" value="-2.1997" />
                                        <Key frame="33" value="-3.86484" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="9" value="-11.692" />
                                        <Key frame="15" value="-11.692" />
                                        <Key frame="24" value="-11.692" />
                                        <Key frame="33" value="-13.3571" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Delay (2)" id="3" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="328" y="95">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="SlowBowWithArms_01" id="42" localization="8" tooltip="ID : #01C 0026&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Go&#x0A;- Affirmative&#x0A;- Can&#x0A;- Indicate&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="529" y="218">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="51">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="15" value="-11.4275" />
                                        <Key frame="24" value="-14.3096" />
                                        <Key frame="29" value="2.2" />
                                        <Key frame="37" value="-13.4" />
                                        <Key frame="42" value="-2.1" />
                                        <Key frame="49" value="-7.39858" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="13" value="4.39427" />
                                        <Key frame="22" value="5.2615" />
                                        <Key frame="27" value="5.83927" />
                                        <Key frame="35" value="5.83927" />
                                        <Key frame="40" value="5.83927" />
                                        <Key frame="47" value="5.24849" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="13" value="-4.26134" />
                                        <Key frame="22" value="-5.15548" />
                                        <Key frame="27" value="-5.73068" />
                                        <Key frame="35" value="-6.35319" />
                                        <Key frame="40" value="-6.35319" />
                                        <Key frame="47" value="-6.35319" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="17" value="-88.3224" />
                                        <Key frame="26" value="-88.3224" />
                                        <Key frame="31" value="-88.3224" />
                                        <Key frame="39" value="-82.721" />
                                        <Key frame="44" value="-73.9596" />
                                        <Key frame="51" value="-65.862" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="17" value="-68.1519" />
                                        <Key frame="26" value="-57.8875" />
                                        <Key frame="31" value="-55.3138" />
                                        <Key frame="39" value="-59.9818" />
                                        <Key frame="44" value="-59.9818" />
                                        <Key frame="51" value="-59.9818" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="17" value="0.865834" />
                                        <Key frame="26" value="0.854073" />
                                        <Key frame="31" value="0.843551" />
                                        <Key frame="39" value="0.8" />
                                        <Key frame="44" value="0.592788" />
                                        <Key frame="51" value="0.376586" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="13" value="7.57681" />
                                        <Key frame="22" value="2.42793" />
                                        <Key frame="27" value="-0.236286" />
                                        <Key frame="35" value="-2.28279" />
                                        <Key frame="40" value="1.9805" />
                                        <Key frame="47" value="7.5858" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="13" value="1.79606" />
                                        <Key frame="22" value="2.56746" />
                                        <Key frame="27" value="2.56746" />
                                        <Key frame="35" value="3.18885" />
                                        <Key frame="40" value="4.03031" />
                                        <Key frame="47" value="4.80285" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="13" value="-9.8646" />
                                        <Key frame="22" value="-9.8646" />
                                        <Key frame="27" value="-10.4376" />
                                        <Key frame="35" value="-11.0883" />
                                        <Key frame="40" value="-11.0883" />
                                        <Key frame="47" value="-10.3535" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="13" value="-4.74636" />
                                        <Key frame="22" value="-4.74636" />
                                        <Key frame="27" value="-4.74636" />
                                        <Key frame="35" value="-4.74636" />
                                        <Key frame="40" value="-4.74636" />
                                        <Key frame="47" value="-4.74636" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="17" value="79.8052" />
                                        <Key frame="26" value="70.8914" />
                                        <Key frame="31" value="69.3222" />
                                        <Key frame="39" value="72.1598" />
                                        <Key frame="44" value="72.7714" />
                                        <Key frame="51" value="74.0205" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="17" value="7.36612" />
                                        <Key frame="26" value="6.06407" />
                                        <Key frame="31" value="5.26006" />
                                        <Key frame="39" value="2.60293" />
                                        <Key frame="44" value="7.72673" />
                                        <Key frame="51" value="12.163" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="17" value="-21.016" />
                                        <Key frame="26" value="-43.9666" />
                                        <Key frame="31" value="-54.9769" />
                                        <Key frame="39" value="-64.7665" />
                                        <Key frame="44" value="-39.1675" />
                                        <Key frame="51" value="-5.66774" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="13" value="4.8023" />
                                        <Key frame="22" value="5.59974" />
                                        <Key frame="27" value="6.28749" />
                                        <Key frame="35" value="6.28749" />
                                        <Key frame="40" value="5.63887" />
                                        <Key frame="47" value="4.91933" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="13" value="9.00774" />
                                        <Key frame="22" value="7.48585" />
                                        <Key frame="27" value="6.81659" />
                                        <Key frame="35" value="6.81659" />
                                        <Key frame="40" value="6.81659" />
                                        <Key frame="47" value="6.81659" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="86.1549" />
                                        <Key frame="24" value="87.7583" />
                                        <Key frame="29" value="87.7583" />
                                        <Key frame="37" value="64.9846" />
                                        <Key frame="42" value="60.2937" />
                                        <Key frame="49" value="58.6416" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="68.2695" />
                                        <Key frame="24" value="57.0892" />
                                        <Key frame="29" value="55.0117" />
                                        <Key frame="37" value="58.8014" />
                                        <Key frame="42" value="59.628" />
                                        <Key frame="49" value="60.2413" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="0.618988" />
                                        <Key frame="24" value="0.456782" />
                                        <Key frame="29" value="0.367645" />
                                        <Key frame="37" value="0.304126" />
                                        <Key frame="42" value="0.304126" />
                                        <Key frame="49" value="0.304126" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="13" value="6.81969" />
                                        <Key frame="22" value="2.52902" />
                                        <Key frame="27" value="0.345477" />
                                        <Key frame="35" value="-1.16591" />
                                        <Key frame="40" value="2.57098" />
                                        <Key frame="47" value="7.48417" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="13" value="-8.72964" />
                                        <Key frame="22" value="-6.30757" />
                                        <Key frame="27" value="-5.50677" />
                                        <Key frame="35" value="-4.82732" />
                                        <Key frame="40" value="-4.82732" />
                                        <Key frame="47" value="-4.82732" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="13" value="-9.8646" />
                                        <Key frame="22" value="-9.8646" />
                                        <Key frame="27" value="-10.4376" />
                                        <Key frame="35" value="-11.0883" />
                                        <Key frame="40" value="-11.0883" />
                                        <Key frame="47" value="-10.3535" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="13" value="-4.52137" />
                                        <Key frame="22" value="-4.52137" />
                                        <Key frame="27" value="-4.52137" />
                                        <Key frame="35" value="-4.52137" />
                                        <Key frame="40" value="-4.52137" />
                                        <Key frame="47" value="-4.52137" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="72.7806" />
                                        <Key frame="24" value="70.0927" />
                                        <Key frame="29" value="69.5119" />
                                        <Key frame="37" value="74.1141" />
                                        <Key frame="42" value="77.0457" />
                                        <Key frame="49" value="79.665" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="-8.72776" />
                                        <Key frame="24" value="-10.8365" />
                                        <Key frame="29" value="-11.6998" />
                                        <Key frame="37" value="-11.6998" />
                                        <Key frame="42" value="-12.3151" />
                                        <Key frame="49" value="-12.3151" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-21.8077" />
                                        <Key frame="24" value="20.7802" />
                                        <Key frame="29" value="42.9035" />
                                        <Key frame="37" value="64.4107" />
                                        <Key frame="42" value="39.9616" />
                                        <Key frame="49" value="6.68441" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="OfferBothHands_HeadNod_LeanLeft_01" id="53" localization="8" tooltip="ID : #01C 0021&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Affirmative&#x0A;- Indicate&#x0A;- Exactly&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : LeanLeft" x="364" y="294">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="54">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="26" value="-13.1862" />
                                        <Key frame="31" value="5.79845" />
                                        <Key frame="36" value="-13.1862" />
                                        <Key frame="52" value="-11.8678" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="21" value="-12.7467" />
                                        <Key frame="31" value="-8.00056" />
                                        <Key frame="51" value="-2.72705" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="21" value="-3.86484" />
                                        <Key frame="31" value="-5.53478" />
                                        <Key frame="51" value="3.78175" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="14" value="-86.0436" />
                                        <Key frame="22" value="-46.9318" />
                                        <Key frame="41" value="-88.5" />
                                        <Key frame="54" value="-73.2" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="22" value="-93.1676" />
                                        <Key frame="54" value="-46.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="14" value="0.14" />
                                        <Key frame="22" value="0.8" />
                                        <Key frame="30" value="0.4844" />
                                        <Key frame="41" value="0.69" />
                                        <Key frame="54" value="0.04" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="21" value="-4.56796" />
                                        <Key frame="31" value="2.11181" />
                                        <Key frame="51" value="13.8893" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="21" value="5.71537" />
                                        <Key frame="31" value="6.41851" />
                                        <Key frame="51" value="-3.86484" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="21" value="-16.2576" />
                                        <Key frame="31" value="-15.906" />
                                        <Key frame="51" value="-17.8396" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="21" value="29.0019" />
                                        <Key frame="31" value="18.1912" />
                                        <Key frame="51" value="2.72224" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="14" value="61.5218" />
                                        <Key frame="22" value="70.5747" />
                                        <Key frame="30" value="66.7953" />
                                        <Key frame="41" value="52.4" />
                                        <Key frame="54" value="64.5" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="14" value="-9.49471" />
                                        <Key frame="22" value="-5.27591" />
                                        <Key frame="30" value="-4.13332" />
                                        <Key frame="41" value="7" />
                                        <Key frame="54" value="-0.5" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="14" value="-59.593" />
                                        <Key frame="22" value="-77.1713" />
                                        <Key frame="41" value="-53.7" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-5.29369" ordinateParam="-17.0665" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="3.622" ordinateParam="11.677" />
                                        </Key>
                                        <Key frame="54" value="22.41" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="21" value="-6.4137" />
                                        <Key frame="31" value="-4.2164" />
                                        <Key frame="51" value="3.95753" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="21" value="2.81494" />
                                        <Key frame="31" value="1.49656" />
                                        <Key frame="51" value="6.5064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="12" value="87.2789" />
                                        <Key frame="20" value="47.4639" />
                                        <Key frame="28" value="67.5033" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-2.4478" ordinateParam="-6.77876" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="3.97767" ordinateParam="11.0155" />
                                        </Key>
                                        <Key frame="41" value="88.5" />
                                        <Key frame="52" value="73.2" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="20" value="103.007" />
                                        <Key frame="28" value="95.5359" />
                                        <Key frame="52" value="46.7" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="12" value="0.14" />
                                        <Key frame="20" value="0.8" />
                                        <Key frame="28" value="0.4812" />
                                        <Key frame="41" value="0.69" />
                                        <Key frame="52" value="0.04" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="21" value="-2.55127" />
                                        <Key frame="31" value="2.107" />
                                        <Key frame="51" value="12.7419" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="21" value="0.793436" />
                                        <Key frame="31" value="1.49656" />
                                        <Key frame="51" value="-6.06212" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="21" value="-16.2576" />
                                        <Key frame="31" value="-15.906" />
                                        <Key frame="51" value="-17.8396" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="21" value="20.1296" />
                                        <Key frame="31" value="13.5377" />
                                        <Key frame="51" value="-2.98591" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="12" value="63.0208" />
                                        <Key frame="20" value="73.4799" />
                                        <Key frame="28" value="70.14" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-2.66667" ordinateParam="3.52605" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="4.33333" ordinateParam="-5.72983" />
                                        </Key>
                                        <Key frame="41" value="52.4" />
                                        <Key frame="52" value="64.5" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="12" value="13.7966" />
                                        <Key frame="20" value="2.89802" />
                                        <Key frame="28" value="5.79845" />
                                        <Key frame="41" value="-7" />
                                        <Key frame="52" value="0.5" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="12" value="57.303" />
                                        <Key frame="20" value="78.9244" />
                                        <Key frame="41" value="53.7" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-6.15125" ordinateParam="17.4287" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="3.22208" ordinateParam="-9.12932" />
                                        </Key>
                                        <Key frame="52" value="22.41" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Delay (1)" id="1" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="574" y="64">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="14" indexofinput="2" outputowner="4" indexofoutput="4" />
                                <Link inputowner="117" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="117" indexofoutput="4" />
                                <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                <Link inputowner="6" indexofinput="2" outputowner="42" indexofoutput="4" />
                                <Link inputowner="42" indexofinput="2" outputowner="53" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="4" />
                                <Link inputowner="53" indexofinput="2" outputowner="1" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Only Once" id="1" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="680" y="292">
                        <bitmap>media/images/box/loop.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                        <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                      </Box>
                      <Box name="Goto Posture" id="5" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="297" y="259">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Goto Posture (1)" id="3" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="1232" y="420">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Mystical" id="7" localization="8" tooltip="ID : #04C 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags :&#x0A;- Mystical" x="824" y="317">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="200">
                          <BehaviorLayer name="LED">
                            <BehaviorKeyframe name="LED" index="1">
                              <Diagram>
                                <Box name="blinks" id="3" localization="8" tooltip="blinks" x="555" y="72">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):


        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLed0", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed1", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed2", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed5", 0xffffff, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed6", 0x000000, rDuration, _async=True );
        self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration );

        time.sleep( 0.1 );

        rDuration = 0.05;
        self.leds.fadeRGB( "FaceLeds", 0xffffff, rDuration );

        return;


    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="CircleEyes" id="4" localization="8" tooltip="tags:&#x0A;LED&#x0A;Change the color inside the box!" x="299" y="49">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="Speed" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.7" min="0.02" max="2" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="CircleLED" id="1" localization="8" tooltip="Beautiful eyes circle animation" x="354" y="39">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[def circleLedsEyes(ledService, nColor, rTime, nNbrTurn ):
  # launch a leds animation using one color
  nNbrSegment = 8;
  for i in range( nNbrSegment*nNbrTurn ):
    ledService.fadeRGB( "FaceLed%d" % (i%nNbrSegment) , nColor, rTime, _async=True );
    ledService.fadeRGB( "FaceLed%d" % (i%nNbrSegment) , 0x000000, rTime*1.25, _async=True );
    time.sleep( rTime*0.25 );
  time.sleep( rTime*0.5 ); # wait last time
# circleLedsEyes - end

class MyClass(GeneratedClass):
  """ comments """
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onLoad(self):
    self.leds = self.session().service("ALLeds")

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self, p):
    self.logger.info( self.getName() + ": start - begin" );

    if( self.bIsRunning ):
      print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;

    while( not self.bMustStop ):
      circleLedsEyes(self.leds, (p[0]<<16) + (p[1] << 8) + p[2], self.getParameter("Speed"), 1 );
    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="Speed" inherits_from_parent="1" content_type="2" value="0.7" default_value="0.7" min="0.02" max="2" tooltip="" id="5" />
                                          </Box>
                                          <Box name="Color" id="2" localization="8" tooltip="Enter tooltip here" plugin="coloredit_plugin" x="177" y="39">
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <color>#ffffff</color>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="143" y="162">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="4" />
                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <BehaviorLayer name="Fx">
                            <BehaviorKeyframe name="keyframe50" index="50">
                              <Diagram>
                                <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be&#x0A;wav, mp3, or ogg." x="77" y="24">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File path" inherits_from_parent="0" content_type="4" value="/behavior_1/heaven1.ogg" default_value="" tooltip="Path of the file (including its name) which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project resources and import&#x0A;files in the resources." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Panorama" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on NAO&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Panorama"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Panorama"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Panorama" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on NAO&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                            <Resource name="Audio player" type="Stop on demand" timeout="0" />
                                          </Box>
                                          <Box name="Get File Path" id="1" localization="8" tooltip="Use this box to choose a resource file in its parameters. The filepath will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File path"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File path" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Path of the file (including its name) which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project resources and import&#x0A;files in the resources." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                              <Key frame="35" value="-2.11181" />
                              <Key frame="83" value="-2.28759" />
                              <Key frame="117" value="-3.43018" />
                              <Key frame="154" value="-3.16651" />
                              <Key frame="200" value="-1.145" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                              <Key frame="35" value="15.2029" />
                              <Key frame="83" value="-31.1161" />
                              <Key frame="117" value="-37.2685" />
                              <Key frame="154" value="-38.5" />
                              <Key frame="179" value="-25" />
                              <Key frame="200" value="-12.0436" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                              <Key frame="33" value="83.1432" />
                              <Key frame="81" value="-35.7743" />
                              <Key frame="115" value="-39.29" />
                              <Key frame="152" value="-40.6963" />
                              <Key frame="198" value="86.3952" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                              <Key frame="33" value="19.5975" />
                              <Key frame="59" value="58" />
                              <Key frame="81" value="33.8359" />
                              <Key frame="115" value="18.367" />
                              <Key frame="152" value="16.1697" />
                              <Key frame="198" value="4.83164" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                              <Key frame="33" value="-113.207" />
                              <Key frame="59" value="-50" />
                              <Key frame="81" value="-98.7048" />
                              <Key frame="115" value="-74.9741" />
                              <Key frame="152" value="-75.0619" />
                              <Key frame="198" value="-66.5364" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                              <Key frame="33" value="-22.2342" />
                              <Key frame="81" value="-30.8476" />
                              <Key frame="115" value="-53.3479" />
                              <Key frame="152" value="-47.547" />
                              <Key frame="177" value="-80" />
                              <Key frame="198" value="-24.0799" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                              <Key frame="81" value="-15" />
                              <Key frame="115" value="-58" />
                              <Key frame="152" value="-66" />
                              <Key frame="177" value="-66" />
                              <Key frame="198" value="7.3805" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                              <Key frame="81" value="0.598182" />
                              <Key frame="115" value="0.872727" />
                              <Key frame="152" value="0.875296" />
                              <Key frame="198" value="0.3008" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                              <Key frame="31" value="82.0054" />
                              <Key frame="79" value="-40.4278" />
                              <Key frame="113" value="-40.6915" />
                              <Key frame="150" value="-46.3165" />
                              <Key frame="196" value="87.4547" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                              <Key frame="31" value="-20.7449" />
                              <Key frame="57" value="-66" />
                              <Key frame="79" value="-42.7178" />
                              <Key frame="113" value="-18.4597" />
                              <Key frame="150" value="-15.1198" />
                              <Key frame="196" value="-4.66067" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                              <Key frame="31" value="119.496" />
                              <Key frame="57" value="43" />
                              <Key frame="79" value="79.4517" />
                              <Key frame="113" value="69.8715" />
                              <Key frame="150" value="70.311" />
                              <Key frame="196" value="66.1801" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                              <Key frame="31" value="25.7547" />
                              <Key frame="79" value="28.3914" />
                              <Key frame="113" value="50.0128" />
                              <Key frame="150" value="40.3447" />
                              <Key frame="175" value="78" />
                              <Key frame="196" value="25.0515" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                              <Key frame="79" value="25" />
                              <Key frame="113" value="58" />
                              <Key frame="150" value="57.8303" />
                              <Key frame="175" value="64" />
                              <Key frame="196" value="9.92936" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                              <Key frame="79" value="0.650909" />
                              <Key frame="113" value="0.854545" />
                              <Key frame="150" value="0.852024" />
                              <Key frame="196" value="0.3016" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                              <Key frame="80" value="-21.7947" />
                              <Key frame="114" value="-20.3885" />
                              <Key frame="151" value="-20.9158" />
                              <Key frame="197" value="-9.22623" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                              <Key frame="80" value="11.4283" />
                              <Key frame="114" value="13.5377" />
                              <Key frame="151" value="13.6256" />
                              <Key frame="197" value="6.4185" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                              <Key frame="80" value="23.1179" />
                              <Key frame="114" value="27.4246" />
                              <Key frame="151" value="27.5125" />
                              <Key frame="197" value="11.692" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                              <Key frame="80" value="-5.29104" />
                              <Key frame="114" value="-5.29104" />
                              <Key frame="151" value="-4.74856" />
                              <Key frame="197" value="-5.18802" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                              <Key frame="80" value="1.75543" />
                              <Key frame="114" value="-1.145" />
                              <Key frame="151" value="-0.969213" />
                              <Key frame="197" value="4.12851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                              <Key frame="80" value="-8.61098" />
                              <Key frame="114" value="-9.92936" />
                              <Key frame="151" value="-9.75358" />
                              <Key frame="197" value="-6.15002" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                              <Key frame="80" value="-7.46839" />
                              <Key frame="114" value="-8.25942" />
                              <Key frame="151" value="-8.69888" />
                              <Key frame="197" value="-3.95272" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                              <Key frame="80" value="25.3104" />
                              <Key frame="114" value="27.8242" />
                              <Key frame="151" value="27.7714" />
                              <Key frame="197" value="10.7204" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                              <Key frame="80" value="-5.90622" />
                              <Key frame="114" value="-5.53477" />
                              <Key frame="151" value="-5.18321" />
                              <Key frame="197" value="-4.2164" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                              <Key frame="80" value="0.353971" />
                              <Key frame="114" value="-2.63435" />
                              <Key frame="151" value="-1.57965" />
                              <Key frame="197" value="3.69386" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                              <Key frame="80" value="5.18802" />
                              <Key frame="114" value="5.80326" />
                              <Key frame="151" value="5.80326" />
                              <Key frame="197" value="3.78175" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                        <Resource name="Standing" type="Lock" timeout="1" />
                        <Resource name="Left eye leds" type="Lock" timeout="1" />
                        <Resource name="Right eye leds" type="Lock" timeout="1" />
                        <Resource name="All motors" type="Lock" timeout="1" />
                      </Box>
                      <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="3" />
                      <Link inputowner="23" indexofinput="2" outputowner="22" indexofoutput="3" />
                      <Link inputowner="22" indexofinput="2" outputowner="24" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="6" outputowner="23" indexofoutput="4" />
                      <Link inputowner="18" indexofinput="2" outputowner="12" indexofoutput="3" />
                      <Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="6" />
                      <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="5" />
                      <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="6" />
                      <Link inputowner="2" indexofinput="2" outputowner="24" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="18" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="15" indexofoutput="8" />
                      <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="24" indexofinput="2" outputowner="7" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
            <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="6" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
